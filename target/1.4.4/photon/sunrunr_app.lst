
c:/Users/enriq/OneDrive/sunrunr_app/target/1.4.4/photon/sunrunr_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000062c0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a62e0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000b8  20000000  080a62e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000714  200000b8  200000b8  000400b8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a639c  080a639c  0003639c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a63c4  080a63c4  000363c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e08d9  00000000  00000000  000363c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000145f2  00000000  00000000  00116ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00018512  00000000  00000000  0012b293  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000023b8  00000000  00000000  001437a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000037b0  00000000  00000000  00145b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002b6e3  00000000  00000000  0014930d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002f9b3  00000000  00000000  001749f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a88a7  00000000  00000000  001a43a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000cd58  00000000  00000000  0024cc4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f003 ff29 	bl	80a3e88 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f003 ff2e 	bl	80a3e9e <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a62e4 	.word	0x080a62e4
 80a0050:	200000b8 	.word	0x200000b8
 80a0054:	200000b8 	.word	0x200000b8
 80a0058:	200007cc 	.word	0x200007cc
 80a005c:	200007cc 	.word	0x200007cc

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f001 fd63 	bl	80a1b2c <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a628c 	.word	0x080a628c
 80a0088:	080a62d8 	.word	0x080a62d8

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b828 	b.w	80a00e0 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 f86d 	bl	80a0170 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f001 bd09 	b.w	80a1ab0 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f001 bac5 	b.w	80a162c <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f001 bacb 	b.w	80a163c <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <_Z9myHandlerPKcS0_>:

    delay(1000);
}


void myHandler(const char *event, const char *data) {
 80a00b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Formatting output
  String output = String::format("Response from Post:\n  %s\n", data);
 80a00ba:	460a      	mov	r2, r1
 80a00bc:	4668      	mov	r0, sp
 80a00be:	4907      	ldr	r1, [pc, #28]	; (80a00dc <_Z9myHandlerPKcS0_+0x24>)
 80a00c0:	f001 fbe2 	bl	80a1888 <_ZN6String6formatEPKcz>
  // Log to serial console
  Serial.println(output);
 80a00c4:	f002 f8f6 	bl	80a22b4 <_Z16_fetch_usbserialv>
 80a00c8:	9900      	ldr	r1, [sp, #0]
 80a00ca:	f001 fc3a 	bl	80a1942 <_ZN5Print7printlnEPKc>
}


void myHandler(const char *event, const char *data) {
  // Formatting output
  String output = String::format("Response from Post:\n  %s\n", data);
 80a00ce:	4668      	mov	r0, sp
 80a00d0:	f001 fb5a 	bl	80a1788 <_ZN6StringD1Ev>
  // Log to serial console
  Serial.println(output);
 80a00d4:	b005      	add	sp, #20
 80a00d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80a00da:	bf00      	nop
 80a00dc:	080a5ba4 	.word	0x080a5ba4

080a00e0 <setup>:

// assign SETUP button's pin
int button = BTN;


void setup() {
 80a00e0:	b513      	push	{r0, r1, r4, lr}
    Serial.begin(9600); //define the baud rate
    
    
    //particle.syncTime();
    // Initialize the gps and turn it on    
    locationTracker.begin();
 80a00e2:	4c12      	ldr	r4, [pc, #72]	; (80a012c <setup+0x4c>)

void setup() {
    
    
    
    Serial.begin(9600); //define the baud rate
 80a00e4:	f002 f8e6 	bl	80a22b4 <_Z16_fetch_usbserialv>
 80a00e8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00ec:	f002 f8c8 	bl	80a2280 <_ZN9USBSerial5beginEl>
    
    
    //particle.syncTime();
    // Initialize the gps and turn it on    
    locationTracker.begin();
 80a00f0:	4620      	mov	r0, r4
 80a00f2:	f000 fd7f 	bl	80a0bf4 <_ZN12AssetTracker5beginEv>
    locationTracker.gpsOn();
 80a00f6:	4620      	mov	r0, r4
 80a00f8:	f000 fda0 	bl	80a0c3c <_ZN12AssetTracker5gpsOnEv>
    
    //Initialize the UV sensor
    UVTracker.begin(VEML6070_1_T);
 80a00fc:	2101      	movs	r1, #1
 80a00fe:	480c      	ldr	r0, [pc, #48]	; (80a0130 <setup+0x50>)
 80a0100:	f000 fd2e 	bl	80a0b60 <_ZN17Adafruit_VEML60705beginE24veml6070_integrationtime>
    
    // Setup pin mode for button
    pinMode(button, INPUT);
 80a0104:	4b0b      	ldr	r3, [pc, #44]	; (80a0134 <setup+0x54>)
 80a0106:	2100      	movs	r1, #0
 80a0108:	8818      	ldrh	r0, [r3, #0]
 80a010a:	f002 fb19 	bl	80a2740 <pinMode>
    // Setup webhook subscribe
    pinMode(BTN, INPUT_PULLUP);
 80a010e:	2102      	movs	r1, #2
 80a0110:	2014      	movs	r0, #20
 80a0112:	f002 fb15 	bl	80a2740 <pinMode>
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
 80a0116:	2300      	movs	r3, #0
 80a0118:	9301      	str	r3, [sp, #4]
 80a011a:	9300      	str	r3, [sp, #0]
 80a011c:	461a      	mov	r2, r3
 80a011e:	4906      	ldr	r1, [pc, #24]	; (80a0138 <setup+0x58>)
 80a0120:	4806      	ldr	r0, [pc, #24]	; (80a013c <setup+0x5c>)
 80a0122:	f001 fa6b 	bl	80a15fc <spark_subscribe>
    
    Particle.subscribe("hook-response/hit", myHandler, MY_DEVICES);
}
 80a0126:	b002      	add	sp, #8
 80a0128:	bd10      	pop	{r4, pc}
 80a012a:	bf00      	nop
 80a012c:	200000c0 	.word	0x200000c0
 80a0130:	200000c8 	.word	0x200000c8
 80a0134:	20000000 	.word	0x20000000
 80a0138:	080a00b9 	.word	0x080a00b9
 80a013c:	080a5bbe 	.word	0x080a5bbe

080a0140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0140:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a0142:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0144:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a0146:	b17c      	cbz	r4, 80a0168 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0148:	6863      	ldr	r3, [r4, #4]
 80a014a:	3b01      	subs	r3, #1
 80a014c:	6063      	str	r3, [r4, #4]
 80a014e:	b95b      	cbnz	r3, 80a0168 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a0150:	6823      	ldr	r3, [r4, #0]
 80a0152:	4620      	mov	r0, r4
 80a0154:	689b      	ldr	r3, [r3, #8]
 80a0156:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0158:	68a3      	ldr	r3, [r4, #8]
 80a015a:	3b01      	subs	r3, #1
 80a015c:	60a3      	str	r3, [r4, #8]
 80a015e:	b91b      	cbnz	r3, 80a0168 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0160:	6823      	ldr	r3, [r4, #0]
 80a0162:	4620      	mov	r0, r4
 80a0164:	68db      	ldr	r3, [r3, #12]
 80a0166:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a0168:	4628      	mov	r0, r5
 80a016a:	bd38      	pop	{r3, r4, r5, pc}
 80a016c:	0000      	movs	r0, r0
	...

080a0170 <loop>:


void loop() {
 80a0170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0174:	b08e      	sub	sp, #56	; 0x38
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0176:	f001 f8bb 	bl	80a12f0 <HAL_Timer_Get_Milli_Seconds>

      if (millis() - lastSync > ONE_DAY_MILLIS) {
 80a017a:	4c73      	ldr	r4, [pc, #460]	; (80a0348 <loop+0x1d8>)
 80a017c:	6823      	ldr	r3, [r4, #0]
 80a017e:	1ac0      	subs	r0, r0, r3
 80a0180:	4b72      	ldr	r3, [pc, #456]	; (80a034c <loop+0x1dc>)
 80a0182:	4298      	cmp	r0, r3
 80a0184:	d908      	bls.n	80a0198 <loop+0x28>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0186:	f001 fa29 	bl	80a15dc <spark_cloud_flag_connected>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        if (!connected()) {
 80a018a:	b110      	cbz	r0, 80a0192 <loop+0x22>
            return false;
        }
        return CLOUD_FN(spark_sync_time(NULL), false);
 80a018c:	2000      	movs	r0, #0
 80a018e:	f001 fa3d 	bl	80a160c <spark_sync_time>
 80a0192:	f001 f8ad 	bl	80a12f0 <HAL_Timer_Get_Milli_Seconds>
      // Request time synchronization from the Particle Device Cloud
      Particle.syncTime();
      lastSync = millis();
 80a0196:	6020      	str	r0, [r4, #0]
    }

    Serial.print(lastSync);
 80a0198:	f002 f88c 	bl	80a22b4 <_Z16_fetch_usbserialv>
 80a019c:	220a      	movs	r2, #10
 80a019e:	6821      	ldr	r1, [r4, #0]
 80a01a0:	f001 fbf8 	bl	80a1994 <_ZN5Print5printEmi>
    String data = "";
 80a01a4:	496a      	ldr	r1, [pc, #424]	; (80a0350 <loop+0x1e0>)
 80a01a6:	a806      	add	r0, sp, #24
 80a01a8:	f001 fb35 	bl	80a1816 <_ZN6StringC1EPK19__FlashStringHelper>
    //String apikey = "W29ZALZqQ9Xdgxdd5bzaEM7IEbDTCaqO";
    //String deviceId = "4c001f000e504b464d323520";
    
    //Get the UV values
    totalUV = UVTracker.readUV();
 80a01ac:	4869      	ldr	r0, [pc, #420]	; (80a0354 <loop+0x1e4>)
 80a01ae:	f000 fcf6 	bl	80a0b9e <_ZN17Adafruit_VEML60706readUVEv>
 80a01b2:	f003 fbe7 	bl	80a3984 <__aeabi_ui2f>
 80a01b6:	4c68      	ldr	r4, [pc, #416]	; (80a0358 <loop+0x1e8>)
 80a01b8:	6020      	str	r0, [r4, #0]
    
    locationTracker.updateGPS(); // get the location
 80a01ba:	4868      	ldr	r0, [pc, #416]	; (80a035c <loop+0x1ec>)
 80a01bc:	f000 fd96 	bl	80a0cec <_ZN12AssetTracker9updateGPSEv>
    
    Serial.println("Checking for Fix");
 80a01c0:	f002 f878 	bl	80a22b4 <_Z16_fetch_usbserialv>
 80a01c4:	4966      	ldr	r1, [pc, #408]	; (80a0360 <loop+0x1f0>)
 80a01c6:	f001 fbbc 	bl	80a1942 <_ZN5Print7printlnEPKc>
    if (locationTracker.gpsFix()) { //GPS Fixed
 80a01ca:	4864      	ldr	r0, [pc, #400]	; (80a035c <loop+0x1ec>)
 80a01cc:	f000 fd78 	bl	80a0cc0 <_ZN12AssetTracker6gpsFixEv>
 80a01d0:	2800      	cmp	r0, #0
 80a01d2:	d03f      	beq.n	80a0254 <loop+0xe4>
        data = String::format("{ \"long\": \"%f\", \"lat\": \"%f\", \"GPS\": \"%f\", \"uv\": \"%f\" }", locationTracker.readLonDeg(), locationTracker.readLatDeg(), locationTracker.getSpeed(), totalUV);  
 80a01d4:	4861      	ldr	r0, [pc, #388]	; (80a035c <loop+0x1ec>)
 80a01d6:	f000 fd25 	bl	80a0c24 <_ZN12AssetTracker10readLonDegEv>
 80a01da:	4606      	mov	r6, r0
 80a01dc:	485f      	ldr	r0, [pc, #380]	; (80a035c <loop+0x1ec>)
 80a01de:	f000 fd1b 	bl	80a0c18 <_ZN12AssetTracker10readLatDegEv>
 80a01e2:	4605      	mov	r5, r0
 80a01e4:	485d      	ldr	r0, [pc, #372]	; (80a035c <loop+0x1ec>)
 80a01e6:	f000 fd23 	bl	80a0c30 <_ZN12AssetTracker8getSpeedEv>
 80a01ea:	4680      	mov	r8, r0
 80a01ec:	4630      	mov	r0, r6
 80a01ee:	f002 ff77 	bl	80a30e0 <__aeabi_f2d>
 80a01f2:	4606      	mov	r6, r0
 80a01f4:	6820      	ldr	r0, [r4, #0]
 80a01f6:	460f      	mov	r7, r1
 80a01f8:	f002 ff72 	bl	80a30e0 <__aeabi_f2d>
 80a01fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a0200:	4640      	mov	r0, r8
 80a0202:	f002 ff6d 	bl	80a30e0 <__aeabi_f2d>
 80a0206:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a020a:	4628      	mov	r0, r5
 80a020c:	f002 ff68 	bl	80a30e0 <__aeabi_f2d>
 80a0210:	4632      	mov	r2, r6
 80a0212:	463b      	mov	r3, r7
 80a0214:	e9cd 0100 	strd	r0, r1, [sp]
 80a0218:	a80a      	add	r0, sp, #40	; 0x28
 80a021a:	4952      	ldr	r1, [pc, #328]	; (80a0364 <loop+0x1f4>)
 80a021c:	f001 fb34 	bl	80a1888 <_ZN6String6formatEPKcz>
 80a0220:	a90a      	add	r1, sp, #40	; 0x28
 80a0222:	a806      	add	r0, sp, #24
 80a0224:	f001 fb27 	bl	80a1876 <_ZN6StringaSEOS_>
 80a0228:	a80a      	add	r0, sp, #40	; 0x28
 80a022a:	f001 faad 	bl	80a1788 <_ZN6StringD1Ev>
        Serial.println("Fix"); 
 80a022e:	f002 f841 	bl	80a22b4 <_Z16_fetch_usbserialv>
 80a0232:	494d      	ldr	r1, [pc, #308]	; (80a0368 <loop+0x1f8>)
 80a0234:	f001 fb85 	bl	80a1942 <_ZN5Print7printlnEPKc>
 80a0238:	4b4c      	ldr	r3, [pc, #304]	; (80a036c <loop+0x1fc>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a023a:	a80a      	add	r0, sp, #40	; 0x28
 80a023c:	781b      	ldrb	r3, [r3, #0]
 80a023e:	9a06      	ldr	r2, [sp, #24]
 80a0240:	f88d 3000 	strb.w	r3, [sp]
 80a0244:	494a      	ldr	r1, [pc, #296]	; (80a0370 <loop+0x200>)
 80a0246:	233c      	movs	r3, #60	; 0x3c
 80a0248:	f001 fdde 	bl	80a1e08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a024c:	a80b      	add	r0, sp, #44	; 0x2c
 80a024e:	f7ff ff77 	bl	80a0140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0252:	e01f      	b.n	80a0294 <loop+0x124>
        Particle.publish("hit", data, PRIVATE);
    }
    else {
        Serial.println("NO Fix of course"); //GPS not fixed
 80a0254:	f002 f82e 	bl	80a22b4 <_Z16_fetch_usbserialv>
        data = String::format("{ \"long\": \"%f\", \"lat\": \"%f\", \"GPS\": \"%f\", \"uv\": \"%f\" }", 999.999, 999.999, 0.0, totalUV);
 80a0258:	a733      	add	r7, pc, #204	; (adr r7, 80a0328 <loop+0x1b8>)
 80a025a:	e9d7 6700 	ldrd	r6, r7, [r7]
        data = String::format("{ \"long\": \"%f\", \"lat\": \"%f\", \"GPS\": \"%f\", \"uv\": \"%f\" }", locationTracker.readLonDeg(), locationTracker.readLatDeg(), locationTracker.getSpeed(), totalUV);  
        Serial.println("Fix"); 
        Particle.publish("hit", data, PRIVATE);
    }
    else {
        Serial.println("NO Fix of course"); //GPS not fixed
 80a025e:	4945      	ldr	r1, [pc, #276]	; (80a0374 <loop+0x204>)
 80a0260:	f001 fb6f 	bl	80a1942 <_ZN5Print7printlnEPKc>
        data = String::format("{ \"long\": \"%f\", \"lat\": \"%f\", \"GPS\": \"%f\", \"uv\": \"%f\" }", 999.999, 999.999, 0.0, totalUV);
 80a0264:	6820      	ldr	r0, [r4, #0]
 80a0266:	f002 ff3b 	bl	80a30e0 <__aeabi_f2d>
 80a026a:	2200      	movs	r2, #0
 80a026c:	2300      	movs	r3, #0
 80a026e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a0272:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a0276:	493b      	ldr	r1, [pc, #236]	; (80a0364 <loop+0x1f4>)
 80a0278:	4632      	mov	r2, r6
 80a027a:	463b      	mov	r3, r7
 80a027c:	a80a      	add	r0, sp, #40	; 0x28
 80a027e:	e9cd 6700 	strd	r6, r7, [sp]
 80a0282:	f001 fb01 	bl	80a1888 <_ZN6String6formatEPKcz>
 80a0286:	a90a      	add	r1, sp, #40	; 0x28
 80a0288:	a806      	add	r0, sp, #24
 80a028a:	f001 faf4 	bl	80a1876 <_ZN6StringaSEOS_>
 80a028e:	a80a      	add	r0, sp, #40	; 0x28
 80a0290:	f001 fa7a 	bl	80a1788 <_ZN6StringD1Ev>
        }
    Serial.println(data);
 80a0294:	f002 f80e 	bl	80a22b4 <_Z16_fetch_usbserialv>
 80a0298:	9906      	ldr	r1, [sp, #24]
 80a029a:	f001 fb52 	bl	80a1942 <_ZN5Print7printlnEPKc>
    
    if (digitalRead(button) == 0) {
 80a029e:	4b36      	ldr	r3, [pc, #216]	; (80a0378 <loop+0x208>)
 80a02a0:	8818      	ldrh	r0, [r3, #0]
 80a02a2:	f002 fa77 	bl	80a2794 <digitalRead>
 80a02a6:	2800      	cmp	r0, #0
 80a02a8:	d133      	bne.n	80a0312 <loop+0x1a2>
        Serial.println("button pressed!");
 80a02aa:	f002 f803 	bl	80a22b4 <_Z16_fetch_usbserialv>
 80a02ae:	4933      	ldr	r1, [pc, #204]	; (80a037c <loop+0x20c>)
 80a02b0:	f001 fb47 	bl	80a1942 <_ZN5Print7printlnEPKc>
        data = String::format("{ \"long\": \"%f\", \"lat\": \"%f\", \"GPS\": \"%f\", \"uv\": \"%f\"}", -111.308585, 32.446482, 5.69, totalUV);
 80a02b4:	6820      	ldr	r0, [r4, #0]
 80a02b6:	f002 ff13 	bl	80a30e0 <__aeabi_f2d>
 80a02ba:	a31d      	add	r3, pc, #116	; (adr r3, 80a0330 <loop+0x1c0>)
 80a02bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a02c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a02c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a02c8:	a31b      	add	r3, pc, #108	; (adr r3, 80a0338 <loop+0x1c8>)
 80a02ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a02ce:	492c      	ldr	r1, [pc, #176]	; (80a0380 <loop+0x210>)
 80a02d0:	e9cd 2300 	strd	r2, r3, [sp]
 80a02d4:	a31a      	add	r3, pc, #104	; (adr r3, 80a0340 <loop+0x1d0>)
 80a02d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a02da:	a80a      	add	r0, sp, #40	; 0x28
 80a02dc:	f001 fad4 	bl	80a1888 <_ZN6String6formatEPKcz>
 80a02e0:	a90a      	add	r1, sp, #40	; 0x28
 80a02e2:	a806      	add	r0, sp, #24
 80a02e4:	f001 fac7 	bl	80a1876 <_ZN6StringaSEOS_>
 80a02e8:	a80a      	add	r0, sp, #40	; 0x28
 80a02ea:	f001 fa4d 	bl	80a1788 <_ZN6StringD1Ev>
        Serial.println(data);
 80a02ee:	f001 ffe1 	bl	80a22b4 <_Z16_fetch_usbserialv>
 80a02f2:	9906      	ldr	r1, [sp, #24]
 80a02f4:	f001 fb25 	bl	80a1942 <_ZN5Print7printlnEPKc>
 80a02f8:	4b1c      	ldr	r3, [pc, #112]	; (80a036c <loop+0x1fc>)
 80a02fa:	a80a      	add	r0, sp, #40	; 0x28
 80a02fc:	781b      	ldrb	r3, [r3, #0]
 80a02fe:	9a06      	ldr	r2, [sp, #24]
 80a0300:	f88d 3000 	strb.w	r3, [sp]
 80a0304:	491a      	ldr	r1, [pc, #104]	; (80a0370 <loop+0x200>)
 80a0306:	233c      	movs	r3, #60	; 0x3c
 80a0308:	f001 fd7e 	bl	80a1e08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a030c:	a80b      	add	r0, sp, #44	; 0x2c
 80a030e:	f7ff ff17 	bl	80a0140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        // Publish to webhook
        Particle.publish("hit", data, PRIVATE);
    }

    delay(1000);
 80a0312:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0316:	f001 fb69 	bl	80a19ec <delay>
      Particle.syncTime();
      lastSync = millis();
    }

    Serial.print(lastSync);
    String data = "";
 80a031a:	a806      	add	r0, sp, #24
 80a031c:	f001 fa34 	bl	80a1788 <_ZN6StringD1Ev>
        // Publish to webhook
        Particle.publish("hit", data, PRIVATE);
    }

    delay(1000);
}
 80a0320:	b00e      	add	sp, #56	; 0x38
 80a0322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0326:	bf00      	nop
 80a0328:	f3b645a2 	.word	0xf3b645a2
 80a032c:	408f3ffd 	.word	0x408f3ffd
 80a0330:	5c28f5c3 	.word	0x5c28f5c3
 80a0334:	4016c28f 	.word	0x4016c28f
 80a0338:	527a2058 	.word	0x527a2058
 80a033c:	40403926 	.word	0x40403926
 80a0340:	db4cc250 	.word	0xdb4cc250
 80a0344:	c05bd3bf 	.word	0xc05bd3bf
 80a0348:	200000c4 	.word	0x200000c4
 80a034c:	05265c00 	.word	0x05265c00
 80a0350:	080a5e2a 	.word	0x080a5e2a
 80a0354:	200000c8 	.word	0x200000c8
 80a0358:	200000bc 	.word	0x200000bc
 80a035c:	200000c0 	.word	0x200000c0
 80a0360:	080a5bd0 	.word	0x080a5bd0
 80a0364:	080a5be1 	.word	0x080a5be1
 80a0368:	080a5bdd 	.word	0x080a5bdd
 80a036c:	200000c1 	.word	0x200000c1
 80a0370:	080a5bcc 	.word	0x080a5bcc
 80a0374:	080a5c18 	.word	0x080a5c18
 80a0378:	20000000 	.word	0x20000000
 80a037c:	080a5c29 	.word	0x080a5c29
 80a0380:	080a5c39 	.word	0x080a5c39

080a0384 <_GLOBAL__sub_I_lastSync>:
void myHandler(const char *event, const char *data) {
  // Formatting output
  String output = String::format("Response from Post:\n  %s\n", data);
  // Log to serial console
  Serial.println(output);
 80a0384:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0386:	4b07      	ldr	r3, [pc, #28]	; (80a03a4 <_GLOBAL__sub_I_lastSync+0x20>)
 80a0388:	2201      	movs	r2, #1
 80a038a:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a038c:	f000 ff40 	bl	80a1210 <HAL_Pin_Map>
 80a0390:	f000 ffae 	bl	80a12f0 <HAL_Timer_Get_Milli_Seconds>

// This #include statement was automatically added by the Particle IDE.
#include <Adafruit_VEML6070.h>

#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)
unsigned long lastSync = millis();
 80a0394:	4b04      	ldr	r3, [pc, #16]	; (80a03a8 <_GLOBAL__sub_I_lastSync+0x24>)
 80a0396:	6018      	str	r0, [r3, #0]
void myHandler(const char *event, const char *data) {
  // Formatting output
  String output = String::format("Response from Post:\n  %s\n", data);
  // Log to serial console
  Serial.println(output);
 80a0398:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
//using namespace std;

bool executeStateMachines = false;

Adafruit_VEML6070 UVTracker = Adafruit_VEML6070();
AssetTracker locationTracker = AssetTracker();
 80a039c:	4803      	ldr	r0, [pc, #12]	; (80a03ac <_GLOBAL__sub_I_lastSync+0x28>)
 80a039e:	f000 bc27 	b.w	80a0bf0 <_ZN12AssetTrackerC1Ev>
 80a03a2:	bf00      	nop
 80a03a4:	200000c1 	.word	0x200000c1
 80a03a8:	200000c4 	.word	0x200000c4
 80a03ac:	200000c0 	.word	0x200000c0

080a03b0 <_ZN12Adafruit_GPS4readEv>:
  }

  return false;
}

char Adafruit_GPS::read(void) {
 80a03b0:	b570      	push	{r4, r5, r6, lr}
  char c = 0;

  if (paused) return c;
 80a03b2:	f890 504a 	ldrb.w	r5, [r0, #74]	; 0x4a
  }

  return false;
}

char Adafruit_GPS::read(void) {
 80a03b6:	4604      	mov	r4, r0
  char c = 0;

  if (paused) return c;
 80a03b8:	b10d      	cbz	r5, 80a03be <_ZN12Adafruit_GPS4readEv+0xe>
 80a03ba:	2000      	movs	r0, #0
 80a03bc:	bd70      	pop	{r4, r5, r6, pc}
    if(!gpsSwSerial->available()) return c;
    c = gpsSwSerial->read();
  } else
#endif
  {
    if(!gpsHwSerial->available()) return c;
 80a03be:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80a03c0:	6803      	ldr	r3, [r0, #0]
 80a03c2:	691b      	ldr	r3, [r3, #16]
 80a03c4:	4798      	blx	r3
 80a03c6:	2800      	cmp	r0, #0
 80a03c8:	d0f7      	beq.n	80a03ba <_ZN12Adafruit_GPS4readEv+0xa>
    c = gpsHwSerial->read();
 80a03ca:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80a03cc:	6803      	ldr	r3, [r0, #0]
 80a03ce:	695b      	ldr	r3, [r3, #20]
 80a03d0:	4798      	blx	r3
 80a03d2:	b2c0      	uxtb	r0, r0

 // if (c == '$') {         //please don't eat the dollar sign - rdl 9/15/14
 //    currentline[lineidx] = 0;
 //    lineidx = 0;
 // }
  if (c == '\n') {
 80a03d4:	280a      	cmp	r0, #10
 80a03d6:	4b14      	ldr	r3, [pc, #80]	; (80a0428 <_ZN12Adafruit_GPS4readEv+0x78>)
 80a03d8:	4a14      	ldr	r2, [pc, #80]	; (80a042c <_ZN12Adafruit_GPS4readEv+0x7c>)
 80a03da:	d116      	bne.n	80a040a <_ZN12Adafruit_GPS4readEv+0x5a>
    currentline[lineidx] = 0;
 80a03dc:	7819      	ldrb	r1, [r3, #0]
 80a03de:	6814      	ldr	r4, [r2, #0]
 80a03e0:	b2c9      	uxtb	r1, r1
 80a03e2:	5465      	strb	r5, [r4, r1]

    if (currentline == line1) {
 80a03e4:	6816      	ldr	r6, [r2, #0]
 80a03e6:	4d12      	ldr	r5, [pc, #72]	; (80a0430 <_ZN12Adafruit_GPS4readEv+0x80>)
 80a03e8:	4c12      	ldr	r4, [pc, #72]	; (80a0434 <_ZN12Adafruit_GPS4readEv+0x84>)
 80a03ea:	4913      	ldr	r1, [pc, #76]	; (80a0438 <_ZN12Adafruit_GPS4readEv+0x88>)
 80a03ec:	42ae      	cmp	r6, r5
      currentline = line2;
      lastline = line1;
    } else {
      currentline = line1;
      lastline = line2;
 80a03ee:	bf14      	ite	ne
 80a03f0:	600c      	strne	r4, [r1, #0]
  if (c == '\n') {
    currentline[lineidx] = 0;

    if (currentline == line1) {
      currentline = line2;
      lastline = line1;
 80a03f2:	600e      	streq	r6, [r1, #0]
    }

    //Serial.println("----");
    //Serial.println((char *)lastline);
    //Serial.println("----");
    lineidx = 0;
 80a03f4:	f04f 0100 	mov.w	r1, #0
 80a03f8:	7019      	strb	r1, [r3, #0]
    recvdflag = true;
 80a03fa:	4910      	ldr	r1, [pc, #64]	; (80a043c <_ZN12Adafruit_GPS4readEv+0x8c>)
 // }
  if (c == '\n') {
    currentline[lineidx] = 0;

    if (currentline == line1) {
      currentline = line2;
 80a03fc:	bf08      	it	eq
 80a03fe:	6014      	streq	r4, [r2, #0]

    //Serial.println("----");
    //Serial.println((char *)lastline);
    //Serial.println("----");
    lineidx = 0;
    recvdflag = true;
 80a0400:	f04f 0401 	mov.w	r4, #1

    if (currentline == line1) {
      currentline = line2;
      lastline = line1;
    } else {
      currentline = line1;
 80a0404:	bf18      	it	ne
 80a0406:	6015      	strne	r5, [r2, #0]

    //Serial.println("----");
    //Serial.println((char *)lastline);
    //Serial.println("----");
    lineidx = 0;
    recvdflag = true;
 80a0408:	700c      	strb	r4, [r1, #0]
  }

  currentline[lineidx++] = c;
 80a040a:	6814      	ldr	r4, [r2, #0]
 80a040c:	781a      	ldrb	r2, [r3, #0]
 80a040e:	b2d2      	uxtb	r2, r2
 80a0410:	1c51      	adds	r1, r2, #1
 80a0412:	b2c9      	uxtb	r1, r1
 80a0414:	7019      	strb	r1, [r3, #0]
 80a0416:	54a0      	strb	r0, [r4, r2]
  if (lineidx >= MAXLINELENGTH)
 80a0418:	781b      	ldrb	r3, [r3, #0]
 80a041a:	2b77      	cmp	r3, #119	; 0x77
    lineidx = MAXLINELENGTH-1;
 80a041c:	bf82      	ittt	hi
 80a041e:	4b02      	ldrhi	r3, [pc, #8]	; (80a0428 <_ZN12Adafruit_GPS4readEv+0x78>)
 80a0420:	2277      	movhi	r2, #119	; 0x77
 80a0422:	701a      	strbhi	r2, [r3, #0]

  return c;
}
 80a0424:	bd70      	pop	{r4, r5, r6, pc}
 80a0426:	bf00      	nop
 80a0428:	200000d0 	.word	0x200000d0
 80a042c:	200000cc 	.word	0x200000cc
 80a0430:	200000d1 	.word	0x200000d1
 80a0434:	20000149 	.word	0x20000149
 80a0438:	200001c4 	.word	0x200001c4
 80a043c:	200001c1 	.word	0x200001c1

080a0440 <_ZN12Adafruit_GPS11common_initEv>:
void Adafruit_GPS::common_init(void) {
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
  recvdflag   = false;
 80a0440:	4a15      	ldr	r2, [pc, #84]	; (80a0498 <_ZN12Adafruit_GPS11common_initEv+0x58>)
// Initialization code used by all constructor types
void Adafruit_GPS::common_init(void) {
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
 80a0442:	2300      	movs	r3, #0
  recvdflag   = false;
 80a0444:	7013      	strb	r3, [r2, #0]
  paused      = false;
  lineidx     = 0;
 80a0446:	4a15      	ldr	r2, [pc, #84]	; (80a049c <_ZN12Adafruit_GPS11common_initEv+0x5c>)
  currentline = line1;
 80a0448:	4915      	ldr	r1, [pc, #84]	; (80a04a0 <_ZN12Adafruit_GPS11common_initEv+0x60>)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
  recvdflag   = false;
  paused      = false;
  lineidx     = 0;
 80a044a:	7013      	strb	r3, [r2, #0]
  currentline = line1;
 80a044c:	4a15      	ldr	r2, [pc, #84]	; (80a04a4 <_ZN12Adafruit_GPS11common_initEv+0x64>)
// Initialization code used by all constructor types
void Adafruit_GPS::common_init(void) {
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
 80a044e:	64c3      	str	r3, [r0, #76]	; 0x4c
  recvdflag   = false;
  paused      = false;
  lineidx     = 0;
  currentline = line1;
 80a0450:	6011      	str	r1, [r2, #0]
  lastline    = line2;
 80a0452:	4915      	ldr	r1, [pc, #84]	; (80a04a8 <_ZN12Adafruit_GPS11common_initEv+0x68>)
 80a0454:	4a15      	ldr	r2, [pc, #84]	; (80a04ac <_ZN12Adafruit_GPS11common_initEv+0x6c>)
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
  recvdflag   = false;
  paused      = false;
 80a0456:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
  lineidx     = 0;
  currentline = line1;
  lastline    = line2;
 80a045a:	6011      	str	r1, [r2, #0]

  hour = minute = seconds = year = month = day =
    fixquality = satellites = 0; // uint8_t
 80a045c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80a0460:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80a0464:	7143      	strb	r3, [r0, #5]
 80a0466:	7103      	strb	r3, [r0, #4]
 80a0468:	70c3      	strb	r3, [r0, #3]
 80a046a:	7083      	strb	r3, [r0, #2]
 80a046c:	7043      	strb	r3, [r0, #1]
 80a046e:	7003      	strb	r3, [r0, #0]
  lat = lon = mag = 0; // char
 80a0470:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80a0474:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 80a0478:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  fix = false; // boolean
 80a047c:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
  milliseconds = 0; // uint16_t
 80a0480:	80c3      	strh	r3, [r0, #6]
  latitude = longitude = geoidheight = altitude =
    speed = angle = magvariation = HDOP = 0.0; // float
 80a0482:	2300      	movs	r3, #0
 80a0484:	6343      	str	r3, [r0, #52]	; 0x34
 80a0486:	6303      	str	r3, [r0, #48]	; 0x30
 80a0488:	62c3      	str	r3, [r0, #44]	; 0x2c
 80a048a:	6283      	str	r3, [r0, #40]	; 0x28
 80a048c:	6243      	str	r3, [r0, #36]	; 0x24
 80a048e:	6203      	str	r3, [r0, #32]
 80a0490:	60c3      	str	r3, [r0, #12]
 80a0492:	6083      	str	r3, [r0, #8]
 80a0494:	4770      	bx	lr
 80a0496:	bf00      	nop
 80a0498:	200001c1 	.word	0x200001c1
 80a049c:	200000d0 	.word	0x200000d0
 80a04a0:	200000d1 	.word	0x200000d1
 80a04a4:	200000cc 	.word	0x200000cc
 80a04a8:	20000149 	.word	0x20000149
 80a04ac:	200001c4 	.word	0x200001c4

080a04b0 <_ZN12Adafruit_GPSC1EP11USARTSerial>:
  gpsSwSerial = ser; // ...override gpsSwSerial with value passed.
}
#endif

// Constructor when using HardwareSerial
Adafruit_GPS::Adafruit_GPS(HardwareSerial *ser) {
 80a04b0:	b538      	push	{r3, r4, r5, lr}
 80a04b2:	460d      	mov	r5, r1
  common_init();  // Set everything to common state, then...
 80a04b4:	f7ff ffc4 	bl	80a0440 <_ZN12Adafruit_GPS11common_initEv>
  gpsHwSerial = ser; // ...override gpsHwSerial with value passed.
 80a04b8:	64c5      	str	r5, [r0, #76]	; 0x4c
}
 80a04ba:	bd38      	pop	{r3, r4, r5, pc}

080a04bc <_ZN12Adafruit_GPS5beginEm>:
  latitude = longitude = geoidheight = altitude =
    speed = angle = magvariation = HDOP = 0.0; // float
}

void Adafruit_GPS::begin(uint32_t baud)
{
 80a04bc:	b508      	push	{r3, lr}
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  if(gpsSwSerial)
    gpsSwSerial->begin(baud);
  else
#endif
    gpsHwSerial->begin(baud);
 80a04be:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80a04c0:	f001 ffb6 	bl	80a2430 <_ZN11USARTSerial5beginEm>

  delay(10);
}
 80a04c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    gpsSwSerial->begin(baud);
  else
#endif
    gpsHwSerial->begin(baud);

  delay(10);
 80a04c8:	200a      	movs	r0, #10
 80a04ca:	f001 ba8f 	b.w	80a19ec <delay>

080a04ce <_ZN12Adafruit_GPS11sendCommandEPKc>:
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  if(gpsSwSerial)
    gpsSwSerial->println(str);
  else
#endif
    gpsHwSerial->println(str);
 80a04ce:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80a04d0:	f001 ba37 	b.w	80a1942 <_ZN5Print7printlnEPKc>

080a04d4 <_ZN12Adafruit_GPS15newNMEAreceivedEv>:
}

boolean Adafruit_GPS::newNMEAreceived(void) {
  return recvdflag;
 80a04d4:	4b01      	ldr	r3, [pc, #4]	; (80a04dc <_ZN12Adafruit_GPS15newNMEAreceivedEv+0x8>)
 80a04d6:	7818      	ldrb	r0, [r3, #0]
}
 80a04d8:	4770      	bx	lr
 80a04da:	bf00      	nop
 80a04dc:	200001c1 	.word	0x200001c1

080a04e0 <_ZN12Adafruit_GPS8lastNMEAEv>:
void Adafruit_GPS::pause(boolean p) {
  paused = p;
}

char *Adafruit_GPS::lastNMEA(void) {
  recvdflag = false;
 80a04e0:	4b02      	ldr	r3, [pc, #8]	; (80a04ec <_ZN12Adafruit_GPS8lastNMEAEv+0xc>)
 80a04e2:	2200      	movs	r2, #0
 80a04e4:	701a      	strb	r2, [r3, #0]
  return (char *)lastline;
}
 80a04e6:	4b02      	ldr	r3, [pc, #8]	; (80a04f0 <_ZN12Adafruit_GPS8lastNMEAEv+0x10>)
 80a04e8:	6818      	ldr	r0, [r3, #0]
 80a04ea:	4770      	bx	lr
 80a04ec:	200001c1 	.word	0x200001c1
 80a04f0:	200001c4 	.word	0x200001c4

080a04f4 <_ZN12Adafruit_GPS8parseHexEc>:

// read a Hex value and return the decimal equivalent
uint8_t Adafruit_GPS::parseHex(char c) {
    if (c < '0')
 80a04f4:	292f      	cmp	r1, #47	; 0x2f
 80a04f6:	d90a      	bls.n	80a050e <_ZN12Adafruit_GPS8parseHexEc+0x1a>
      return 0;
    if (c <= '9')
 80a04f8:	2939      	cmp	r1, #57	; 0x39
 80a04fa:	d801      	bhi.n	80a0500 <_ZN12Adafruit_GPS8parseHexEc+0xc>
      return c - '0';
 80a04fc:	3930      	subs	r1, #48	; 0x30
 80a04fe:	e004      	b.n	80a050a <_ZN12Adafruit_GPS8parseHexEc+0x16>
    if (c < 'A')
 80a0500:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 80a0504:	2b05      	cmp	r3, #5
 80a0506:	d802      	bhi.n	80a050e <_ZN12Adafruit_GPS8parseHexEc+0x1a>
       return 0;
    if (c <= 'F')
       return (c - 'A')+10;
 80a0508:	3937      	subs	r1, #55	; 0x37
 80a050a:	b2c8      	uxtb	r0, r1
 80a050c:	4770      	bx	lr
}

// read a Hex value and return the decimal equivalent
uint8_t Adafruit_GPS::parseHex(char c) {
    if (c < '0')
      return 0;
 80a050e:	2000      	movs	r0, #0
       return 0;
    if (c <= 'F')
       return (c - 'A')+10;
    // if (c > 'F')
    return 0;
}
 80a0510:	4770      	bx	lr
	...

080a0514 <_ZN12Adafruit_GPS5parseEPc>:
volatile char *lastline;
volatile boolean recvdflag;
volatile boolean inStandbyMode;


boolean Adafruit_GPS::parse(char *nmea) {
 80a0514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80a0518:	4604      	mov	r4, r0
  // do checksum check

  // first look if we even have one
  if (nmea[strlen(nmea)-4] == '*') {
 80a051a:	4608      	mov	r0, r1
volatile char *lastline;
volatile boolean recvdflag;
volatile boolean inStandbyMode;


boolean Adafruit_GPS::parse(char *nmea) {
 80a051c:	460d      	mov	r5, r1
  // do checksum check

  // first look if we even have one
  if (nmea[strlen(nmea)-4] == '*') {
 80a051e:	f003 fd20 	bl	80a3f62 <strlen>
 80a0522:	1f07      	subs	r7, r0, #4
 80a0524:	5deb      	ldrb	r3, [r5, r7]
 80a0526:	2b2a      	cmp	r3, #42	; 0x2a
 80a0528:	d119      	bne.n	80a055e <_ZN12Adafruit_GPS5parseEPc+0x4a>
    uint16_t sum = parseHex(nmea[strlen(nmea)-3]) * 16;
 80a052a:	182e      	adds	r6, r5, r0
 80a052c:	f816 1c03 	ldrb.w	r1, [r6, #-3]
 80a0530:	4620      	mov	r0, r4
 80a0532:	f7ff ffdf 	bl	80a04f4 <_ZN12Adafruit_GPS8parseHexEc>
 80a0536:	0100      	lsls	r0, r0, #4
 80a0538:	b282      	uxth	r2, r0
    sum += parseHex(nmea[strlen(nmea)-2]);
 80a053a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80a053e:	4620      	mov	r0, r4
 80a0540:	f7ff ffd8 	bl	80a04f4 <_ZN12Adafruit_GPS8parseHexEc>
 80a0544:	4410      	add	r0, r2
 80a0546:	b280      	uxth	r0, r0

    // check checksum
    for (uint8_t i=2; i < (strlen(nmea)-4); i++) {
 80a0548:	2302      	movs	r3, #2
 80a054a:	429f      	cmp	r7, r3
 80a054c:	d904      	bls.n	80a0558 <_ZN12Adafruit_GPS5parseEPc+0x44>
      sum ^= nmea[i];
 80a054e:	5cea      	ldrb	r2, [r5, r3]
  if (nmea[strlen(nmea)-4] == '*') {
    uint16_t sum = parseHex(nmea[strlen(nmea)-3]) * 16;
    sum += parseHex(nmea[strlen(nmea)-2]);

    // check checksum
    for (uint8_t i=2; i < (strlen(nmea)-4); i++) {
 80a0550:	3301      	adds	r3, #1
      sum ^= nmea[i];
 80a0552:	4050      	eors	r0, r2
  if (nmea[strlen(nmea)-4] == '*') {
    uint16_t sum = parseHex(nmea[strlen(nmea)-3]) * 16;
    sum += parseHex(nmea[strlen(nmea)-2]);

    // check checksum
    for (uint8_t i=2; i < (strlen(nmea)-4); i++) {
 80a0554:	b2db      	uxtb	r3, r3
 80a0556:	e7f8      	b.n	80a054a <_ZN12Adafruit_GPS5parseEPc+0x36>
      sum ^= nmea[i];
    }
    if (sum != 0) {
 80a0558:	b108      	cbz	r0, 80a055e <_ZN12Adafruit_GPS5parseEPc+0x4a>
      // bad checksum :(
      return false;
 80a055a:	2000      	movs	r0, #0
 80a055c:	e2e8      	b.n	80a0b30 <_ZN12Adafruit_GPS5parseEPc+0x61c>
  }
  int32_t degree;
  long minutes;
  char degreebuff[10];
  // look for a few common sentences
  if ((strstr(nmea, "$GPGGA")) || (strstr(nmea, "$GNGGA"))) {
 80a055e:	49b6      	ldr	r1, [pc, #728]	; (80a0838 <_ZN12Adafruit_GPS5parseEPc+0x324>)
 80a0560:	4628      	mov	r0, r5
 80a0562:	f003 fd2e 	bl	80a3fc2 <strstr>
 80a0566:	b930      	cbnz	r0, 80a0576 <_ZN12Adafruit_GPS5parseEPc+0x62>
 80a0568:	49b4      	ldr	r1, [pc, #720]	; (80a083c <_ZN12Adafruit_GPS5parseEPc+0x328>)
 80a056a:	4628      	mov	r0, r5
 80a056c:	f003 fd29 	bl	80a3fc2 <strstr>
 80a0570:	2800      	cmp	r0, #0
 80a0572:	f000 8173 	beq.w	80a085c <_ZN12Adafruit_GPS5parseEPc+0x348>
    // found GGA
    char *p = nmea;
    // get time
    p = strchr(p, ',')+1;
 80a0576:	212c      	movs	r1, #44	; 0x2c
 80a0578:	4628      	mov	r0, r5
 80a057a:	f003 fcc1 	bl	80a3f00 <strchr>
 80a057e:	1c45      	adds	r5, r0, #1
    float timef = atof(p);
 80a0580:	4628      	mov	r0, r5
 80a0582:	f003 fc63 	bl	80a3e4c <atof>
 80a0586:	f003 f8f7 	bl	80a3778 <__aeabi_d2f>
 80a058a:	4606      	mov	r6, r0
    uint32_t time = timef;
 80a058c:	f003 fc3e 	bl	80a3e0c <__aeabi_f2uiz>
    hour = time / 10000;
 80a0590:	f242 7210 	movw	r2, #10000	; 0x2710
 80a0594:	fbb0 f3f2 	udiv	r3, r0, r2
 80a0598:	7023      	strb	r3, [r4, #0]
    minute = (time % 10000) / 100;
 80a059a:	fb02 0313 	mls	r3, r2, r3, r0
 80a059e:	2764      	movs	r7, #100	; 0x64
 80a05a0:	fbb3 f3f7 	udiv	r3, r3, r7
 80a05a4:	7063      	strb	r3, [r4, #1]
    seconds = (time % 100);
 80a05a6:	fbb0 f3f7 	udiv	r3, r0, r7
 80a05aa:	fb07 0013 	mls	r0, r7, r3, r0
 80a05ae:	70a0      	strb	r0, [r4, #2]

    milliseconds = fmod(timef, 1.0) * 1000;
 80a05b0:	4630      	mov	r0, r6
 80a05b2:	f002 fd95 	bl	80a30e0 <__aeabi_f2d>
 80a05b6:	2200      	movs	r2, #0
 80a05b8:	4ba1      	ldr	r3, [pc, #644]	; (80a0840 <_ZN12Adafruit_GPS5parseEPc+0x32c>)
 80a05ba:	f002 faab 	bl	80a2b14 <fmod>
 80a05be:	4ba1      	ldr	r3, [pc, #644]	; (80a0844 <_ZN12Adafruit_GPS5parseEPc+0x330>)
 80a05c0:	2200      	movs	r2, #0
 80a05c2:	f002 fde1 	bl	80a3188 <__aeabi_dmul>
 80a05c6:	f003 f8b7 	bl	80a3738 <__aeabi_d2uiz>

    // parse out latitude
    p = strchr(p, ',')+1;
 80a05ca:	212c      	movs	r1, #44	; 0x2c
    uint32_t time = timef;
    hour = time / 10000;
    minute = (time % 10000) / 100;
    seconds = (time % 100);

    milliseconds = fmod(timef, 1.0) * 1000;
 80a05cc:	80e0      	strh	r0, [r4, #6]

    // parse out latitude
    p = strchr(p, ',')+1;
 80a05ce:	4628      	mov	r0, r5
 80a05d0:	f003 fc96 	bl	80a3f00 <strchr>
    if (',' != *p)
 80a05d4:	7843      	ldrb	r3, [r0, #1]
    seconds = (time % 100);

    milliseconds = fmod(timef, 1.0) * 1000;

    // parse out latitude
    p = strchr(p, ',')+1;
 80a05d6:	4605      	mov	r5, r0
    if (',' != *p)
 80a05d8:	2b2c      	cmp	r3, #44	; 0x2c
    seconds = (time % 100);

    milliseconds = fmod(timef, 1.0) * 1000;

    // parse out latitude
    p = strchr(p, ',')+1;
 80a05da:	f100 0601 	add.w	r6, r0, #1
    if (',' != *p)
 80a05de:	d053      	beq.n	80a0688 <_ZN12Adafruit_GPS5parseEPc+0x174>
    {
      strncpy(degreebuff, p, 2);
 80a05e0:	4631      	mov	r1, r6
 80a05e2:	2202      	movs	r2, #2
 80a05e4:	a801      	add	r0, sp, #4
 80a05e6:	f003 fcd9 	bl	80a3f9c <strncpy>
      p += 2;
      degreebuff[2] = '\0';
 80a05ea:	f04f 0a00 	mov.w	sl, #0
 80a05ee:	f10d 0910 	add.w	r9, sp, #16
      degree = atol(degreebuff) * 10000000;
 80a05f2:	a801      	add	r0, sp, #4
    p = strchr(p, ',')+1;
    if (',' != *p)
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
 80a05f4:	f809 ad0a 	strb.w	sl, [r9, #-10]!
      degree = atol(degreebuff) * 10000000;
 80a05f8:	f003 fc2f 	bl	80a3e5a <atol>
 80a05fc:	4b92      	ldr	r3, [pc, #584]	; (80a0848 <_ZN12Adafruit_GPS5parseEPc+0x334>)
      strncpy(degreebuff, p, 2); // minutes
 80a05fe:	1ce9      	adds	r1, r5, #3
    if (',' != *p)
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
      degree = atol(degreebuff) * 10000000;
 80a0600:	fb03 f800 	mul.w	r8, r3, r0
      strncpy(degreebuff, p, 2); // minutes
 80a0604:	2202      	movs	r2, #2
      p += 3; // skip decimal point
 80a0606:	1dae      	adds	r6, r5, #6
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
 80a0608:	a801      	add	r0, sp, #4
 80a060a:	f003 fcc7 	bl	80a3f9c <strncpy>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
 80a060e:	2204      	movs	r2, #4
 80a0610:	4631      	mov	r1, r6
 80a0612:	4648      	mov	r0, r9
 80a0614:	f003 fcc2 	bl	80a3f9c <strncpy>
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
 80a0618:	a801      	add	r0, sp, #4
      degreebuff[2] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
 80a061a:	f88d a00a 	strb.w	sl, [sp, #10]
      minutes = 50 * atol(degreebuff) / 3;
 80a061e:	f003 fc1c 	bl	80a3e5a <atol>
 80a0622:	2532      	movs	r5, #50	; 0x32
 80a0624:	4345      	muls	r5, r0
 80a0626:	2003      	movs	r0, #3
 80a0628:	fb95 f5f0 	sdiv	r5, r5, r0
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
 80a062c:	4887      	ldr	r0, [pc, #540]	; (80a084c <_ZN12Adafruit_GPS5parseEPc+0x338>)
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
 80a062e:	eb08 0305 	add.w	r3, r8, r5
 80a0632:	6123      	str	r3, [r4, #16]
      latitude = degree / 100000 + minutes * 0.000006F;
 80a0634:	fb98 f0f0 	sdiv	r0, r8, r0
 80a0638:	f003 f9a8 	bl	80a398c <__aeabi_i2f>
 80a063c:	4680      	mov	r8, r0
 80a063e:	4628      	mov	r0, r5
 80a0640:	f003 f9a4 	bl	80a398c <__aeabi_i2f>
 80a0644:	4982      	ldr	r1, [pc, #520]	; (80a0850 <_ZN12Adafruit_GPS5parseEPc+0x33c>)
 80a0646:	f003 f9f5 	bl	80a3a34 <__aeabi_fmul>
 80a064a:	4601      	mov	r1, r0
 80a064c:	4640      	mov	r0, r8
 80a064e:	f003 f8e9 	bl	80a3824 <__addsf3>
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
 80a0652:	4980      	ldr	r1, [pc, #512]	; (80a0854 <_ZN12Adafruit_GPS5parseEPc+0x340>)
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
 80a0654:	60a0      	str	r0, [r4, #8]
 80a0656:	4680      	mov	r8, r0
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
 80a0658:	f003 faa0 	bl	80a3b9c <__aeabi_fdiv>
 80a065c:	f003 fbb0 	bl	80a3dc0 <__aeabi_f2iz>
 80a0660:	4605      	mov	r5, r0
      latitudeDegrees += int(latitude/100);
 80a0662:	4378      	muls	r0, r7
 80a0664:	f003 f992 	bl	80a398c <__aeabi_i2f>
 80a0668:	4601      	mov	r1, r0
 80a066a:	4640      	mov	r0, r8
 80a066c:	f003 f8d8 	bl	80a3820 <__aeabi_fsub>
 80a0670:	4979      	ldr	r1, [pc, #484]	; (80a0858 <_ZN12Adafruit_GPS5parseEPc+0x344>)
 80a0672:	f003 fa93 	bl	80a3b9c <__aeabi_fdiv>
 80a0676:	4607      	mov	r7, r0
 80a0678:	4628      	mov	r0, r5
 80a067a:	f003 f987 	bl	80a398c <__aeabi_i2f>
 80a067e:	4601      	mov	r1, r0
 80a0680:	4638      	mov	r0, r7
 80a0682:	f003 f8cf 	bl	80a3824 <__addsf3>
 80a0686:	61a0      	str	r0, [r4, #24]
    }

    p = strchr(p, ',')+1;
 80a0688:	212c      	movs	r1, #44	; 0x2c
 80a068a:	4630      	mov	r0, r6
 80a068c:	f003 fc38 	bl	80a3f00 <strchr>
 80a0690:	4603      	mov	r3, r0
    if (',' != *p)
 80a0692:	785a      	ldrb	r2, [r3, #1]
      latitude = degree / 100000 + minutes * 0.000006F;
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
      latitudeDegrees += int(latitude/100);
    }

    p = strchr(p, ',')+1;
 80a0694:	3001      	adds	r0, #1
    if (',' != *p)
 80a0696:	2a2c      	cmp	r2, #44	; 0x2c
 80a0698:	d010      	beq.n	80a06bc <_ZN12Adafruit_GPS5parseEPc+0x1a8>
    {
      if (p[0] == 'S') latitudeDegrees *= -1.0;
 80a069a:	2a53      	cmp	r2, #83	; 0x53
 80a069c:	bf02      	ittt	eq
 80a069e:	69a2      	ldreq	r2, [r4, #24]
 80a06a0:	f102 4200 	addeq.w	r2, r2, #2147483648	; 0x80000000
 80a06a4:	61a2      	streq	r2, [r4, #24]
      if (p[0] == 'N') lat = 'N';
 80a06a6:	785b      	ldrb	r3, [r3, #1]
 80a06a8:	2b4e      	cmp	r3, #78	; 0x4e
 80a06aa:	d005      	beq.n	80a06b8 <_ZN12Adafruit_GPS5parseEPc+0x1a4>
      else if (p[0] == 'S') lat = 'S';
 80a06ac:	2b53      	cmp	r3, #83	; 0x53
 80a06ae:	d003      	beq.n	80a06b8 <_ZN12Adafruit_GPS5parseEPc+0x1a4>
      else if (p[0] == ',') lat = 0;
 80a06b0:	2b2c      	cmp	r3, #44	; 0x2c
 80a06b2:	f47f af52 	bne.w	80a055a <_ZN12Adafruit_GPS5parseEPc+0x46>
 80a06b6:	2300      	movs	r3, #0
 80a06b8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
 80a06bc:	212c      	movs	r1, #44	; 0x2c
 80a06be:	f003 fc1f 	bl	80a3f00 <strchr>
    if (',' != *p)
 80a06c2:	7843      	ldrb	r3, [r0, #1]
      else if (p[0] == ',') lat = 0;
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
 80a06c4:	4605      	mov	r5, r0
    if (',' != *p)
 80a06c6:	2b2c      	cmp	r3, #44	; 0x2c
      else if (p[0] == ',') lat = 0;
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
 80a06c8:	f100 0601 	add.w	r6, r0, #1
    if (',' != *p)
 80a06cc:	d051      	beq.n	80a0772 <_ZN12Adafruit_GPS5parseEPc+0x25e>
    {
      strncpy(degreebuff, p, 3);
 80a06ce:	4631      	mov	r1, r6
 80a06d0:	2203      	movs	r2, #3
 80a06d2:	a801      	add	r0, sp, #4
 80a06d4:	f003 fc62 	bl	80a3f9c <strncpy>
      p += 3;
      degreebuff[3] = '\0';
 80a06d8:	f04f 0800 	mov.w	r8, #0
      degree = atol(degreebuff) * 10000000;
 80a06dc:	a801      	add	r0, sp, #4
    p = strchr(p, ',')+1;
    if (',' != *p)
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
 80a06de:	f88d 8007 	strb.w	r8, [sp, #7]
      degree = atol(degreebuff) * 10000000;
 80a06e2:	f003 fbba 	bl	80a3e5a <atol>
 80a06e6:	4f58      	ldr	r7, [pc, #352]	; (80a0848 <_ZN12Adafruit_GPS5parseEPc+0x334>)
      strncpy(degreebuff, p, 2); // minutes
 80a06e8:	1d29      	adds	r1, r5, #4
    if (',' != *p)
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
 80a06ea:	4347      	muls	r7, r0
      strncpy(degreebuff, p, 2); // minutes
 80a06ec:	2202      	movs	r2, #2
      p += 3; // skip decimal point
 80a06ee:	1dee      	adds	r6, r5, #7
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
 80a06f0:	a801      	add	r0, sp, #4
 80a06f2:	f003 fc53 	bl	80a3f9c <strncpy>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
 80a06f6:	2204      	movs	r2, #4
 80a06f8:	4631      	mov	r1, r6
 80a06fa:	f10d 0006 	add.w	r0, sp, #6
 80a06fe:	f003 fc4d 	bl	80a3f9c <strncpy>
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
 80a0702:	a801      	add	r0, sp, #4
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
 80a0704:	f88d 800a 	strb.w	r8, [sp, #10]
      minutes = 50 * atol(degreebuff) / 3;
 80a0708:	f003 fba7 	bl	80a3e5a <atol>
 80a070c:	2532      	movs	r5, #50	; 0x32
 80a070e:	4345      	muls	r5, r0
 80a0710:	2003      	movs	r0, #3
 80a0712:	fb95 f5f0 	sdiv	r5, r5, r0
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
 80a0716:	484d      	ldr	r0, [pc, #308]	; (80a084c <_ZN12Adafruit_GPS5parseEPc+0x338>)
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
 80a0718:	197b      	adds	r3, r7, r5
 80a071a:	6163      	str	r3, [r4, #20]
      longitude = degree / 100000 + minutes * 0.000006F;
 80a071c:	fb97 f0f0 	sdiv	r0, r7, r0
 80a0720:	f003 f934 	bl	80a398c <__aeabi_i2f>
 80a0724:	4607      	mov	r7, r0
 80a0726:	4628      	mov	r0, r5
 80a0728:	f003 f930 	bl	80a398c <__aeabi_i2f>
 80a072c:	4948      	ldr	r1, [pc, #288]	; (80a0850 <_ZN12Adafruit_GPS5parseEPc+0x33c>)
 80a072e:	f003 f981 	bl	80a3a34 <__aeabi_fmul>
 80a0732:	4601      	mov	r1, r0
 80a0734:	4638      	mov	r0, r7
 80a0736:	f003 f875 	bl	80a3824 <__addsf3>
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
 80a073a:	4946      	ldr	r1, [pc, #280]	; (80a0854 <_ZN12Adafruit_GPS5parseEPc+0x340>)
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
 80a073c:	60e0      	str	r0, [r4, #12]
 80a073e:	4607      	mov	r7, r0
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
 80a0740:	f003 fa2c 	bl	80a3b9c <__aeabi_fdiv>
 80a0744:	f003 fb3c 	bl	80a3dc0 <__aeabi_f2iz>
 80a0748:	4605      	mov	r5, r0
      longitudeDegrees += int(longitude/100);
 80a074a:	2064      	movs	r0, #100	; 0x64
 80a074c:	4368      	muls	r0, r5
 80a074e:	f003 f91d 	bl	80a398c <__aeabi_i2f>
 80a0752:	4601      	mov	r1, r0
 80a0754:	4638      	mov	r0, r7
 80a0756:	f003 f863 	bl	80a3820 <__aeabi_fsub>
 80a075a:	493f      	ldr	r1, [pc, #252]	; (80a0858 <_ZN12Adafruit_GPS5parseEPc+0x344>)
 80a075c:	f003 fa1e 	bl	80a3b9c <__aeabi_fdiv>
 80a0760:	4607      	mov	r7, r0
 80a0762:	4628      	mov	r0, r5
 80a0764:	f003 f912 	bl	80a398c <__aeabi_i2f>
 80a0768:	4601      	mov	r1, r0
 80a076a:	4638      	mov	r0, r7
 80a076c:	f003 f85a 	bl	80a3824 <__addsf3>
 80a0770:	61e0      	str	r0, [r4, #28]
    }

    p = strchr(p, ',')+1;
 80a0772:	212c      	movs	r1, #44	; 0x2c
 80a0774:	4630      	mov	r0, r6
 80a0776:	f003 fbc3 	bl	80a3f00 <strchr>
 80a077a:	4603      	mov	r3, r0
    if (',' != *p)
 80a077c:	785a      	ldrb	r2, [r3, #1]
      longitude = degree / 100000 + minutes * 0.000006F;
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
      longitudeDegrees += int(longitude/100);
    }

    p = strchr(p, ',')+1;
 80a077e:	3001      	adds	r0, #1
    if (',' != *p)
 80a0780:	2a2c      	cmp	r2, #44	; 0x2c
 80a0782:	d010      	beq.n	80a07a6 <_ZN12Adafruit_GPS5parseEPc+0x292>
    {
      if (p[0] == 'W') longitudeDegrees *= -1.0;
 80a0784:	2a57      	cmp	r2, #87	; 0x57
 80a0786:	bf02      	ittt	eq
 80a0788:	69e2      	ldreq	r2, [r4, #28]
 80a078a:	f102 4200 	addeq.w	r2, r2, #2147483648	; 0x80000000
 80a078e:	61e2      	streq	r2, [r4, #28]
      if (p[0] == 'W') lon = 'W';
 80a0790:	785b      	ldrb	r3, [r3, #1]
 80a0792:	2b57      	cmp	r3, #87	; 0x57
 80a0794:	d005      	beq.n	80a07a2 <_ZN12Adafruit_GPS5parseEPc+0x28e>
      else if (p[0] == 'E') lon = 'E';
 80a0796:	2b45      	cmp	r3, #69	; 0x45
 80a0798:	d003      	beq.n	80a07a2 <_ZN12Adafruit_GPS5parseEPc+0x28e>
      else if (p[0] == ',') lon = 0;
 80a079a:	2b2c      	cmp	r3, #44	; 0x2c
 80a079c:	f47f aedd 	bne.w	80a055a <_ZN12Adafruit_GPS5parseEPc+0x46>
 80a07a0:	2300      	movs	r3, #0
 80a07a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      else return false;
    }

    p = strchr(p, ',')+1;
 80a07a6:	212c      	movs	r1, #44	; 0x2c
 80a07a8:	f003 fbaa 	bl	80a3f00 <strchr>
    if (',' != *p)
 80a07ac:	7843      	ldrb	r3, [r0, #1]
      else if (p[0] == 'E') lon = 'E';
      else if (p[0] == ',') lon = 0;
      else return false;
    }

    p = strchr(p, ',')+1;
 80a07ae:	1c45      	adds	r5, r0, #1
    if (',' != *p)
 80a07b0:	2b2c      	cmp	r3, #44	; 0x2c
 80a07b2:	d004      	beq.n	80a07be <_ZN12Adafruit_GPS5parseEPc+0x2aa>
    {
      fixquality = atoi(p);
 80a07b4:	4628      	mov	r0, r5
 80a07b6:	f003 fb4c 	bl	80a3e52 <atoi>
 80a07ba:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    }

    p = strchr(p, ',')+1;
 80a07be:	4628      	mov	r0, r5
 80a07c0:	212c      	movs	r1, #44	; 0x2c
 80a07c2:	f003 fb9d 	bl	80a3f00 <strchr>
    if (',' != *p)
 80a07c6:	7843      	ldrb	r3, [r0, #1]
    if (',' != *p)
    {
      fixquality = atoi(p);
    }

    p = strchr(p, ',')+1;
 80a07c8:	1c45      	adds	r5, r0, #1
    if (',' != *p)
 80a07ca:	2b2c      	cmp	r3, #44	; 0x2c
 80a07cc:	d004      	beq.n	80a07d8 <_ZN12Adafruit_GPS5parseEPc+0x2c4>
    {
      satellites = atoi(p);
 80a07ce:	4628      	mov	r0, r5
 80a07d0:	f003 fb3f 	bl	80a3e52 <atoi>
 80a07d4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    }

    p = strchr(p, ',')+1;
 80a07d8:	4628      	mov	r0, r5
 80a07da:	212c      	movs	r1, #44	; 0x2c
 80a07dc:	f003 fb90 	bl	80a3f00 <strchr>
    if (',' != *p)
 80a07e0:	7843      	ldrb	r3, [r0, #1]
    if (',' != *p)
    {
      satellites = atoi(p);
    }

    p = strchr(p, ',')+1;
 80a07e2:	1c45      	adds	r5, r0, #1
    if (',' != *p)
 80a07e4:	2b2c      	cmp	r3, #44	; 0x2c
 80a07e6:	d005      	beq.n	80a07f4 <_ZN12Adafruit_GPS5parseEPc+0x2e0>
    {
      HDOP = atof(p);
 80a07e8:	4628      	mov	r0, r5
 80a07ea:	f003 fb2f 	bl	80a3e4c <atof>
 80a07ee:	f002 ffc3 	bl	80a3778 <__aeabi_d2f>
 80a07f2:	6360      	str	r0, [r4, #52]	; 0x34
    }

    p = strchr(p, ',')+1;
 80a07f4:	4628      	mov	r0, r5
 80a07f6:	212c      	movs	r1, #44	; 0x2c
 80a07f8:	f003 fb82 	bl	80a3f00 <strchr>
    if (',' != *p)
 80a07fc:	7843      	ldrb	r3, [r0, #1]
    if (',' != *p)
    {
      HDOP = atof(p);
    }

    p = strchr(p, ',')+1;
 80a07fe:	1c45      	adds	r5, r0, #1
    if (',' != *p)
 80a0800:	2b2c      	cmp	r3, #44	; 0x2c
 80a0802:	d005      	beq.n	80a0810 <_ZN12Adafruit_GPS5parseEPc+0x2fc>
    {
      altitude = atof(p);
 80a0804:	4628      	mov	r0, r5
 80a0806:	f003 fb21 	bl	80a3e4c <atof>
 80a080a:	f002 ffb5 	bl	80a3778 <__aeabi_d2f>
 80a080e:	6260      	str	r0, [r4, #36]	; 0x24
    }

    p = strchr(p, ',')+1;
 80a0810:	212c      	movs	r1, #44	; 0x2c
 80a0812:	4628      	mov	r0, r5
 80a0814:	f003 fb74 	bl	80a3f00 <strchr>
    p = strchr(p, ',')+1;
 80a0818:	212c      	movs	r1, #44	; 0x2c
 80a081a:	3001      	adds	r0, #1
 80a081c:	f003 fb70 	bl	80a3f00 <strchr>
    if (',' != *p)
 80a0820:	7843      	ldrb	r3, [r0, #1]
 80a0822:	2b2c      	cmp	r3, #44	; 0x2c
 80a0824:	f000 8183 	beq.w	80a0b2e <_ZN12Adafruit_GPS5parseEPc+0x61a>
    {
      geoidheight = atof(p);
 80a0828:	3001      	adds	r0, #1
 80a082a:	f003 fb0f 	bl	80a3e4c <atof>
 80a082e:	f002 ffa3 	bl	80a3778 <__aeabi_d2f>
 80a0832:	6220      	str	r0, [r4, #32]
 80a0834:	e17b      	b.n	80a0b2e <_ZN12Adafruit_GPS5parseEPc+0x61a>
 80a0836:	bf00      	nop
 80a0838:	080a5c6f 	.word	0x080a5c6f
 80a083c:	080a5c76 	.word	0x080a5c76
 80a0840:	3ff00000 	.word	0x3ff00000
 80a0844:	408f4000 	.word	0x408f4000
 80a0848:	00989680 	.word	0x00989680
 80a084c:	000186a0 	.word	0x000186a0
 80a0850:	36c9539c 	.word	0x36c9539c
 80a0854:	42c80000 	.word	0x42c80000
 80a0858:	42700000 	.word	0x42700000
    }
    return true;
  }
  if ((strstr(nmea, "$GPRMC")) || (strstr(nmea, "$GNRMC"))) {
 80a085c:	49b6      	ldr	r1, [pc, #728]	; (80a0b38 <_ZN12Adafruit_GPS5parseEPc+0x624>)
 80a085e:	4628      	mov	r0, r5
 80a0860:	f003 fbaf 	bl	80a3fc2 <strstr>
 80a0864:	b930      	cbnz	r0, 80a0874 <_ZN12Adafruit_GPS5parseEPc+0x360>
 80a0866:	49b5      	ldr	r1, [pc, #724]	; (80a0b3c <_ZN12Adafruit_GPS5parseEPc+0x628>)
 80a0868:	4628      	mov	r0, r5
 80a086a:	f003 fbaa 	bl	80a3fc2 <strstr>
 80a086e:	2800      	cmp	r0, #0
 80a0870:	f43f ae73 	beq.w	80a055a <_ZN12Adafruit_GPS5parseEPc+0x46>
   // found RMC
    char *p = nmea;

    // get time
    p = strchr(p, ',')+1;
 80a0874:	212c      	movs	r1, #44	; 0x2c
 80a0876:	4628      	mov	r0, r5
 80a0878:	f003 fb42 	bl	80a3f00 <strchr>
 80a087c:	1c45      	adds	r5, r0, #1
    float timef = atof(p);
 80a087e:	4628      	mov	r0, r5
 80a0880:	f003 fae4 	bl	80a3e4c <atof>
 80a0884:	f002 ff78 	bl	80a3778 <__aeabi_d2f>
 80a0888:	4606      	mov	r6, r0
    uint32_t time = timef;
 80a088a:	f003 fabf 	bl	80a3e0c <__aeabi_f2uiz>
    hour = time / 10000;
 80a088e:	f242 7210 	movw	r2, #10000	; 0x2710
 80a0892:	fbb0 f3f2 	udiv	r3, r0, r2
 80a0896:	7023      	strb	r3, [r4, #0]
    minute = (time % 10000) / 100;
 80a0898:	fb02 0313 	mls	r3, r2, r3, r0
 80a089c:	2264      	movs	r2, #100	; 0x64
 80a089e:	fbb3 f3f2 	udiv	r3, r3, r2
 80a08a2:	7063      	strb	r3, [r4, #1]
    seconds = (time % 100);
 80a08a4:	fbb0 f3f2 	udiv	r3, r0, r2
 80a08a8:	fb02 0013 	mls	r0, r2, r3, r0
 80a08ac:	70a0      	strb	r0, [r4, #2]

    milliseconds = fmod(timef, 1.0) * 1000;
 80a08ae:	4630      	mov	r0, r6
 80a08b0:	f002 fc16 	bl	80a30e0 <__aeabi_f2d>
 80a08b4:	2200      	movs	r2, #0
 80a08b6:	4ba2      	ldr	r3, [pc, #648]	; (80a0b40 <_ZN12Adafruit_GPS5parseEPc+0x62c>)
 80a08b8:	f002 f92c 	bl	80a2b14 <fmod>
 80a08bc:	4ba1      	ldr	r3, [pc, #644]	; (80a0b44 <_ZN12Adafruit_GPS5parseEPc+0x630>)
 80a08be:	2200      	movs	r2, #0
 80a08c0:	f002 fc62 	bl	80a3188 <__aeabi_dmul>
 80a08c4:	f002 ff38 	bl	80a3738 <__aeabi_d2uiz>

    p = strchr(p, ',')+1;
 80a08c8:	212c      	movs	r1, #44	; 0x2c
    uint32_t time = timef;
    hour = time / 10000;
    minute = (time % 10000) / 100;
    seconds = (time % 100);

    milliseconds = fmod(timef, 1.0) * 1000;
 80a08ca:	80e0      	strh	r0, [r4, #6]

    p = strchr(p, ',')+1;
 80a08cc:	4628      	mov	r0, r5
 80a08ce:	f003 fb17 	bl	80a3f00 <strchr>
    // Serial.println(p);
    if (p[0] == 'A')
 80a08d2:	7843      	ldrb	r3, [r0, #1]
 80a08d4:	2b41      	cmp	r3, #65	; 0x41
 80a08d6:	d101      	bne.n	80a08dc <_ZN12Adafruit_GPS5parseEPc+0x3c8>
      fix = true;
 80a08d8:	2301      	movs	r3, #1
 80a08da:	e003      	b.n	80a08e4 <_ZN12Adafruit_GPS5parseEPc+0x3d0>
    else if (p[0] == 'V')
 80a08dc:	2b56      	cmp	r3, #86	; 0x56
 80a08de:	f47f ae3c 	bne.w	80a055a <_ZN12Adafruit_GPS5parseEPc+0x46>
      fix = false;
 80a08e2:	2300      	movs	r3, #0
 80a08e4:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
    else
      return false;

    // parse out latitude
    p = strchr(p, ',')+1;
 80a08e8:	212c      	movs	r1, #44	; 0x2c
 80a08ea:	3001      	adds	r0, #1
 80a08ec:	f003 fb08 	bl	80a3f00 <strchr>
    if (',' != *p)
 80a08f0:	7843      	ldrb	r3, [r0, #1]
      fix = false;
    else
      return false;

    // parse out latitude
    p = strchr(p, ',')+1;
 80a08f2:	4605      	mov	r5, r0
    if (',' != *p)
 80a08f4:	2b2c      	cmp	r3, #44	; 0x2c
      fix = false;
    else
      return false;

    // parse out latitude
    p = strchr(p, ',')+1;
 80a08f6:	f100 0601 	add.w	r6, r0, #1
    if (',' != *p)
 80a08fa:	d052      	beq.n	80a09a2 <_ZN12Adafruit_GPS5parseEPc+0x48e>
    {
      strncpy(degreebuff, p, 2);
 80a08fc:	4631      	mov	r1, r6
 80a08fe:	2202      	movs	r2, #2
 80a0900:	a801      	add	r0, sp, #4
 80a0902:	f003 fb4b 	bl	80a3f9c <strncpy>
      p += 2;
      degreebuff[2] = '\0';
 80a0906:	f04f 0900 	mov.w	r9, #0
 80a090a:	f10d 0810 	add.w	r8, sp, #16
      long degree = atol(degreebuff) * 10000000;
 80a090e:	a801      	add	r0, sp, #4
    p = strchr(p, ',')+1;
    if (',' != *p)
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
 80a0910:	f808 9d0a 	strb.w	r9, [r8, #-10]!
      long degree = atol(degreebuff) * 10000000;
 80a0914:	f003 faa1 	bl	80a3e5a <atol>
 80a0918:	4f8b      	ldr	r7, [pc, #556]	; (80a0b48 <_ZN12Adafruit_GPS5parseEPc+0x634>)
      strncpy(degreebuff, p, 2); // minutes
 80a091a:	1ce9      	adds	r1, r5, #3
    if (',' != *p)
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
      long degree = atol(degreebuff) * 10000000;
 80a091c:	4347      	muls	r7, r0
      strncpy(degreebuff, p, 2); // minutes
 80a091e:	2202      	movs	r2, #2
      p += 3; // skip decimal point
 80a0920:	1dae      	adds	r6, r5, #6
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
      long degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
 80a0922:	a801      	add	r0, sp, #4
 80a0924:	f003 fb3a 	bl	80a3f9c <strncpy>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
 80a0928:	2204      	movs	r2, #4
 80a092a:	4631      	mov	r1, r6
 80a092c:	4640      	mov	r0, r8
 80a092e:	f003 fb35 	bl	80a3f9c <strncpy>
      degreebuff[6] = '\0';
      long minutes = 50 * atol(degreebuff) / 3;
 80a0932:	a801      	add	r0, sp, #4
      degreebuff[2] = '\0';
      long degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
 80a0934:	f88d 900a 	strb.w	r9, [sp, #10]
      long minutes = 50 * atol(degreebuff) / 3;
 80a0938:	f003 fa8f 	bl	80a3e5a <atol>
 80a093c:	2532      	movs	r5, #50	; 0x32
 80a093e:	4345      	muls	r5, r0
 80a0940:	2003      	movs	r0, #3
 80a0942:	fb95 f5f0 	sdiv	r5, r5, r0
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
 80a0946:	4881      	ldr	r0, [pc, #516]	; (80a0b4c <_ZN12Adafruit_GPS5parseEPc+0x638>)
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      long minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
 80a0948:	197b      	adds	r3, r7, r5
 80a094a:	6123      	str	r3, [r4, #16]
      latitude = degree / 100000 + minutes * 0.000006F;
 80a094c:	fb97 f0f0 	sdiv	r0, r7, r0
 80a0950:	f003 f81c 	bl	80a398c <__aeabi_i2f>
 80a0954:	4607      	mov	r7, r0
 80a0956:	4628      	mov	r0, r5
 80a0958:	f003 f818 	bl	80a398c <__aeabi_i2f>
 80a095c:	497c      	ldr	r1, [pc, #496]	; (80a0b50 <_ZN12Adafruit_GPS5parseEPc+0x63c>)
 80a095e:	f003 f869 	bl	80a3a34 <__aeabi_fmul>
 80a0962:	4601      	mov	r1, r0
 80a0964:	4638      	mov	r0, r7
 80a0966:	f002 ff5d 	bl	80a3824 <__addsf3>
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
 80a096a:	497a      	ldr	r1, [pc, #488]	; (80a0b54 <_ZN12Adafruit_GPS5parseEPc+0x640>)
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      long minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
 80a096c:	60a0      	str	r0, [r4, #8]
 80a096e:	4607      	mov	r7, r0
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
 80a0970:	f003 f914 	bl	80a3b9c <__aeabi_fdiv>
 80a0974:	f003 fa24 	bl	80a3dc0 <__aeabi_f2iz>
 80a0978:	4605      	mov	r5, r0
      latitudeDegrees += int(latitude/100);
 80a097a:	2064      	movs	r0, #100	; 0x64
 80a097c:	4368      	muls	r0, r5
 80a097e:	f003 f805 	bl	80a398c <__aeabi_i2f>
 80a0982:	4601      	mov	r1, r0
 80a0984:	4638      	mov	r0, r7
 80a0986:	f002 ff4b 	bl	80a3820 <__aeabi_fsub>
 80a098a:	4973      	ldr	r1, [pc, #460]	; (80a0b58 <_ZN12Adafruit_GPS5parseEPc+0x644>)
 80a098c:	f003 f906 	bl	80a3b9c <__aeabi_fdiv>
 80a0990:	4607      	mov	r7, r0
 80a0992:	4628      	mov	r0, r5
 80a0994:	f002 fffa 	bl	80a398c <__aeabi_i2f>
 80a0998:	4601      	mov	r1, r0
 80a099a:	4638      	mov	r0, r7
 80a099c:	f002 ff42 	bl	80a3824 <__addsf3>
 80a09a0:	61a0      	str	r0, [r4, #24]
    }

    p = strchr(p, ',')+1;
 80a09a2:	212c      	movs	r1, #44	; 0x2c
 80a09a4:	4630      	mov	r0, r6
 80a09a6:	f003 faab 	bl	80a3f00 <strchr>
 80a09aa:	4603      	mov	r3, r0
    if (',' != *p)
 80a09ac:	785a      	ldrb	r2, [r3, #1]
      latitude = degree / 100000 + minutes * 0.000006F;
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
      latitudeDegrees += int(latitude/100);
    }

    p = strchr(p, ',')+1;
 80a09ae:	3001      	adds	r0, #1
    if (',' != *p)
 80a09b0:	2a2c      	cmp	r2, #44	; 0x2c
 80a09b2:	d010      	beq.n	80a09d6 <_ZN12Adafruit_GPS5parseEPc+0x4c2>
    {
      if (p[0] == 'S') latitudeDegrees *= -1.0;
 80a09b4:	2a53      	cmp	r2, #83	; 0x53
 80a09b6:	bf02      	ittt	eq
 80a09b8:	69a2      	ldreq	r2, [r4, #24]
 80a09ba:	f102 4200 	addeq.w	r2, r2, #2147483648	; 0x80000000
 80a09be:	61a2      	streq	r2, [r4, #24]
      if (p[0] == 'N') lat = 'N';
 80a09c0:	785b      	ldrb	r3, [r3, #1]
 80a09c2:	2b4e      	cmp	r3, #78	; 0x4e
 80a09c4:	d005      	beq.n	80a09d2 <_ZN12Adafruit_GPS5parseEPc+0x4be>
      else if (p[0] == 'S') lat = 'S';
 80a09c6:	2b53      	cmp	r3, #83	; 0x53
 80a09c8:	d003      	beq.n	80a09d2 <_ZN12Adafruit_GPS5parseEPc+0x4be>
      else if (p[0] == ',') lat = 0;
 80a09ca:	2b2c      	cmp	r3, #44	; 0x2c
 80a09cc:	f47f adc5 	bne.w	80a055a <_ZN12Adafruit_GPS5parseEPc+0x46>
 80a09d0:	2300      	movs	r3, #0
 80a09d2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
 80a09d6:	212c      	movs	r1, #44	; 0x2c
 80a09d8:	f003 fa92 	bl	80a3f00 <strchr>
    if (',' != *p)
 80a09dc:	7843      	ldrb	r3, [r0, #1]
      else if (p[0] == ',') lat = 0;
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
 80a09de:	4605      	mov	r5, r0
    if (',' != *p)
 80a09e0:	2b2c      	cmp	r3, #44	; 0x2c
      else if (p[0] == ',') lat = 0;
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
 80a09e2:	f100 0601 	add.w	r6, r0, #1
    if (',' != *p)
 80a09e6:	d051      	beq.n	80a0a8c <_ZN12Adafruit_GPS5parseEPc+0x578>
    {
      strncpy(degreebuff, p, 3);
 80a09e8:	4631      	mov	r1, r6
 80a09ea:	2203      	movs	r2, #3
 80a09ec:	a801      	add	r0, sp, #4
 80a09ee:	f003 fad5 	bl	80a3f9c <strncpy>
      p += 3;
      degreebuff[3] = '\0';
 80a09f2:	f04f 0800 	mov.w	r8, #0
      degree = atol(degreebuff) * 10000000;
 80a09f6:	a801      	add	r0, sp, #4
    p = strchr(p, ',')+1;
    if (',' != *p)
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
 80a09f8:	f88d 8007 	strb.w	r8, [sp, #7]
      degree = atol(degreebuff) * 10000000;
 80a09fc:	f003 fa2d 	bl	80a3e5a <atol>
 80a0a00:	4f51      	ldr	r7, [pc, #324]	; (80a0b48 <_ZN12Adafruit_GPS5parseEPc+0x634>)
      strncpy(degreebuff, p, 2); // minutes
 80a0a02:	1d29      	adds	r1, r5, #4
    if (',' != *p)
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
 80a0a04:	4347      	muls	r7, r0
      strncpy(degreebuff, p, 2); // minutes
 80a0a06:	2202      	movs	r2, #2
      p += 3; // skip decimal point
 80a0a08:	1dee      	adds	r6, r5, #7
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
 80a0a0a:	a801      	add	r0, sp, #4
 80a0a0c:	f003 fac6 	bl	80a3f9c <strncpy>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
 80a0a10:	2204      	movs	r2, #4
 80a0a12:	4631      	mov	r1, r6
 80a0a14:	f10d 0006 	add.w	r0, sp, #6
 80a0a18:	f003 fac0 	bl	80a3f9c <strncpy>
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
 80a0a1c:	a801      	add	r0, sp, #4
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
 80a0a1e:	f88d 800a 	strb.w	r8, [sp, #10]
      minutes = 50 * atol(degreebuff) / 3;
 80a0a22:	f003 fa1a 	bl	80a3e5a <atol>
 80a0a26:	2532      	movs	r5, #50	; 0x32
 80a0a28:	4345      	muls	r5, r0
 80a0a2a:	2003      	movs	r0, #3
 80a0a2c:	fb95 f5f0 	sdiv	r5, r5, r0
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
 80a0a30:	4846      	ldr	r0, [pc, #280]	; (80a0b4c <_ZN12Adafruit_GPS5parseEPc+0x638>)
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
 80a0a32:	197b      	adds	r3, r7, r5
 80a0a34:	6163      	str	r3, [r4, #20]
      longitude = degree / 100000 + minutes * 0.000006F;
 80a0a36:	fb97 f0f0 	sdiv	r0, r7, r0
 80a0a3a:	f002 ffa7 	bl	80a398c <__aeabi_i2f>
 80a0a3e:	4607      	mov	r7, r0
 80a0a40:	4628      	mov	r0, r5
 80a0a42:	f002 ffa3 	bl	80a398c <__aeabi_i2f>
 80a0a46:	4942      	ldr	r1, [pc, #264]	; (80a0b50 <_ZN12Adafruit_GPS5parseEPc+0x63c>)
 80a0a48:	f002 fff4 	bl	80a3a34 <__aeabi_fmul>
 80a0a4c:	4601      	mov	r1, r0
 80a0a4e:	4638      	mov	r0, r7
 80a0a50:	f002 fee8 	bl	80a3824 <__addsf3>
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
 80a0a54:	493f      	ldr	r1, [pc, #252]	; (80a0b54 <_ZN12Adafruit_GPS5parseEPc+0x640>)
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
 80a0a56:	60e0      	str	r0, [r4, #12]
 80a0a58:	4607      	mov	r7, r0
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
 80a0a5a:	f003 f89f 	bl	80a3b9c <__aeabi_fdiv>
 80a0a5e:	f003 f9af 	bl	80a3dc0 <__aeabi_f2iz>
 80a0a62:	4605      	mov	r5, r0
      longitudeDegrees += int(longitude/100);
 80a0a64:	2064      	movs	r0, #100	; 0x64
 80a0a66:	4368      	muls	r0, r5
 80a0a68:	f002 ff90 	bl	80a398c <__aeabi_i2f>
 80a0a6c:	4601      	mov	r1, r0
 80a0a6e:	4638      	mov	r0, r7
 80a0a70:	f002 fed6 	bl	80a3820 <__aeabi_fsub>
 80a0a74:	4938      	ldr	r1, [pc, #224]	; (80a0b58 <_ZN12Adafruit_GPS5parseEPc+0x644>)
 80a0a76:	f003 f891 	bl	80a3b9c <__aeabi_fdiv>
 80a0a7a:	4607      	mov	r7, r0
 80a0a7c:	4628      	mov	r0, r5
 80a0a7e:	f002 ff85 	bl	80a398c <__aeabi_i2f>
 80a0a82:	4601      	mov	r1, r0
 80a0a84:	4638      	mov	r0, r7
 80a0a86:	f002 fecd 	bl	80a3824 <__addsf3>
 80a0a8a:	61e0      	str	r0, [r4, #28]
    }

    p = strchr(p, ',')+1;
 80a0a8c:	212c      	movs	r1, #44	; 0x2c
 80a0a8e:	4630      	mov	r0, r6
 80a0a90:	f003 fa36 	bl	80a3f00 <strchr>
 80a0a94:	4603      	mov	r3, r0
    if (',' != *p)
 80a0a96:	785a      	ldrb	r2, [r3, #1]
      longitude = degree / 100000 + minutes * 0.000006F;
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
      longitudeDegrees += int(longitude/100);
    }

    p = strchr(p, ',')+1;
 80a0a98:	3001      	adds	r0, #1
    if (',' != *p)
 80a0a9a:	2a2c      	cmp	r2, #44	; 0x2c
 80a0a9c:	d010      	beq.n	80a0ac0 <_ZN12Adafruit_GPS5parseEPc+0x5ac>
    {
      if (p[0] == 'W') longitudeDegrees *= -1.0;
 80a0a9e:	2a57      	cmp	r2, #87	; 0x57
 80a0aa0:	bf02      	ittt	eq
 80a0aa2:	69e2      	ldreq	r2, [r4, #28]
 80a0aa4:	f102 4200 	addeq.w	r2, r2, #2147483648	; 0x80000000
 80a0aa8:	61e2      	streq	r2, [r4, #28]
      if (p[0] == 'W') lon = 'W';
 80a0aaa:	785b      	ldrb	r3, [r3, #1]
 80a0aac:	2b57      	cmp	r3, #87	; 0x57
 80a0aae:	d005      	beq.n	80a0abc <_ZN12Adafruit_GPS5parseEPc+0x5a8>
      else if (p[0] == 'E') lon = 'E';
 80a0ab0:	2b45      	cmp	r3, #69	; 0x45
 80a0ab2:	d003      	beq.n	80a0abc <_ZN12Adafruit_GPS5parseEPc+0x5a8>
      else if (p[0] == ',') lon = 0;
 80a0ab4:	2b2c      	cmp	r3, #44	; 0x2c
 80a0ab6:	f47f ad50 	bne.w	80a055a <_ZN12Adafruit_GPS5parseEPc+0x46>
 80a0aba:	2300      	movs	r3, #0
 80a0abc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      else return false;
    }
    // speed
    p = strchr(p, ',')+1;
 80a0ac0:	212c      	movs	r1, #44	; 0x2c
 80a0ac2:	f003 fa1d 	bl	80a3f00 <strchr>
    if (',' != *p)
 80a0ac6:	7843      	ldrb	r3, [r0, #1]
      else if (p[0] == 'E') lon = 'E';
      else if (p[0] == ',') lon = 0;
      else return false;
    }
    // speed
    p = strchr(p, ',')+1;
 80a0ac8:	1c45      	adds	r5, r0, #1
    if (',' != *p)
 80a0aca:	2b2c      	cmp	r3, #44	; 0x2c
 80a0acc:	d005      	beq.n	80a0ada <_ZN12Adafruit_GPS5parseEPc+0x5c6>
    {
      speed = atof(p);
 80a0ace:	4628      	mov	r0, r5
 80a0ad0:	f003 f9bc 	bl	80a3e4c <atof>
 80a0ad4:	f002 fe50 	bl	80a3778 <__aeabi_d2f>
 80a0ad8:	62a0      	str	r0, [r4, #40]	; 0x28
    }

    // angle
    p = strchr(p, ',')+1;
 80a0ada:	4628      	mov	r0, r5
 80a0adc:	212c      	movs	r1, #44	; 0x2c
 80a0ade:	f003 fa0f 	bl	80a3f00 <strchr>
    if (',' != *p)
 80a0ae2:	7843      	ldrb	r3, [r0, #1]
    {
      speed = atof(p);
    }

    // angle
    p = strchr(p, ',')+1;
 80a0ae4:	1c45      	adds	r5, r0, #1
    if (',' != *p)
 80a0ae6:	2b2c      	cmp	r3, #44	; 0x2c
 80a0ae8:	d005      	beq.n	80a0af6 <_ZN12Adafruit_GPS5parseEPc+0x5e2>
    {
      angle = atof(p);
 80a0aea:	4628      	mov	r0, r5
 80a0aec:	f003 f9ae 	bl	80a3e4c <atof>
 80a0af0:	f002 fe42 	bl	80a3778 <__aeabi_d2f>
 80a0af4:	62e0      	str	r0, [r4, #44]	; 0x2c
    }

    p = strchr(p, ',')+1;
 80a0af6:	212c      	movs	r1, #44	; 0x2c
 80a0af8:	4628      	mov	r0, r5
 80a0afa:	f003 fa01 	bl	80a3f00 <strchr>
    if (',' != *p)
 80a0afe:	7843      	ldrb	r3, [r0, #1]
 80a0b00:	2b2c      	cmp	r3, #44	; 0x2c
 80a0b02:	d014      	beq.n	80a0b2e <_ZN12Adafruit_GPS5parseEPc+0x61a>
    {
      uint32_t fulldate = atof(p);
 80a0b04:	3001      	adds	r0, #1
 80a0b06:	f003 f9a1 	bl	80a3e4c <atof>
 80a0b0a:	f002 fe15 	bl	80a3738 <__aeabi_d2uiz>
      day = fulldate / 10000;
 80a0b0e:	f242 7210 	movw	r2, #10000	; 0x2710
 80a0b12:	fbb0 f3f2 	udiv	r3, r0, r2
 80a0b16:	7163      	strb	r3, [r4, #5]
      month = (fulldate % 10000) / 100;
 80a0b18:	fb02 0313 	mls	r3, r2, r3, r0
 80a0b1c:	2264      	movs	r2, #100	; 0x64
 80a0b1e:	fbb3 f3f2 	udiv	r3, r3, r2
 80a0b22:	7123      	strb	r3, [r4, #4]
      year = (fulldate % 100);
 80a0b24:	fbb0 f3f2 	udiv	r3, r0, r2
 80a0b28:	fb02 0013 	mls	r0, r2, r3, r0
 80a0b2c:	70e0      	strb	r0, [r4, #3]
    }
    // we dont parse the remaining, yet!
    return true;
 80a0b2e:	2001      	movs	r0, #1
  }

  return false;
}
 80a0b30:	b004      	add	sp, #16
 80a0b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0b36:	bf00      	nop
 80a0b38:	080a5c7d 	.word	0x080a5c7d
 80a0b3c:	080a5c84 	.word	0x080a5c84
 80a0b40:	3ff00000 	.word	0x3ff00000
 80a0b44:	408f4000 	.word	0x408f4000
 80a0b48:	00989680 	.word	0x00989680
 80a0b4c:	000186a0 	.word	0x000186a0
 80a0b50:	36c9539c 	.word	0x36c9539c
 80a0b54:	42c80000 	.word	0x42c80000
 80a0b58:	42700000 	.word	0x42700000

080a0b5c <_GLOBAL__sub_I_line1>:
 80a0b5c:	f000 bb58 	b.w	80a1210 <HAL_Pin_Map>

080a0b60 <_ZN17Adafruit_VEML60705beginE24veml6070_integrationtime>:
  BSD license, all text above must be included in any redistribution
 ****************************************************/
#include "application.h"
#include "Adafruit_VEML6070.h"

void Adafruit_VEML6070::begin(veml6070_integrationtime_t itime) {
 80a0b60:	b510      	push	{r4, lr}
 80a0b62:	460c      	mov	r4, r1
  Wire.begin();
 80a0b64:	f001 fe64 	bl	80a2830 <_Z19__fetch_global_Wirev>
 80a0b68:	f001 fce0 	bl	80a252c <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(VEML6070_ADDR_L);
 80a0b6c:	f001 fe60 	bl	80a2830 <_Z19__fetch_global_Wirev>
 80a0b70:	2138      	movs	r1, #56	; 0x38
 80a0b72:	f001 fcf3 	bl	80a255c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((itime << 2) | 0x02);
 80a0b76:	f001 fe5b 	bl	80a2830 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a0b7a:	00a1      	lsls	r1, r4, #2
 80a0b7c:	6803      	ldr	r3, [r0, #0]
 80a0b7e:	f041 0102 	orr.w	r1, r1, #2
 80a0b82:	689b      	ldr	r3, [r3, #8]
 80a0b84:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80a0b88:	4798      	blx	r3
  Wire.endTransmission();
 80a0b8a:	f001 fe51 	bl	80a2830 <_Z19__fetch_global_Wirev>
 80a0b8e:	f001 fcec 	bl	80a256a <_ZN7TwoWire15endTransmissionEv>
  delay(500);
}
 80a0b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Adafruit_VEML6070::begin(veml6070_integrationtime_t itime) {
  Wire.begin();
  Wire.beginTransmission(VEML6070_ADDR_L);
  Wire.write((itime << 2) | 0x02);
  Wire.endTransmission();
  delay(500);
 80a0b96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0b9a:	f000 bf27 	b.w	80a19ec <delay>

080a0b9e <_ZN17Adafruit_VEML60706readUVEv>:
}

uint16_t Adafruit_VEML6070::readUV() {
 80a0b9e:	b538      	push	{r3, r4, r5, lr}
  if (Wire.requestFrom(VEML6070_ADDR_H, 1) != 1) return -1;
 80a0ba0:	f001 fe46 	bl	80a2830 <_Z19__fetch_global_Wirev>
 80a0ba4:	2201      	movs	r2, #1
 80a0ba6:	2139      	movs	r1, #57	; 0x39
 80a0ba8:	f001 fccf 	bl	80a254a <_ZN7TwoWire11requestFromEii>
 80a0bac:	2801      	cmp	r0, #1
 80a0bae:	4605      	mov	r5, r0
 80a0bb0:	d002      	beq.n	80a0bb8 <_ZN17Adafruit_VEML60706readUVEv+0x1a>
 80a0bb2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80a0bb6:	bd38      	pop	{r3, r4, r5, pc}
  uint16_t uvi = Wire.read();
 80a0bb8:	f001 fe3a 	bl	80a2830 <_Z19__fetch_global_Wirev>
 80a0bbc:	6803      	ldr	r3, [r0, #0]
 80a0bbe:	695b      	ldr	r3, [r3, #20]
 80a0bc0:	4798      	blx	r3
 80a0bc2:	4604      	mov	r4, r0
  uvi <<= 8;
  if (Wire.requestFrom(VEML6070_ADDR_L, 1) != 1) return -1;
 80a0bc4:	f001 fe34 	bl	80a2830 <_Z19__fetch_global_Wirev>
 80a0bc8:	462a      	mov	r2, r5
 80a0bca:	2138      	movs	r1, #56	; 0x38
 80a0bcc:	f001 fcbd 	bl	80a254a <_ZN7TwoWire11requestFromEii>
 80a0bd0:	2801      	cmp	r0, #1
 80a0bd2:	d1ee      	bne.n	80a0bb2 <_ZN17Adafruit_VEML60706readUVEv+0x14>
  uvi |= Wire.read();
 80a0bd4:	f001 fe2c 	bl	80a2830 <_Z19__fetch_global_Wirev>
 80a0bd8:	6803      	ldr	r3, [r0, #0]
  delay(500);
}

uint16_t Adafruit_VEML6070::readUV() {
  if (Wire.requestFrom(VEML6070_ADDR_H, 1) != 1) return -1;
  uint16_t uvi = Wire.read();
 80a0bda:	b2a4      	uxth	r4, r4
  uvi <<= 8;
  if (Wire.requestFrom(VEML6070_ADDR_L, 1) != 1) return -1;
  uvi |= Wire.read();
 80a0bdc:	695b      	ldr	r3, [r3, #20]
 80a0bde:	4798      	blx	r3
 80a0be0:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 80a0be4:	b280      	uxth	r0, r0

  return uvi;  
}
 80a0be6:	bd38      	pop	{r3, r4, r5, pc}

080a0be8 <_GLOBAL__sub_I__ZN17Adafruit_VEML60705beginE24veml6070_integrationtime>:
 80a0be8:	f000 bb12 	b.w	80a1210 <HAL_Pin_Map>

080a0bec <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 80a0bec:	4770      	bx	lr

080a0bee <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
 80a0bee:	4770      	bx	lr

080a0bf0 <_ZN12AssetTrackerC1Ev>:
uint8_t internalANT[]={0xB5,0x62,0x06,0x13,0x04,0x00,0x00,0x00,0xF0,0x7D,0x8A,0x2A};
uint8_t externalANT[]={0xB5,0x62,0x06,0x13,0x04,0x00,0x01,0x00,0xF0,0x7D,0x8B,0x2E};

AssetTracker::AssetTracker() {

}
 80a0bf0:	4770      	bx	lr
	...

080a0bf4 <_ZN12AssetTracker5beginEv>:

void AssetTracker::begin() {
 80a0bf4:	b510      	push	{r4, lr}
    accel.begin(LIS3DH_DEFAULT_ADDRESS);
 80a0bf6:	4c07      	ldr	r4, [pc, #28]	; (80a0c14 <_ZN12AssetTracker5beginEv+0x20>)
 80a0bf8:	2118      	movs	r1, #24
 80a0bfa:	4620      	mov	r0, r4
 80a0bfc:	f000 f9e0 	bl	80a0fc0 <_ZN15Adafruit_LIS3DH5beginEh>

    // Default to 5kHz low-power sampling
    accel.setDataRate(LIS3DH_DATARATE_LOWPOWER_5KHZ);
 80a0c00:	4620      	mov	r0, r4
 80a0c02:	2109      	movs	r1, #9
 80a0c04:	f000 f9cb 	bl	80a0f9e <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>

    // Default to 4 gravities range
    accel.setRange(LIS3DH_RANGE_4_G);
 80a0c08:	4620      	mov	r0, r4

    // Turn on the GPS module
    // gpsOn();
}
 80a0c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    // Default to 5kHz low-power sampling
    accel.setDataRate(LIS3DH_DATARATE_LOWPOWER_5KHZ);

    // Default to 4 gravities range
    accel.setRange(LIS3DH_RANGE_4_G);
 80a0c0e:	2101      	movs	r1, #1
 80a0c10:	f000 b9ad 	b.w	80a0f6e <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>
 80a0c14:	200001c8 	.word	0x200001c8

080a0c18 <_ZN12AssetTracker10readLatDegEv>:
    return gps.longitude;
}

float AssetTracker::readLatDeg() {
    return gps.latitudeDegrees;
}
 80a0c18:	4b01      	ldr	r3, [pc, #4]	; (80a0c20 <_ZN12AssetTracker10readLatDegEv+0x8>)
 80a0c1a:	6998      	ldr	r0, [r3, #24]
 80a0c1c:	4770      	bx	lr
 80a0c1e:	bf00      	nop
 80a0c20:	200001f4 	.word	0x200001f4

080a0c24 <_ZN12AssetTracker10readLonDegEv>:

float AssetTracker::readLonDeg() {
    return gps.longitudeDegrees;
}
 80a0c24:	4b01      	ldr	r3, [pc, #4]	; (80a0c2c <_ZN12AssetTracker10readLonDegEv+0x8>)
 80a0c26:	69d8      	ldr	r0, [r3, #28]
 80a0c28:	4770      	bx	lr
 80a0c2a:	bf00      	nop
 80a0c2c:	200001f4 	.word	0x200001f4

080a0c30 <_ZN12AssetTracker8getSpeedEv>:
  return gps.fixquality;
}

float AssetTracker::getSpeed(){
  return gps.speed;
}
 80a0c30:	4b01      	ldr	r3, [pc, #4]	; (80a0c38 <_ZN12AssetTracker8getSpeedEv+0x8>)
 80a0c32:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80a0c34:	4770      	bx	lr
 80a0c36:	bf00      	nop
 80a0c38:	200001f4 	.word	0x200001f4

080a0c3c <_ZN12AssetTracker5gpsOnEv>:
String AssetTracker::readLatLon() {
    String latLon = String::format("%f,%f",gps.latitudeDegrees,gps.longitudeDegrees);
    return latLon;
}

void AssetTracker::gpsOn() {
 80a0c3c:	b538      	push	{r3, r4, r5, lr}
    // Power to the GPS is controlled by a FET connected to D6
    pinMode(D6,OUTPUT);
 80a0c3e:	2101      	movs	r1, #1
 80a0c40:	2006      	movs	r0, #6
 80a0c42:	f001 fd7d 	bl	80a2740 <pinMode>
    digitalWrite(D6,LOW);
 80a0c46:	2100      	movs	r1, #0
 80a0c48:	2006      	movs	r0, #6
 80a0c4a:	f001 fd8a 	bl	80a2762 <digitalWrite>
    gps.begin(9600);
 80a0c4e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0c52:	4816      	ldr	r0, [pc, #88]	; (80a0cac <_ZN12AssetTracker5gpsOnEv+0x70>)
 80a0c54:	f7ff fc32 	bl	80a04bc <_ZN12Adafruit_GPS5beginEm>
    gps.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
 80a0c58:	4915      	ldr	r1, [pc, #84]	; (80a0cb0 <_ZN12AssetTracker5gpsOnEv+0x74>)
 80a0c5a:	4814      	ldr	r0, [pc, #80]	; (80a0cac <_ZN12AssetTracker5gpsOnEv+0x70>)
 80a0c5c:	f7ff fc37 	bl	80a04ce <_ZN12Adafruit_GPS11sendCommandEPKc>
    delay(500);
 80a0c60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0c64:	f000 fec2 	bl	80a19ec <delay>
    // Default is 1 Hz update rate
    gps.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);
 80a0c68:	4912      	ldr	r1, [pc, #72]	; (80a0cb4 <_ZN12AssetTracker5gpsOnEv+0x78>)
 80a0c6a:	4810      	ldr	r0, [pc, #64]	; (80a0cac <_ZN12AssetTracker5gpsOnEv+0x70>)
 80a0c6c:	f7ff fc2f 	bl	80a04ce <_ZN12Adafruit_GPS11sendCommandEPKc>
    delay(500);
 80a0c70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0c74:	f000 feba 	bl	80a19ec <delay>
    gps.sendCommand(PGCMD_NOANTENNA);
 80a0c78:	490f      	ldr	r1, [pc, #60]	; (80a0cb8 <_ZN12AssetTracker5gpsOnEv+0x7c>)
 80a0c7a:	480c      	ldr	r0, [pc, #48]	; (80a0cac <_ZN12AssetTracker5gpsOnEv+0x70>)
 80a0c7c:	f7ff fc27 	bl	80a04ce <_ZN12Adafruit_GPS11sendCommandEPKc>
    delay(500);
 80a0c80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0c84:	f000 feb2 	bl	80a19ec <delay>
    //for ublox maxm8 gps only
    //internal antenna selected as default
    for(uint8_t i=0;i<12;i++)
    {
        Serial1.write(internalANT[i]);
 80a0c88:	4d0c      	ldr	r5, [pc, #48]	; (80a0cbc <_ZN12AssetTracker5gpsOnEv+0x80>)
    delay(500);
    // Default is 1 Hz update rate
    gps.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);
    delay(500);
    gps.sendCommand(PGCMD_NOANTENNA);
    delay(500);
 80a0c8a:	2400      	movs	r4, #0
    //for ublox maxm8 gps only
    //internal antenna selected as default
    for(uint8_t i=0;i<12;i++)
    {
        Serial1.write(internalANT[i]);
 80a0c8c:	f001 fbd6 	bl	80a243c <_Z22__fetch_global_Serial1v>
 80a0c90:	6803      	ldr	r3, [r0, #0]
 80a0c92:	5d29      	ldrb	r1, [r5, r4]
 80a0c94:	689b      	ldr	r3, [r3, #8]
 80a0c96:	3401      	adds	r4, #1
 80a0c98:	4798      	blx	r3
    delay(500);
    gps.sendCommand(PGCMD_NOANTENNA);
    delay(500);
    //for ublox maxm8 gps only
    //internal antenna selected as default
    for(uint8_t i=0;i<12;i++)
 80a0c9a:	2c0c      	cmp	r4, #12
 80a0c9c:	d1f6      	bne.n	80a0c8c <_ZN12AssetTracker5gpsOnEv+0x50>
    {
        Serial1.write(internalANT[i]);
    }
    delay(500);
 80a0c9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 80a0ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    //internal antenna selected as default
    for(uint8_t i=0;i<12;i++)
    {
        Serial1.write(internalANT[i]);
    }
    delay(500);
 80a0ca6:	f000 bea1 	b.w	80a19ec <delay>
 80a0caa:	bf00      	nop
 80a0cac:	200001f4 	.word	0x200001f4
 80a0cb0:	080a5cf2 	.word	0x080a5cf2
 80a0cb4:	080a5d24 	.word	0x080a5d24
 80a0cb8:	080a5d35 	.word	0x080a5d35
 80a0cbc:	20000004 	.word	0x20000004

080a0cc0 <_ZN12AssetTracker6gpsFixEv>:

char* AssetTracker::preNMEA() {
    return gps.lastNMEA();
}

bool AssetTracker::gpsFix() {
 80a0cc0:	b570      	push	{r4, r5, r6, lr}
    if ((gps.latitude == 0.0) || (gps.longitude == 0.0)){
 80a0cc2:	4e09      	ldr	r6, [pc, #36]	; (80a0ce8 <_ZN12AssetTracker6gpsFixEv+0x28>)
 80a0cc4:	2100      	movs	r1, #0
 80a0cc6:	68b0      	ldr	r0, [r6, #8]
 80a0cc8:	f003 f848 	bl	80a3d5c <__aeabi_fcmpeq>
 80a0ccc:	4605      	mov	r5, r0
 80a0cce:	b948      	cbnz	r0, 80a0ce4 <_ZN12AssetTracker6gpsFixEv+0x24>
 80a0cd0:	2100      	movs	r1, #0
 80a0cd2:	68f0      	ldr	r0, [r6, #12]
 80a0cd4:	f04f 0401 	mov.w	r4, #1
 80a0cd8:	f003 f840 	bl	80a3d5c <__aeabi_fcmpeq>
 80a0cdc:	b100      	cbz	r0, 80a0ce0 <_ZN12AssetTracker6gpsFixEv+0x20>
 80a0cde:	462c      	mov	r4, r5
 80a0ce0:	b2e0      	uxtb	r0, r4
 80a0ce2:	bd70      	pop	{r4, r5, r6, pc}
        return false;
 80a0ce4:	2000      	movs	r0, #0
    } else {
        return true;
    }
    //return gps.fix;
}
 80a0ce6:	bd70      	pop	{r4, r5, r6, pc}
 80a0ce8:	200001f4 	.word	0x200001f4

080a0cec <_ZN12AssetTracker9updateGPSEv>:
// char AssetTracker::checkGPS(){
//     char c = gps.read();
//     return c;
// }

void AssetTracker::updateGPS() {
 80a0cec:	b508      	push	{r3, lr}
  //     // this also sets the newNMEAreceived() flag to false
  //     return;  // we can fail to parse a sentence in which case we should just wait for another
  //   }
  // }
  //read the complete sentence
  while (Serial1.available()) {
 80a0cee:	f001 fba5 	bl	80a243c <_Z22__fetch_global_Serial1v>
 80a0cf2:	6803      	ldr	r3, [r0, #0]
 80a0cf4:	691b      	ldr	r3, [r3, #16]
 80a0cf6:	4798      	blx	r3
 80a0cf8:	b178      	cbz	r0, 80a0d1a <_ZN12AssetTracker9updateGPSEv+0x2e>
        char c = gps.read();
 80a0cfa:	4808      	ldr	r0, [pc, #32]	; (80a0d1c <_ZN12AssetTracker9updateGPSEv+0x30>)
 80a0cfc:	f7ff fb58 	bl	80a03b0 <_ZN12Adafruit_GPS4readEv>
        if (gps.newNMEAreceived()) {
 80a0d00:	4806      	ldr	r0, [pc, #24]	; (80a0d1c <_ZN12AssetTracker9updateGPSEv+0x30>)
 80a0d02:	f7ff fbe7 	bl	80a04d4 <_ZN12Adafruit_GPS15newNMEAreceivedEv>
 80a0d06:	2800      	cmp	r0, #0
 80a0d08:	d0f1      	beq.n	80a0cee <_ZN12AssetTracker9updateGPSEv+0x2>
            gps.parse(gps.lastNMEA());
 80a0d0a:	4804      	ldr	r0, [pc, #16]	; (80a0d1c <_ZN12AssetTracker9updateGPSEv+0x30>)
 80a0d0c:	f7ff fbe8 	bl	80a04e0 <_ZN12Adafruit_GPS8lastNMEAEv>
 80a0d10:	4601      	mov	r1, r0
 80a0d12:	4802      	ldr	r0, [pc, #8]	; (80a0d1c <_ZN12AssetTracker9updateGPSEv+0x30>)
 80a0d14:	f7ff fbfe 	bl	80a0514 <_ZN12Adafruit_GPS5parseEPc>
 80a0d18:	e7e9      	b.n	80a0cee <_ZN12AssetTracker9updateGPSEv+0x2>
 80a0d1a:	bd08      	pop	{r3, pc}
 80a0d1c:	200001f4 	.word	0x200001f4

080a0d20 <_ZN15Adafruit_LIS3DHD0Ev>:
 80a0d20:	b510      	push	{r4, lr}
 80a0d22:	4604      	mov	r4, r0
 80a0d24:	212c      	movs	r1, #44	; 0x2c
 80a0d26:	f001 fda8 	bl	80a287a <_ZdlPvj>
 80a0d2a:	4620      	mov	r0, r4
 80a0d2c:	bd10      	pop	{r4, pc}
	...

080a0d30 <_GLOBAL__sub_I_gps>:
	return accel.setupLowPowerWakeMode(movementThreshold);
}

uint8_t AssetTracker::clearAccelInterrupt() {
	return accel.clearInterrupt();
}
 80a0d30:	b510      	push	{r4, lr}
 80a0d32:	f000 fa6d 	bl	80a1210 <HAL_Pin_Map>
#include "AssetTracker.h"
#include "math.h"

//----------------- Tracker ----------------//

Adafruit_GPS gps = Adafruit_GPS(&Serial1);
 80a0d36:	f001 fb81 	bl	80a243c <_Z22__fetch_global_Serial1v>
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
 80a0d3a:	4c08      	ldr	r4, [pc, #32]	; (80a0d5c <_GLOBAL__sub_I_gps+0x2c>)
#include "AssetTracker.h"
#include "math.h"

//----------------- Tracker ----------------//

Adafruit_GPS gps = Adafruit_GPS(&Serial1);
 80a0d3c:	4601      	mov	r1, r0
 80a0d3e:	4808      	ldr	r0, [pc, #32]	; (80a0d60 <_GLOBAL__sub_I_gps+0x30>)
 80a0d40:	f7ff fbb6 	bl	80a04b0 <_ZN12Adafruit_GPSC1EP11USARTSerial>
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
 80a0d44:	210c      	movs	r1, #12
 80a0d46:	4620      	mov	r0, r4
 80a0d48:	f000 f834 	bl	80a0db4 <_ZN15Adafruit_LIS3DHC1Ea>
 80a0d4c:	4620      	mov	r0, r4
	return accel.setupLowPowerWakeMode(movementThreshold);
}

uint8_t AssetTracker::clearAccelInterrupt() {
	return accel.clearInterrupt();
}
 80a0d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "math.h"

//----------------- Tracker ----------------//

Adafruit_GPS gps = Adafruit_GPS(&Serial1);
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
 80a0d52:	4a04      	ldr	r2, [pc, #16]	; (80a0d64 <_GLOBAL__sub_I_gps+0x34>)
 80a0d54:	4904      	ldr	r1, [pc, #16]	; (80a0d68 <_GLOBAL__sub_I_gps+0x38>)
 80a0d56:	f001 bd8b 	b.w	80a2870 <__aeabi_atexit>
 80a0d5a:	bf00      	nop
 80a0d5c:	200001c8 	.word	0x200001c8
 80a0d60:	200001f4 	.word	0x200001f4
 80a0d64:	200000b8 	.word	0x200000b8
 80a0d68:	080a0bef 	.word	0x080a0bef

080a0d6c <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
 80a0d6c:	f000 ba50 	b.w	80a1210 <HAL_Pin_Map>

080a0d70 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
 80a0d70:	f000 ba4e 	b.w	80a1210 <HAL_Pin_Map>

080a0d74 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
 80a0d74:	b538      	push	{r3, r4, r5, lr}
 80a0d76:	460c      	mov	r4, r1
 80a0d78:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 80a0d7a:	2228      	movs	r2, #40	; 0x28
 80a0d7c:	2100      	movs	r1, #0
 80a0d7e:	4620      	mov	r0, r4
 80a0d80:	f003 f88d 	bl	80a3e9e <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
 80a0d84:	220b      	movs	r2, #11
 80a0d86:	4908      	ldr	r1, [pc, #32]	; (80a0da8 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x34>)
 80a0d88:	4620      	mov	r0, r4
 80a0d8a:	f003 f907 	bl	80a3f9c <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
 80a0d8e:	2300      	movs	r3, #0
  sensor->version     = 1;
 80a0d90:	2201      	movs	r2, #1
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
 80a0d92:	72e3      	strb	r3, [r4, #11]
  sensor->version     = 1;
 80a0d94:	60e2      	str	r2, [r4, #12]
  sensor->sensor_id   = _sensorID;
 80a0d96:	69a9      	ldr	r1, [r5, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
  sensor->min_delay   = 0;
 80a0d98:	6263      	str	r3, [r4, #36]	; 0x24
  sensor->max_value   = 0;
 80a0d9a:	2300      	movs	r3, #0

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
 80a0d9c:	6121      	str	r1, [r4, #16]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
 80a0d9e:	6162      	str	r2, [r4, #20]
  sensor->min_delay   = 0;
  sensor->max_value   = 0;
 80a0da0:	61a3      	str	r3, [r4, #24]
  sensor->min_value   = 0;
 80a0da2:	61e3      	str	r3, [r4, #28]
  sensor->resolution  = 0;
 80a0da4:	6223      	str	r3, [r4, #32]
 80a0da6:	bd38      	pop	{r3, r4, r5, pc}
 80a0da8:	080a5d44 	.word	0x080a5d44

080a0dac <_ZN7TwoWire5writeEi>:
 80a0dac:	6803      	ldr	r3, [r0, #0]
 80a0dae:	b2c9      	uxtb	r1, r1
 80a0db0:	689b      	ldr	r3, [r3, #8]
 80a0db2:	4718      	bx	r3

080a0db4 <_ZN15Adafruit_LIS3DHC1Ea>:
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
{
}

Adafruit_LIS3DH::Adafruit_LIS3DH(int8_t cspin)
  : _cs(cspin), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
 80a0db4:	4a06      	ldr	r2, [pc, #24]	; (80a0dd0 <_ZN15Adafruit_LIS3DHC1Ea+0x1c>)
 80a0db6:	7741      	strb	r1, [r0, #29]
 80a0db8:	6002      	str	r2, [r0, #0]
 80a0dba:	f04f 32ff 	mov.w	r2, #4294967295
 80a0dbe:	6182      	str	r2, [r0, #24]
 80a0dc0:	7782      	strb	r2, [r0, #30]
 80a0dc2:	21ff      	movs	r1, #255	; 0xff
 80a0dc4:	f880 2020 	strb.w	r2, [r0, #32]
 80a0dc8:	2211      	movs	r2, #17
 80a0dca:	77c1      	strb	r1, [r0, #31]
 80a0dcc:	6242      	str	r2, [r0, #36]	; 0x24
{ }
 80a0dce:	4770      	bx	lr
 80a0dd0:	080a5d54 	.word	0x080a5d54

080a0dd4 <_ZN15Adafruit_LIS3DH7spixferEh>:
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 80a0dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
 80a0dd8:	f990 3020 	ldrsb.w	r3, [r0, #32]
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 80a0ddc:	4605      	mov	r5, r0
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
 80a0dde:	3301      	adds	r3, #1
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 80a0de0:	460f      	mov	r7, r1
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
 80a0de2:	d104      	bne.n	80a0dee <_ZN15Adafruit_LIS3DH7spixferEh+0x1a>
    return SPI.transfer(x);
 80a0de4:	4816      	ldr	r0, [pc, #88]	; (80a0e40 <_ZN15Adafruit_LIS3DH7spixferEh+0x6c>)
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
 80a0de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
    return SPI.transfer(x);
 80a0dea:	f000 bcb7 	b.w	80a175c <_ZN8SPIClass8transferEh>
 80a0dee:	2607      	movs	r6, #7
 80a0df0:	2400      	movs	r4, #0
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_sck, LOW);
    digitalWrite(_mosi, x & (1<<i));
 80a0df2:	f04f 0801 	mov.w	r8, #1
  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_sck, LOW);
 80a0df6:	f995 0020 	ldrsb.w	r0, [r5, #32]
 80a0dfa:	2100      	movs	r1, #0
 80a0dfc:	b280      	uxth	r0, r0
 80a0dfe:	f001 fcb0 	bl	80a2762 <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
 80a0e02:	f995 001e 	ldrsb.w	r0, [r5, #30]
 80a0e06:	fa08 f106 	lsl.w	r1, r8, r6
 80a0e0a:	4039      	ands	r1, r7
 80a0e0c:	b280      	uxth	r0, r0
 80a0e0e:	f001 fca8 	bl	80a2762 <digitalWrite>
    digitalWrite(_sck, HIGH);
 80a0e12:	f995 0020 	ldrsb.w	r0, [r5, #32]
 80a0e16:	2101      	movs	r1, #1
 80a0e18:	b280      	uxth	r0, r0
 80a0e1a:	f001 fca2 	bl	80a2762 <digitalWrite>
    if (digitalRead(_miso))
 80a0e1e:	f995 001f 	ldrsb.w	r0, [r5, #31]

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
 80a0e22:	0064      	lsls	r4, r4, #1
    digitalWrite(_sck, LOW);
    digitalWrite(_mosi, x & (1<<i));
    digitalWrite(_sck, HIGH);
    if (digitalRead(_miso))
 80a0e24:	b280      	uxth	r0, r0

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
 80a0e26:	b2e4      	uxtb	r4, r4
    digitalWrite(_sck, LOW);
    digitalWrite(_mosi, x & (1<<i));
    digitalWrite(_sck, HIGH);
    if (digitalRead(_miso))
 80a0e28:	f001 fcb4 	bl	80a2794 <digitalRead>
 80a0e2c:	b108      	cbz	r0, 80a0e32 <_ZN15Adafruit_LIS3DH7spixferEh+0x5e>
      reply |= 1;
 80a0e2e:	f044 0401 	orr.w	r4, r4, #1
    return SPI.transfer(x);

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
 80a0e32:	f116 36ff 	adds.w	r6, r6, #4294967295
 80a0e36:	d2de      	bcs.n	80a0df6 <_ZN15Adafruit_LIS3DH7spixferEh+0x22>
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
 80a0e38:	4620      	mov	r0, r4
 80a0e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0e3e:	bf00      	nop
 80a0e40:	200006d8 	.word	0x200006d8

080a0e44 <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
 80a0e44:	b510      	push	{r4, lr}
#ifdef PARTICLE
    SPI.setBitOrder(MSBFIRST);
 80a0e46:	4c08      	ldr	r4, [pc, #32]	; (80a0e68 <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x24>)
 80a0e48:	2101      	movs	r1, #1
 80a0e4a:	4620      	mov	r0, r4
 80a0e4c:	f000 fc47 	bl	80a16de <_ZN8SPIClass11setBitOrderEh>
    SPI.setClockSpeed(500000);
 80a0e50:	4906      	ldr	r1, [pc, #24]	; (80a0e6c <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
 80a0e52:	4620      	mov	r0, r4
 80a0e54:	2201      	movs	r2, #1
 80a0e56:	f000 fc5f 	bl	80a1718 <_ZN8SPIClass13setClockSpeedEjj>
    SPI.setDataMode(SPI_MODE0);
 80a0e5a:	4620      	mov	r0, r4
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
 80a0e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void Adafruit_LIS3DH::beginTransaction() {
#ifdef PARTICLE
    SPI.setBitOrder(MSBFIRST);
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
 80a0e60:	2100      	movs	r1, #0
 80a0e62:	f000 bc3f 	b.w	80a16e4 <_ZN8SPIClass11setDataModeEh>
 80a0e66:	bf00      	nop
 80a0e68:	200006d8 	.word	0x200006d8
 80a0e6c:	0007a120 	.word	0x0007a120

080a0e70 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
 80a0e70:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
 80a0e72:	f990 301d 	ldrsb.w	r3, [r0, #29]
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
 80a0e76:	4604      	mov	r4, r0
  if (_cs == -1) {
 80a0e78:	3301      	adds	r3, #1
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
 80a0e7a:	460e      	mov	r6, r1
 80a0e7c:	4615      	mov	r5, r2
  if (_cs == -1) {
 80a0e7e:	d116      	bne.n	80a0eae <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
 80a0e80:	f001 fcd6 	bl	80a2830 <_Z19__fetch_global_Wirev>
 80a0e84:	7f21      	ldrb	r1, [r4, #28]
 80a0e86:	f001 fb65 	bl	80a2554 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
 80a0e8a:	f001 fcd1 	bl	80a2830 <_Z19__fetch_global_Wirev>
 80a0e8e:	6803      	ldr	r3, [r0, #0]
 80a0e90:	4631      	mov	r1, r6
 80a0e92:	689b      	ldr	r3, [r3, #8]
 80a0e94:	4798      	blx	r3
    Wire.write((uint8_t)value);
 80a0e96:	f001 fccb 	bl	80a2830 <_Z19__fetch_global_Wirev>
 80a0e9a:	6803      	ldr	r3, [r0, #0]
 80a0e9c:	4629      	mov	r1, r5
 80a0e9e:	689b      	ldr	r3, [r3, #8]
 80a0ea0:	4798      	blx	r3
    Wire.endTransmission();
 80a0ea2:	f001 fcc5 	bl	80a2830 <_Z19__fetch_global_Wirev>
    digitalWrite(_cs, HIGH);
    if (_sck == -1)
    	endTransaction();
  }
  #endif
}
 80a0ea6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
  if (_cs == -1) {
    Wire.beginTransmission((uint8_t)_i2caddr);
    Wire.write((uint8_t)reg);
    Wire.write((uint8_t)value);
    Wire.endTransmission();
 80a0eaa:	f001 bb5e 	b.w	80a256a <_ZN7TwoWire15endTransmissionEv>
  }
  #ifndef __AVR_ATtiny85__
  else {
	if (_sck == -1)
 80a0eae:	f990 3020 	ldrsb.w	r3, [r0, #32]
 80a0eb2:	3301      	adds	r3, #1
 80a0eb4:	d101      	bne.n	80a0eba <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
 80a0eb6:	f7ff ffc5 	bl	80a0e44 <_ZN15Adafruit_LIS3DH16beginTransactionEv>

    digitalWrite(_cs, LOW);
 80a0eba:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a0ebe:	2100      	movs	r1, #0
 80a0ec0:	b280      	uxth	r0, r0
 80a0ec2:	f001 fc4e 	bl	80a2762 <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
 80a0ec6:	f006 017f 	and.w	r1, r6, #127	; 0x7f
 80a0eca:	4620      	mov	r0, r4
 80a0ecc:	f7ff ff82 	bl	80a0dd4 <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
 80a0ed0:	4629      	mov	r1, r5
 80a0ed2:	4620      	mov	r0, r4
 80a0ed4:	f7ff ff7e 	bl	80a0dd4 <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
 80a0ed8:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a0edc:	2101      	movs	r1, #1
 80a0ede:	b280      	uxth	r0, r0
    if (_sck == -1)
    	endTransaction();
  }
  #endif
}
 80a0ee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  beginTransaction();

    digitalWrite(_cs, LOW);
    spixfer(reg & ~0x80); // write, bit 7 low
    spixfer(value);
    digitalWrite(_cs, HIGH);
 80a0ee4:	f001 bc3d 	b.w	80a2762 <digitalWrite>

080a0ee8 <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
/**************************************************************************/
/*!
    @brief  Reads 8-bits from the specified register
*/
/**************************************************************************/
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 80a0ee8:	b538      	push	{r3, r4, r5, lr}
  uint8_t value;

  if (_cs == -1) {
 80a0eea:	f990 301d 	ldrsb.w	r3, [r0, #29]
/**************************************************************************/
/*!
    @brief  Reads 8-bits from the specified register
*/
/**************************************************************************/
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 80a0eee:	4604      	mov	r4, r0
  uint8_t value;

  if (_cs == -1) {
 80a0ef0:	3301      	adds	r3, #1
/**************************************************************************/
/*!
    @brief  Reads 8-bits from the specified register
*/
/**************************************************************************/
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 80a0ef2:	460d      	mov	r5, r1
  uint8_t value;

  if (_cs == -1) {
 80a0ef4:	d11d      	bne.n	80a0f32 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x4a>
    Wire.beginTransmission(_i2caddr);
 80a0ef6:	f001 fc9b 	bl	80a2830 <_Z19__fetch_global_Wirev>
 80a0efa:	f994 101c 	ldrsb.w	r1, [r4, #28]
 80a0efe:	f001 fb2d 	bl	80a255c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
 80a0f02:	f001 fc95 	bl	80a2830 <_Z19__fetch_global_Wirev>
 80a0f06:	6803      	ldr	r3, [r0, #0]
 80a0f08:	4629      	mov	r1, r5
 80a0f0a:	689b      	ldr	r3, [r3, #8]
 80a0f0c:	4798      	blx	r3
    Wire.endTransmission();
 80a0f0e:	f001 fc8f 	bl	80a2830 <_Z19__fetch_global_Wirev>
 80a0f12:	f001 fb2a 	bl	80a256a <_ZN7TwoWire15endTransmissionEv>

    Wire.requestFrom(_i2caddr, 1);
 80a0f16:	f001 fc8b 	bl	80a2830 <_Z19__fetch_global_Wirev>
 80a0f1a:	2201      	movs	r2, #1
 80a0f1c:	f994 101c 	ldrsb.w	r1, [r4, #28]
 80a0f20:	f001 fb13 	bl	80a254a <_ZN7TwoWire11requestFromEii>
    value = Wire.read();
 80a0f24:	f001 fc84 	bl	80a2830 <_Z19__fetch_global_Wirev>
 80a0f28:	6803      	ldr	r3, [r0, #0]
 80a0f2a:	695b      	ldr	r3, [r3, #20]
 80a0f2c:	4798      	blx	r3
 80a0f2e:	b2c5      	uxtb	r5, r0
 80a0f30:	e01b      	b.n	80a0f6a <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x82>
  }
  #ifndef __AVR_ATtiny85__
  else {
	if (_sck == -1)
 80a0f32:	f990 3020 	ldrsb.w	r3, [r0, #32]
 80a0f36:	3301      	adds	r3, #1
 80a0f38:	d101      	bne.n	80a0f3e <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x56>
	  beginTransaction();
 80a0f3a:	f7ff ff83 	bl	80a0e44 <_ZN15Adafruit_LIS3DH16beginTransactionEv>

	digitalWrite(_cs, LOW);
 80a0f3e:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a0f42:	2100      	movs	r1, #0
 80a0f44:	b280      	uxth	r0, r0
 80a0f46:	f001 fc0c 	bl	80a2762 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 80a0f4a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 80a0f4e:	4620      	mov	r0, r4
 80a0f50:	f7ff ff40 	bl	80a0dd4 <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
 80a0f54:	2100      	movs	r1, #0
 80a0f56:	4620      	mov	r0, r4
 80a0f58:	f7ff ff3c 	bl	80a0dd4 <_ZN15Adafruit_LIS3DH7spixferEh>
 80a0f5c:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
 80a0f5e:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a0f62:	2101      	movs	r1, #1
 80a0f64:	b280      	uxth	r0, r0
 80a0f66:	f001 fbfc 	bl	80a2762 <digitalWrite>
    if (_sck == -1)
    	endTransaction();
  }
  #endif
  return value;
}
 80a0f6a:	4628      	mov	r0, r5
 80a0f6c:	bd38      	pop	{r3, r4, r5, pc}

080a0f6e <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>:
/*!
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
void Adafruit_LIS3DH::setRange(lis3dh_range_t range)
{
 80a0f6e:	b538      	push	{r3, r4, r5, lr}
 80a0f70:	460d      	mov	r5, r1
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
 80a0f72:	2123      	movs	r1, #35	; 0x23
/*!
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
void Adafruit_LIS3DH::setRange(lis3dh_range_t range)
{
 80a0f74:	4604      	mov	r4, r0
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
 80a0f76:	f7ff ffb7 	bl	80a0ee8 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  r &= ~(0x30);
  r |= range << 4;
 80a0f7a:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 80a0f7e:	ea40 1205 	orr.w	r2, r0, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL4, r);
 80a0f82:	b2d2      	uxtb	r2, r2
 80a0f84:	4620      	mov	r0, r4
}
 80a0f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_LIS3DH::setRange(lis3dh_range_t range)
{
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
  r &= ~(0x30);
  r |= range << 4;
  writeRegister8(LIS3DH_REG_CTRL4, r);
 80a0f8a:	2123      	movs	r1, #35	; 0x23
 80a0f8c:	f7ff bf70 	b.w	80a0e70 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

080a0f90 <_ZN15Adafruit_LIS3DH8getRangeEv>:
/*!
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
lis3dh_range_t Adafruit_LIS3DH::getRange(void)
{
 80a0f90:	b508      	push	{r3, lr}
  /* Read the data format register to preserve bits */
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
 80a0f92:	2123      	movs	r1, #35	; 0x23
 80a0f94:	f7ff ffa8 	bl	80a0ee8 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
 80a0f98:	f3c0 1001 	ubfx	r0, r0, #4, #2
 80a0f9c:	bd08      	pop	{r3, pc}

080a0f9e <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
/*!
    @brief  Sets the data rate for the LIS3DH (controls power consumption)
*/
/**************************************************************************/
void Adafruit_LIS3DH::setDataRate(lis3dh_dataRate_t dataRate)
{
 80a0f9e:	b538      	push	{r3, r4, r5, lr}
 80a0fa0:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
 80a0fa2:	2120      	movs	r1, #32
/*!
    @brief  Sets the data rate for the LIS3DH (controls power consumption)
*/
/**************************************************************************/
void Adafruit_LIS3DH::setDataRate(lis3dh_dataRate_t dataRate)
{
 80a0fa4:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
 80a0fa6:	f7ff ff9f 	bl	80a0ee8 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
  ctl1 |= (dataRate << 4);
 80a0faa:	f000 000f 	and.w	r0, r0, #15
 80a0fae:	ea40 1205 	orr.w	r2, r0, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
 80a0fb2:	b2d2      	uxtb	r2, r2
 80a0fb4:	4620      	mov	r0, r4
}
 80a0fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_LIS3DH::setDataRate(lis3dh_dataRate_t dataRate)
{
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
  ctl1 &= ~(0xF0); // mask off bits
  ctl1 |= (dataRate << 4);
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
 80a0fba:	2120      	movs	r1, #32
 80a0fbc:	f7ff bf58 	b.w	80a0e70 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

080a0fc0 <_ZN15Adafruit_LIS3DH5beginEh>:
/**************************************************************************/
/*!
    @brief  Setups the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
 80a0fc0:	b510      	push	{r4, lr}
 80a0fc2:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
 80a0fc4:	7701      	strb	r1, [r0, #28]


  if (_cs == -1) {
 80a0fc6:	f990 001d 	ldrsb.w	r0, [r0, #29]
 80a0fca:	1c42      	adds	r2, r0, #1
 80a0fcc:	d104      	bne.n	80a0fd8 <_ZN15Adafruit_LIS3DH5beginEh+0x18>
    // i2c
    Wire.begin();
 80a0fce:	f001 fc2f 	bl	80a2830 <_Z19__fetch_global_Wirev>
 80a0fd2:	f001 faab 	bl	80a252c <_ZN7TwoWire5beginEv>
 80a0fd6:	e021      	b.n	80a101c <_ZN15Adafruit_LIS3DH5beginEh+0x5c>
  } else {
    digitalWrite(_cs, HIGH);
 80a0fd8:	2101      	movs	r1, #1
 80a0fda:	b280      	uxth	r0, r0
 80a0fdc:	f001 fbc1 	bl	80a2762 <digitalWrite>
    pinMode(_cs, OUTPUT);
 80a0fe0:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a0fe4:	2101      	movs	r1, #1
 80a0fe6:	b280      	uxth	r0, r0
 80a0fe8:	f001 fbaa 	bl	80a2740 <pinMode>

#ifndef __AVR_ATtiny85__
    if (_sck == -1) {
 80a0fec:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80a0ff0:	1c43      	adds	r3, r0, #1
 80a0ff2:	d103      	bne.n	80a0ffc <_ZN15Adafruit_LIS3DH5beginEh+0x3c>
      // hardware SPI
      SPI.begin();
 80a0ff4:	481a      	ldr	r0, [pc, #104]	; (80a1060 <_ZN15Adafruit_LIS3DH5beginEh+0xa0>)
 80a0ff6:	f000 fb6d 	bl	80a16d4 <_ZN8SPIClass5beginEv>
 80a0ffa:	e00f      	b.n	80a101c <_ZN15Adafruit_LIS3DH5beginEh+0x5c>
    } else {
      // software SPI
      pinMode(_sck, OUTPUT);
 80a0ffc:	2101      	movs	r1, #1
 80a0ffe:	b280      	uxth	r0, r0
 80a1000:	f001 fb9e 	bl	80a2740 <pinMode>
      pinMode(_mosi, OUTPUT);
 80a1004:	f994 001e 	ldrsb.w	r0, [r4, #30]
 80a1008:	2101      	movs	r1, #1
 80a100a:	b280      	uxth	r0, r0
 80a100c:	f001 fb98 	bl	80a2740 <pinMode>
      pinMode(_miso, INPUT);
 80a1010:	f994 001f 	ldrsb.w	r0, [r4, #31]
 80a1014:	2100      	movs	r1, #0
 80a1016:	b280      	uxth	r0, r0
 80a1018:	f001 fb92 	bl	80a2740 <pinMode>
    Serial.println(readRegister8(i), HEX);
  }
  */

  /* Check connection */
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
 80a101c:	210f      	movs	r1, #15
 80a101e:	4620      	mov	r0, r4
 80a1020:	f7ff ff62 	bl	80a0ee8 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
 80a1024:	2833      	cmp	r0, #51	; 0x33
 80a1026:	d119      	bne.n	80a105c <_ZN15Adafruit_LIS3DH5beginEh+0x9c>
    //Serial.println(deviceid, HEX);
    return false;
  }

  // enable all axes, normal mode
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
 80a1028:	2207      	movs	r2, #7
 80a102a:	4620      	mov	r0, r4
 80a102c:	2120      	movs	r1, #32
 80a102e:	f7ff ff1f 	bl	80a0e70 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  // 400Hz rate
  setDataRate(LIS3DH_DATARATE_400_HZ);
 80a1032:	4620      	mov	r0, r4
 80a1034:	2107      	movs	r1, #7
 80a1036:	f7ff ffb2 	bl	80a0f9e <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>

  // High res & BDU enabled
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
 80a103a:	4620      	mov	r0, r4
 80a103c:	2288      	movs	r2, #136	; 0x88
 80a103e:	2123      	movs	r1, #35	; 0x23
 80a1040:	f7ff ff16 	bl	80a0e70 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

  // DRDY on INT1
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
 80a1044:	4620      	mov	r0, r4
 80a1046:	2210      	movs	r2, #16
 80a1048:	2122      	movs	r1, #34	; 0x22
 80a104a:	f7ff ff11 	bl	80a0e70 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

  // Turn on orientation config
  //writeRegister8(LIS3DH_REG_PL_CFG, 0x40);

  // enable adcs
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
 80a104e:	4620      	mov	r0, r4
 80a1050:	2280      	movs	r2, #128	; 0x80
 80a1052:	211f      	movs	r1, #31
 80a1054:	f7ff ff0c 	bl	80a0e70 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
    Serial.print(i, HEX); Serial.print(" = 0x");
    Serial.println(readRegister8(i), HEX);
  }
  */

  return true;
 80a1058:	2001      	movs	r0, #1
 80a105a:	bd10      	pop	{r4, pc}
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
  if (deviceid != 0x33)
  {
    /* No LIS3DH detected ... return false */
    //Serial.println(deviceid, HEX);
    return false;
 80a105c:	2000      	movs	r0, #0
    Serial.println(readRegister8(i), HEX);
  }
  */

  return true;
}
 80a105e:	bd10      	pop	{r4, pc}
 80a1060:	200006d8 	.word	0x200006d8

080a1064 <_ZN15Adafruit_LIS3DH4readEv>:


void Adafruit_LIS3DH::read(void) {
 80a1064:	b538      	push	{r3, r4, r5, lr}
  // read x y z at once

  if (_cs == -1) {
 80a1066:	f990 301d 	ldrsb.w	r3, [r0, #29]

  return true;
}


void Adafruit_LIS3DH::read(void) {
 80a106a:	4604      	mov	r4, r0
  // read x y z at once

  if (_cs == -1) {
 80a106c:	3301      	adds	r3, #1
 80a106e:	d143      	bne.n	80a10f8 <_ZN15Adafruit_LIS3DH4readEv+0x94>
    // i2c
    Wire.beginTransmission(_i2caddr);
 80a1070:	f001 fbde 	bl	80a2830 <_Z19__fetch_global_Wirev>
 80a1074:	f994 101c 	ldrsb.w	r1, [r4, #28]
 80a1078:	f001 fa70 	bl	80a255c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
 80a107c:	f001 fbd8 	bl	80a2830 <_Z19__fetch_global_Wirev>
 80a1080:	21a8      	movs	r1, #168	; 0xa8
 80a1082:	f7ff fe93 	bl	80a0dac <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
 80a1086:	f001 fbd3 	bl	80a2830 <_Z19__fetch_global_Wirev>
 80a108a:	f001 fa6e 	bl	80a256a <_ZN7TwoWire15endTransmissionEv>

    Wire.requestFrom(_i2caddr, 6);
 80a108e:	f001 fbcf 	bl	80a2830 <_Z19__fetch_global_Wirev>
 80a1092:	2206      	movs	r2, #6
 80a1094:	f994 101c 	ldrsb.w	r1, [r4, #28]
 80a1098:	f001 fa57 	bl	80a254a <_ZN7TwoWire11requestFromEii>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
 80a109c:	f001 fbc8 	bl	80a2830 <_Z19__fetch_global_Wirev>
 80a10a0:	6803      	ldr	r3, [r0, #0]
 80a10a2:	695b      	ldr	r3, [r3, #20]
 80a10a4:	4798      	blx	r3
 80a10a6:	80e0      	strh	r0, [r4, #6]
 80a10a8:	f001 fbc2 	bl	80a2830 <_Z19__fetch_global_Wirev>
 80a10ac:	6803      	ldr	r3, [r0, #0]
 80a10ae:	695b      	ldr	r3, [r3, #20]
 80a10b0:	4798      	blx	r3
 80a10b2:	88e3      	ldrh	r3, [r4, #6]
 80a10b4:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a10b8:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
 80a10ba:	f001 fbb9 	bl	80a2830 <_Z19__fetch_global_Wirev>
 80a10be:	6803      	ldr	r3, [r0, #0]
 80a10c0:	695b      	ldr	r3, [r3, #20]
 80a10c2:	4798      	blx	r3
 80a10c4:	8120      	strh	r0, [r4, #8]
 80a10c6:	f001 fbb3 	bl	80a2830 <_Z19__fetch_global_Wirev>
 80a10ca:	6803      	ldr	r3, [r0, #0]
 80a10cc:	695b      	ldr	r3, [r3, #20]
 80a10ce:	4798      	blx	r3
 80a10d0:	8923      	ldrh	r3, [r4, #8]
 80a10d2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a10d6:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
 80a10d8:	f001 fbaa 	bl	80a2830 <_Z19__fetch_global_Wirev>
 80a10dc:	6803      	ldr	r3, [r0, #0]
 80a10de:	695b      	ldr	r3, [r3, #20]
 80a10e0:	4798      	blx	r3
 80a10e2:	8160      	strh	r0, [r4, #10]
 80a10e4:	f001 fba4 	bl	80a2830 <_Z19__fetch_global_Wirev>
 80a10e8:	6803      	ldr	r3, [r0, #0]
 80a10ea:	695b      	ldr	r3, [r3, #20]
 80a10ec:	4798      	blx	r3
 80a10ee:	8963      	ldrh	r3, [r4, #10]
 80a10f0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a10f4:	8160      	strh	r0, [r4, #10]
 80a10f6:	e03c      	b.n	80a1172 <_ZN15Adafruit_LIS3DH4readEv+0x10e>
  }
  #ifndef __AVR_ATtiny85__
  else {
    if (_sck == -1)
 80a10f8:	f990 3020 	ldrsb.w	r3, [r0, #32]
 80a10fc:	3301      	adds	r3, #1
 80a10fe:	d101      	bne.n	80a1104 <_ZN15Adafruit_LIS3DH4readEv+0xa0>
      beginTransaction();
 80a1100:	f7ff fea0 	bl	80a0e44 <_ZN15Adafruit_LIS3DH16beginTransactionEv>

    digitalWrite(_cs, LOW);
 80a1104:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a1108:	2100      	movs	r1, #0
 80a110a:	b280      	uxth	r0, r0
 80a110c:	f001 fb29 	bl	80a2762 <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
 80a1110:	21e8      	movs	r1, #232	; 0xe8
 80a1112:	4620      	mov	r0, r4
 80a1114:	f7ff fe5e 	bl	80a0dd4 <_ZN15Adafruit_LIS3DH7spixferEh>

    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
 80a1118:	21ff      	movs	r1, #255	; 0xff
 80a111a:	4620      	mov	r0, r4
 80a111c:	f7ff fe5a 	bl	80a0dd4 <_ZN15Adafruit_LIS3DH7spixferEh>
 80a1120:	21ff      	movs	r1, #255	; 0xff
 80a1122:	80e0      	strh	r0, [r4, #6]
 80a1124:	4620      	mov	r0, r4
 80a1126:	f7ff fe55 	bl	80a0dd4 <_ZN15Adafruit_LIS3DH7spixferEh>
 80a112a:	88e3      	ldrh	r3, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 80a112c:	21ff      	movs	r1, #255	; 0xff
      beginTransaction();

    digitalWrite(_cs, LOW);
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high

    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
 80a112e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a1132:	80e0      	strh	r0, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 80a1134:	4620      	mov	r0, r4
 80a1136:	f7ff fe4d 	bl	80a0dd4 <_ZN15Adafruit_LIS3DH7spixferEh>
 80a113a:	21ff      	movs	r1, #255	; 0xff
 80a113c:	8120      	strh	r0, [r4, #8]
 80a113e:	4620      	mov	r0, r4
 80a1140:	f7ff fe48 	bl	80a0dd4 <_ZN15Adafruit_LIS3DH7spixferEh>
 80a1144:	8923      	ldrh	r3, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 80a1146:	21ff      	movs	r1, #255	; 0xff

    digitalWrite(_cs, LOW);
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high

    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 80a1148:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a114c:	8120      	strh	r0, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 80a114e:	4620      	mov	r0, r4
 80a1150:	f7ff fe40 	bl	80a0dd4 <_ZN15Adafruit_LIS3DH7spixferEh>
 80a1154:	21ff      	movs	r1, #255	; 0xff
 80a1156:	8160      	strh	r0, [r4, #10]
 80a1158:	4620      	mov	r0, r4
 80a115a:	f7ff fe3b 	bl	80a0dd4 <_ZN15Adafruit_LIS3DH7spixferEh>
 80a115e:	8963      	ldrh	r3, [r4, #10]

    digitalWrite(_cs, HIGH);
 80a1160:	2101      	movs	r1, #1
    digitalWrite(_cs, LOW);
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high

    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 80a1162:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a1166:	8160      	strh	r0, [r4, #10]

    digitalWrite(_cs, HIGH);
 80a1168:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a116c:	b280      	uxth	r0, r0
 80a116e:	f001 faf8 	bl	80a2762 <digitalWrite>
    if (_sck == -1)
    	endTransaction();

  }
  #endif
  uint8_t range = getRange();
 80a1172:	4620      	mov	r0, r4
 80a1174:	f7ff ff0c 	bl	80a0f90 <_ZN15Adafruit_LIS3DH8getRangeEv>
  uint16_t divider = 1;
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
 80a1178:	2803      	cmp	r0, #3
 80a117a:	d009      	beq.n	80a1190 <_ZN15Adafruit_LIS3DH4readEv+0x12c>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
 80a117c:	2802      	cmp	r0, #2
 80a117e:	d00a      	beq.n	80a1196 <_ZN15Adafruit_LIS3DH4readEv+0x132>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
 80a1180:	2801      	cmp	r0, #1
 80a1182:	d00b      	beq.n	80a119c <_ZN15Adafruit_LIS3DH4readEv+0x138>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
 80a1184:	2800      	cmp	r0, #0
 80a1186:	f643 70fc 	movw	r0, #16380	; 0x3ffc
 80a118a:	bf18      	it	ne
 80a118c:	2001      	movne	r0, #1
 80a118e:	e007      	b.n	80a11a0 <_ZN15Adafruit_LIS3DH4readEv+0x13c>

  }
  #endif
  uint8_t range = getRange();
  uint16_t divider = 1;
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
 80a1190:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80a1194:	e004      	b.n	80a11a0 <_ZN15Adafruit_LIS3DH4readEv+0x13c>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
 80a1196:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80a119a:	e001      	b.n	80a11a0 <_ZN15Adafruit_LIS3DH4readEv+0x13c>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
 80a119c:	f641 70fe 	movw	r0, #8190	; 0x1ffe
  if (range == LIS3DH_RANGE_2_G) divider = 16380;

  x_g = (float)x / divider;
 80a11a0:	f002 fbf4 	bl	80a398c <__aeabi_i2f>
 80a11a4:	4605      	mov	r5, r0
 80a11a6:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 80a11aa:	f002 fbef 	bl	80a398c <__aeabi_i2f>
 80a11ae:	4629      	mov	r1, r5
 80a11b0:	f002 fcf4 	bl	80a3b9c <__aeabi_fdiv>
 80a11b4:	60e0      	str	r0, [r4, #12]
  y_g = (float)y / divider;
 80a11b6:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 80a11ba:	f002 fbe7 	bl	80a398c <__aeabi_i2f>
 80a11be:	4629      	mov	r1, r5
 80a11c0:	f002 fcec 	bl	80a3b9c <__aeabi_fdiv>
 80a11c4:	6120      	str	r0, [r4, #16]
  z_g = (float)z / divider;
 80a11c6:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 80a11ca:	f002 fbdf 	bl	80a398c <__aeabi_i2f>
 80a11ce:	4629      	mov	r1, r5
 80a11d0:	f002 fce4 	bl	80a3b9c <__aeabi_fdiv>
 80a11d4:	6160      	str	r0, [r4, #20]
 80a11d6:	bd38      	pop	{r3, r4, r5, pc}

080a11d8 <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
/**************************************************************************/
/*!
    @brief  Gets the most recent sensor event
*/
/**************************************************************************/
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
 80a11d8:	b570      	push	{r4, r5, r6, lr}
 80a11da:	460c      	mov	r4, r1
 80a11dc:	4605      	mov	r5, r0
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 80a11de:	2624      	movs	r6, #36	; 0x24
 80a11e0:	4632      	mov	r2, r6
 80a11e2:	2100      	movs	r1, #0
 80a11e4:	4620      	mov	r0, r4
 80a11e6:	f002 fe5a 	bl	80a3e9e <memset>

  event->version   = sizeof(sensors_event_t);
 80a11ea:	6026      	str	r6, [r4, #0]
  event->sensor_id = _sensorID;
 80a11ec:	69ab      	ldr	r3, [r5, #24]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
  event->timestamp = 0;

  read();
 80a11ee:	4628      	mov	r0, r5
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));

  event->version   = sizeof(sensors_event_t);
  event->sensor_id = _sensorID;
 80a11f0:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
 80a11f2:	2301      	movs	r3, #1
 80a11f4:	60a3      	str	r3, [r4, #8]
  event->timestamp = 0;
 80a11f6:	2300      	movs	r3, #0
 80a11f8:	6123      	str	r3, [r4, #16]

  read();
 80a11fa:	f7ff ff33 	bl	80a1064 <_ZN15Adafruit_LIS3DH4readEv>

  event->acceleration.x = x_g;
 80a11fe:	68eb      	ldr	r3, [r5, #12]
 80a1200:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
 80a1202:	692b      	ldr	r3, [r5, #16]
 80a1204:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
 80a1206:	696b      	ldr	r3, [r5, #20]
 80a1208:	61e3      	str	r3, [r4, #28]
}
 80a120a:	bd70      	pop	{r4, r5, r6, pc}

080a120c <_GLOBAL__sub_I__ZN15Adafruit_LIS3DHC2Ev>:
 80a120c:	f000 b800 	b.w	80a1210 <HAL_Pin_Map>

080a1210 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1210:	b508      	push	{r3, lr}
 80a1212:	4b02      	ldr	r3, [pc, #8]	; (80a121c <HAL_Pin_Map+0xc>)
 80a1214:	681b      	ldr	r3, [r3, #0]
 80a1216:	681b      	ldr	r3, [r3, #0]
 80a1218:	9301      	str	r3, [sp, #4]
 80a121a:	bd08      	pop	{r3, pc}
 80a121c:	080601b0 	.word	0x080601b0

080a1220 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1220:	b508      	push	{r3, lr}
 80a1222:	4b02      	ldr	r3, [pc, #8]	; (80a122c <HAL_Pin_Mode+0xc>)
 80a1224:	681b      	ldr	r3, [r3, #0]
 80a1226:	689b      	ldr	r3, [r3, #8]
 80a1228:	9301      	str	r3, [sp, #4]
 80a122a:	bd08      	pop	{r3, pc}
 80a122c:	080601b0 	.word	0x080601b0

080a1230 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1230:	b508      	push	{r3, lr}
 80a1232:	4b02      	ldr	r3, [pc, #8]	; (80a123c <HAL_Get_Pin_Mode+0xc>)
 80a1234:	681b      	ldr	r3, [r3, #0]
 80a1236:	68db      	ldr	r3, [r3, #12]
 80a1238:	9301      	str	r3, [sp, #4]
 80a123a:	bd08      	pop	{r3, pc}
 80a123c:	080601b0 	.word	0x080601b0

080a1240 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1240:	b508      	push	{r3, lr}
 80a1242:	4b02      	ldr	r3, [pc, #8]	; (80a124c <HAL_GPIO_Write+0xc>)
 80a1244:	681b      	ldr	r3, [r3, #0]
 80a1246:	691b      	ldr	r3, [r3, #16]
 80a1248:	9301      	str	r3, [sp, #4]
 80a124a:	bd08      	pop	{r3, pc}
 80a124c:	080601b0 	.word	0x080601b0

080a1250 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a1250:	b508      	push	{r3, lr}
 80a1252:	4b02      	ldr	r3, [pc, #8]	; (80a125c <HAL_GPIO_Read+0xc>)
 80a1254:	681b      	ldr	r3, [r3, #0]
 80a1256:	695b      	ldr	r3, [r3, #20]
 80a1258:	9301      	str	r3, [sp, #4]
 80a125a:	bd08      	pop	{r3, pc}
 80a125c:	080601b0 	.word	0x080601b0

080a1260 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a1260:	b508      	push	{r3, lr}
 80a1262:	4b02      	ldr	r3, [pc, #8]	; (80a126c <HAL_SPI_Begin+0xc>)
 80a1264:	681b      	ldr	r3, [r3, #0]
 80a1266:	681b      	ldr	r3, [r3, #0]
 80a1268:	9301      	str	r3, [sp, #4]
 80a126a:	bd08      	pop	{r3, pc}
 80a126c:	080601b4 	.word	0x080601b4

080a1270 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a1270:	b508      	push	{r3, lr}
 80a1272:	4b02      	ldr	r3, [pc, #8]	; (80a127c <HAL_SPI_Set_Bit_Order+0xc>)
 80a1274:	681b      	ldr	r3, [r3, #0]
 80a1276:	689b      	ldr	r3, [r3, #8]
 80a1278:	9301      	str	r3, [sp, #4]
 80a127a:	bd08      	pop	{r3, pc}
 80a127c:	080601b4 	.word	0x080601b4

080a1280 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a1280:	b508      	push	{r3, lr}
 80a1282:	4b02      	ldr	r3, [pc, #8]	; (80a128c <HAL_SPI_Set_Data_Mode+0xc>)
 80a1284:	681b      	ldr	r3, [r3, #0]
 80a1286:	68db      	ldr	r3, [r3, #12]
 80a1288:	9301      	str	r3, [sp, #4]
 80a128a:	bd08      	pop	{r3, pc}
 80a128c:	080601b4 	.word	0x080601b4

080a1290 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a1290:	b508      	push	{r3, lr}
 80a1292:	4b02      	ldr	r3, [pc, #8]	; (80a129c <HAL_SPI_Set_Clock_Divider+0xc>)
 80a1294:	681b      	ldr	r3, [r3, #0]
 80a1296:	691b      	ldr	r3, [r3, #16]
 80a1298:	9301      	str	r3, [sp, #4]
 80a129a:	bd08      	pop	{r3, pc}
 80a129c:	080601b4 	.word	0x080601b4

080a12a0 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a12a0:	b508      	push	{r3, lr}
 80a12a2:	4b02      	ldr	r3, [pc, #8]	; (80a12ac <HAL_SPI_Send_Receive_Data+0xc>)
 80a12a4:	681b      	ldr	r3, [r3, #0]
 80a12a6:	695b      	ldr	r3, [r3, #20]
 80a12a8:	9301      	str	r3, [sp, #4]
 80a12aa:	bd08      	pop	{r3, pc}
 80a12ac:	080601b4 	.word	0x080601b4

080a12b0 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a12b0:	b508      	push	{r3, lr}
 80a12b2:	4b02      	ldr	r3, [pc, #8]	; (80a12bc <HAL_SPI_Init+0xc>)
 80a12b4:	681b      	ldr	r3, [r3, #0]
 80a12b6:	69db      	ldr	r3, [r3, #28]
 80a12b8:	9301      	str	r3, [sp, #4]
 80a12ba:	bd08      	pop	{r3, pc}
 80a12bc:	080601b4 	.word	0x080601b4

080a12c0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a12c0:	b508      	push	{r3, lr}
 80a12c2:	4b02      	ldr	r3, [pc, #8]	; (80a12cc <HAL_SPI_Is_Enabled+0xc>)
 80a12c4:	681b      	ldr	r3, [r3, #0]
 80a12c6:	6a1b      	ldr	r3, [r3, #32]
 80a12c8:	9301      	str	r3, [sp, #4]
 80a12ca:	bd08      	pop	{r3, pc}
 80a12cc:	080601b4 	.word	0x080601b4

080a12d0 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a12d0:	b508      	push	{r3, lr}
 80a12d2:	4b02      	ldr	r3, [pc, #8]	; (80a12dc <HAL_SPI_Info+0xc>)
 80a12d4:	681b      	ldr	r3, [r3, #0]
 80a12d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a12d8:	9301      	str	r3, [sp, #4]
 80a12da:	bd08      	pop	{r3, pc}
 80a12dc:	080601b4 	.word	0x080601b4

080a12e0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a12e0:	b508      	push	{r3, lr}
 80a12e2:	4b02      	ldr	r3, [pc, #8]	; (80a12ec <HAL_RNG_GetRandomNumber+0xc>)
 80a12e4:	681b      	ldr	r3, [r3, #0]
 80a12e6:	685b      	ldr	r3, [r3, #4]
 80a12e8:	9301      	str	r3, [sp, #4]
 80a12ea:	bd08      	pop	{r3, pc}
 80a12ec:	0806019c 	.word	0x0806019c

080a12f0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a12f0:	b508      	push	{r3, lr}
 80a12f2:	4b02      	ldr	r3, [pc, #8]	; (80a12fc <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a12f4:	681b      	ldr	r3, [r3, #0]
 80a12f6:	695b      	ldr	r3, [r3, #20]
 80a12f8:	9301      	str	r3, [sp, #4]
 80a12fa:	bd08      	pop	{r3, pc}
 80a12fc:	0806019c 	.word	0x0806019c

080a1300 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a1300:	b508      	push	{r3, lr}
 80a1302:	4b02      	ldr	r3, [pc, #8]	; (80a130c <os_mutex_create+0xc>)
 80a1304:	681b      	ldr	r3, [r3, #0]
 80a1306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1308:	9301      	str	r3, [sp, #4]
 80a130a:	bd08      	pop	{r3, pc}
 80a130c:	080601d0 	.word	0x080601d0

080a1310 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1310:	b508      	push	{r3, lr}
 80a1312:	4b02      	ldr	r3, [pc, #8]	; (80a131c <HAL_USART_Init+0xc>)
 80a1314:	681b      	ldr	r3, [r3, #0]
 80a1316:	699b      	ldr	r3, [r3, #24]
 80a1318:	9301      	str	r3, [sp, #4]
 80a131a:	bd08      	pop	{r3, pc}
 80a131c:	080601c4 	.word	0x080601c4

080a1320 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1320:	b508      	push	{r3, lr}
 80a1322:	4b02      	ldr	r3, [pc, #8]	; (80a132c <HAL_USART_Write_Data+0xc>)
 80a1324:	681b      	ldr	r3, [r3, #0]
 80a1326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1328:	9301      	str	r3, [sp, #4]
 80a132a:	bd08      	pop	{r3, pc}
 80a132c:	080601c4 	.word	0x080601c4

080a1330 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1330:	b508      	push	{r3, lr}
 80a1332:	4b02      	ldr	r3, [pc, #8]	; (80a133c <HAL_USART_Available_Data+0xc>)
 80a1334:	681b      	ldr	r3, [r3, #0]
 80a1336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1338:	9301      	str	r3, [sp, #4]
 80a133a:	bd08      	pop	{r3, pc}
 80a133c:	080601c4 	.word	0x080601c4

080a1340 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1340:	b508      	push	{r3, lr}
 80a1342:	4b02      	ldr	r3, [pc, #8]	; (80a134c <HAL_USART_Read_Data+0xc>)
 80a1344:	681b      	ldr	r3, [r3, #0]
 80a1346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1348:	9301      	str	r3, [sp, #4]
 80a134a:	bd08      	pop	{r3, pc}
 80a134c:	080601c4 	.word	0x080601c4

080a1350 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1350:	b508      	push	{r3, lr}
 80a1352:	4b02      	ldr	r3, [pc, #8]	; (80a135c <HAL_USART_Peek_Data+0xc>)
 80a1354:	681b      	ldr	r3, [r3, #0]
 80a1356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1358:	9301      	str	r3, [sp, #4]
 80a135a:	bd08      	pop	{r3, pc}
 80a135c:	080601c4 	.word	0x080601c4

080a1360 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1360:	b508      	push	{r3, lr}
 80a1362:	4b02      	ldr	r3, [pc, #8]	; (80a136c <HAL_USART_Flush_Data+0xc>)
 80a1364:	681b      	ldr	r3, [r3, #0]
 80a1366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1368:	9301      	str	r3, [sp, #4]
 80a136a:	bd08      	pop	{r3, pc}
 80a136c:	080601c4 	.word	0x080601c4

080a1370 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1370:	b508      	push	{r3, lr}
 80a1372:	4b02      	ldr	r3, [pc, #8]	; (80a137c <HAL_USART_Is_Enabled+0xc>)
 80a1374:	681b      	ldr	r3, [r3, #0]
 80a1376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1378:	9301      	str	r3, [sp, #4]
 80a137a:	bd08      	pop	{r3, pc}
 80a137c:	080601c4 	.word	0x080601c4

080a1380 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1380:	b508      	push	{r3, lr}
 80a1382:	4b02      	ldr	r3, [pc, #8]	; (80a138c <HAL_USART_Available_Data_For_Write+0xc>)
 80a1384:	681b      	ldr	r3, [r3, #0]
 80a1386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1388:	9301      	str	r3, [sp, #4]
 80a138a:	bd08      	pop	{r3, pc}
 80a138c:	080601c4 	.word	0x080601c4

080a1390 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80a1390:	b508      	push	{r3, lr}
 80a1392:	4b02      	ldr	r3, [pc, #8]	; (80a139c <HAL_USART_BeginConfig+0xc>)
 80a1394:	681b      	ldr	r3, [r3, #0]
 80a1396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1398:	9301      	str	r3, [sp, #4]
 80a139a:	bd08      	pop	{r3, pc}
 80a139c:	080601c4 	.word	0x080601c4

080a13a0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a13a0:	b508      	push	{r3, lr}
 80a13a2:	4b02      	ldr	r3, [pc, #8]	; (80a13ac <HAL_I2C_Begin+0xc>)
 80a13a4:	681b      	ldr	r3, [r3, #0]
 80a13a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a13a8:	9301      	str	r3, [sp, #4]
 80a13aa:	bd08      	pop	{r3, pc}
 80a13ac:	080601ac 	.word	0x080601ac

080a13b0 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a13b0:	b508      	push	{r3, lr}
 80a13b2:	4b02      	ldr	r3, [pc, #8]	; (80a13bc <HAL_I2C_Request_Data+0xc>)
 80a13b4:	681b      	ldr	r3, [r3, #0]
 80a13b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a13b8:	9301      	str	r3, [sp, #4]
 80a13ba:	bd08      	pop	{r3, pc}
 80a13bc:	080601ac 	.word	0x080601ac

080a13c0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a13c0:	b508      	push	{r3, lr}
 80a13c2:	4b02      	ldr	r3, [pc, #8]	; (80a13cc <HAL_I2C_Begin_Transmission+0xc>)
 80a13c4:	681b      	ldr	r3, [r3, #0]
 80a13c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a13c8:	9301      	str	r3, [sp, #4]
 80a13ca:	bd08      	pop	{r3, pc}
 80a13cc:	080601ac 	.word	0x080601ac

080a13d0 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a13d0:	b508      	push	{r3, lr}
 80a13d2:	4b02      	ldr	r3, [pc, #8]	; (80a13dc <HAL_I2C_End_Transmission+0xc>)
 80a13d4:	681b      	ldr	r3, [r3, #0]
 80a13d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a13d8:	9301      	str	r3, [sp, #4]
 80a13da:	bd08      	pop	{r3, pc}
 80a13dc:	080601ac 	.word	0x080601ac

080a13e0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a13e0:	b508      	push	{r3, lr}
 80a13e2:	4b02      	ldr	r3, [pc, #8]	; (80a13ec <HAL_I2C_Write_Data+0xc>)
 80a13e4:	681b      	ldr	r3, [r3, #0]
 80a13e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a13e8:	9301      	str	r3, [sp, #4]
 80a13ea:	bd08      	pop	{r3, pc}
 80a13ec:	080601ac 	.word	0x080601ac

080a13f0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a13f0:	b508      	push	{r3, lr}
 80a13f2:	4b02      	ldr	r3, [pc, #8]	; (80a13fc <HAL_I2C_Available_Data+0xc>)
 80a13f4:	681b      	ldr	r3, [r3, #0]
 80a13f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a13f8:	9301      	str	r3, [sp, #4]
 80a13fa:	bd08      	pop	{r3, pc}
 80a13fc:	080601ac 	.word	0x080601ac

080a1400 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1400:	b508      	push	{r3, lr}
 80a1402:	4b02      	ldr	r3, [pc, #8]	; (80a140c <HAL_I2C_Read_Data+0xc>)
 80a1404:	681b      	ldr	r3, [r3, #0]
 80a1406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1408:	9301      	str	r3, [sp, #4]
 80a140a:	bd08      	pop	{r3, pc}
 80a140c:	080601ac 	.word	0x080601ac

080a1410 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1410:	b508      	push	{r3, lr}
 80a1412:	4b02      	ldr	r3, [pc, #8]	; (80a141c <HAL_I2C_Peek_Data+0xc>)
 80a1414:	681b      	ldr	r3, [r3, #0]
 80a1416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1418:	9301      	str	r3, [sp, #4]
 80a141a:	bd08      	pop	{r3, pc}
 80a141c:	080601ac 	.word	0x080601ac

080a1420 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1420:	b508      	push	{r3, lr}
 80a1422:	4b02      	ldr	r3, [pc, #8]	; (80a142c <HAL_I2C_Flush_Data+0xc>)
 80a1424:	681b      	ldr	r3, [r3, #0]
 80a1426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1428:	9301      	str	r3, [sp, #4]
 80a142a:	bd08      	pop	{r3, pc}
 80a142c:	080601ac 	.word	0x080601ac

080a1430 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1430:	b508      	push	{r3, lr}
 80a1432:	4b02      	ldr	r3, [pc, #8]	; (80a143c <HAL_I2C_Is_Enabled+0xc>)
 80a1434:	681b      	ldr	r3, [r3, #0]
 80a1436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1438:	9301      	str	r3, [sp, #4]
 80a143a:	bd08      	pop	{r3, pc}
 80a143c:	080601ac 	.word	0x080601ac

080a1440 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a1440:	b508      	push	{r3, lr}
 80a1442:	4b03      	ldr	r3, [pc, #12]	; (80a1450 <HAL_I2C_Init+0x10>)
 80a1444:	681b      	ldr	r3, [r3, #0]
 80a1446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a144a:	9301      	str	r3, [sp, #4]
 80a144c:	bd08      	pop	{r3, pc}
 80a144e:	0000      	.short	0x0000
 80a1450:	080601ac 	.word	0x080601ac

080a1454 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1454:	b508      	push	{r3, lr}
 80a1456:	4b02      	ldr	r3, [pc, #8]	; (80a1460 <HAL_USB_USART_Init+0xc>)
 80a1458:	681b      	ldr	r3, [r3, #0]
 80a145a:	681b      	ldr	r3, [r3, #0]
 80a145c:	9301      	str	r3, [sp, #4]
 80a145e:	bd08      	pop	{r3, pc}
 80a1460:	080601d8 	.word	0x080601d8

080a1464 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1464:	b508      	push	{r3, lr}
 80a1466:	4b02      	ldr	r3, [pc, #8]	; (80a1470 <HAL_USB_USART_Begin+0xc>)
 80a1468:	681b      	ldr	r3, [r3, #0]
 80a146a:	685b      	ldr	r3, [r3, #4]
 80a146c:	9301      	str	r3, [sp, #4]
 80a146e:	bd08      	pop	{r3, pc}
 80a1470:	080601d8 	.word	0x080601d8

080a1474 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1474:	b508      	push	{r3, lr}
 80a1476:	4b02      	ldr	r3, [pc, #8]	; (80a1480 <HAL_USB_USART_Available_Data+0xc>)
 80a1478:	681b      	ldr	r3, [r3, #0]
 80a147a:	691b      	ldr	r3, [r3, #16]
 80a147c:	9301      	str	r3, [sp, #4]
 80a147e:	bd08      	pop	{r3, pc}
 80a1480:	080601d8 	.word	0x080601d8

080a1484 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1484:	b508      	push	{r3, lr}
 80a1486:	4b02      	ldr	r3, [pc, #8]	; (80a1490 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1488:	681b      	ldr	r3, [r3, #0]
 80a148a:	695b      	ldr	r3, [r3, #20]
 80a148c:	9301      	str	r3, [sp, #4]
 80a148e:	bd08      	pop	{r3, pc}
 80a1490:	080601d8 	.word	0x080601d8

080a1494 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1494:	b508      	push	{r3, lr}
 80a1496:	4b02      	ldr	r3, [pc, #8]	; (80a14a0 <HAL_USB_USART_Receive_Data+0xc>)
 80a1498:	681b      	ldr	r3, [r3, #0]
 80a149a:	699b      	ldr	r3, [r3, #24]
 80a149c:	9301      	str	r3, [sp, #4]
 80a149e:	bd08      	pop	{r3, pc}
 80a14a0:	080601d8 	.word	0x080601d8

080a14a4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a14a4:	b508      	push	{r3, lr}
 80a14a6:	4b02      	ldr	r3, [pc, #8]	; (80a14b0 <HAL_USB_USART_Send_Data+0xc>)
 80a14a8:	681b      	ldr	r3, [r3, #0]
 80a14aa:	69db      	ldr	r3, [r3, #28]
 80a14ac:	9301      	str	r3, [sp, #4]
 80a14ae:	bd08      	pop	{r3, pc}
 80a14b0:	080601d8 	.word	0x080601d8

080a14b4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a14b4:	b508      	push	{r3, lr}
 80a14b6:	4b02      	ldr	r3, [pc, #8]	; (80a14c0 <HAL_USB_USART_Flush_Data+0xc>)
 80a14b8:	681b      	ldr	r3, [r3, #0]
 80a14ba:	6a1b      	ldr	r3, [r3, #32]
 80a14bc:	9301      	str	r3, [sp, #4]
 80a14be:	bd08      	pop	{r3, pc}
 80a14c0:	080601d8 	.word	0x080601d8

080a14c4 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a14c4:	b508      	push	{r3, lr}
 80a14c6:	4b02      	ldr	r3, [pc, #8]	; (80a14d0 <inet_gethostbyname+0xc>)
 80a14c8:	681b      	ldr	r3, [r3, #0]
 80a14ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a14cc:	9301      	str	r3, [sp, #4]
 80a14ce:	bd08      	pop	{r3, pc}
 80a14d0:	080601c0 	.word	0x080601c0

080a14d4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a14d4:	b508      	push	{r3, lr}
 80a14d6:	4b02      	ldr	r3, [pc, #8]	; (80a14e0 <set_system_mode+0xc>)
 80a14d8:	681b      	ldr	r3, [r3, #0]
 80a14da:	685b      	ldr	r3, [r3, #4]
 80a14dc:	9301      	str	r3, [sp, #4]
 80a14de:	bd08      	pop	{r3, pc}
 80a14e0:	080601a4 	.word	0x080601a4

080a14e4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a14e4:	b508      	push	{r3, lr}
 80a14e6:	4b02      	ldr	r3, [pc, #8]	; (80a14f0 <system_delay_ms+0xc>)
 80a14e8:	681b      	ldr	r3, [r3, #0]
 80a14ea:	695b      	ldr	r3, [r3, #20]
 80a14ec:	9301      	str	r3, [sp, #4]
 80a14ee:	bd08      	pop	{r3, pc}
 80a14f0:	080601a4 	.word	0x080601a4

080a14f4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a14f4:	b508      	push	{r3, lr}
 80a14f6:	4b02      	ldr	r3, [pc, #8]	; (80a1500 <application_thread_current+0xc>)
 80a14f8:	681b      	ldr	r3, [r3, #0]
 80a14fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a14fc:	9301      	str	r3, [sp, #4]
 80a14fe:	bd08      	pop	{r3, pc}
 80a1500:	080601a4 	.word	0x080601a4

080a1504 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a1504:	b508      	push	{r3, lr}
 80a1506:	4b02      	ldr	r3, [pc, #8]	; (80a1510 <application_thread_invoke+0xc>)
 80a1508:	681b      	ldr	r3, [r3, #0]
 80a150a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a150c:	9301      	str	r3, [sp, #4]
 80a150e:	bd08      	pop	{r3, pc}
 80a1510:	080601a4 	.word	0x080601a4

080a1514 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1514:	b508      	push	{r3, lr}
 80a1516:	4b03      	ldr	r3, [pc, #12]	; (80a1524 <system_ctrl_set_app_request_handler+0x10>)
 80a1518:	681b      	ldr	r3, [r3, #0]
 80a151a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a151e:	9301      	str	r3, [sp, #4]
 80a1520:	bd08      	pop	{r3, pc}
 80a1522:	0000      	.short	0x0000
 80a1524:	080601a4 	.word	0x080601a4

080a1528 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1528:	b508      	push	{r3, lr}
 80a152a:	4b03      	ldr	r3, [pc, #12]	; (80a1538 <system_ctrl_set_result+0x10>)
 80a152c:	681b      	ldr	r3, [r3, #0]
 80a152e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1532:	9301      	str	r3, [sp, #4]
 80a1534:	bd08      	pop	{r3, pc}
 80a1536:	0000      	.short	0x0000
 80a1538:	080601a4 	.word	0x080601a4

080a153c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a153c:	b508      	push	{r3, lr}
 80a153e:	4b02      	ldr	r3, [pc, #8]	; (80a1548 <network_connect+0xc>)
 80a1540:	681b      	ldr	r3, [r3, #0]
 80a1542:	685b      	ldr	r3, [r3, #4]
 80a1544:	9301      	str	r3, [sp, #4]
 80a1546:	bd08      	pop	{r3, pc}
 80a1548:	080601c8 	.word	0x080601c8

080a154c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a154c:	b508      	push	{r3, lr}
 80a154e:	4b02      	ldr	r3, [pc, #8]	; (80a1558 <network_connecting+0xc>)
 80a1550:	681b      	ldr	r3, [r3, #0]
 80a1552:	689b      	ldr	r3, [r3, #8]
 80a1554:	9301      	str	r3, [sp, #4]
 80a1556:	bd08      	pop	{r3, pc}
 80a1558:	080601c8 	.word	0x080601c8

080a155c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a155c:	b508      	push	{r3, lr}
 80a155e:	4b02      	ldr	r3, [pc, #8]	; (80a1568 <network_disconnect+0xc>)
 80a1560:	681b      	ldr	r3, [r3, #0]
 80a1562:	68db      	ldr	r3, [r3, #12]
 80a1564:	9301      	str	r3, [sp, #4]
 80a1566:	bd08      	pop	{r3, pc}
 80a1568:	080601c8 	.word	0x080601c8

080a156c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a156c:	b508      	push	{r3, lr}
 80a156e:	4b02      	ldr	r3, [pc, #8]	; (80a1578 <network_ready+0xc>)
 80a1570:	681b      	ldr	r3, [r3, #0]
 80a1572:	691b      	ldr	r3, [r3, #16]
 80a1574:	9301      	str	r3, [sp, #4]
 80a1576:	bd08      	pop	{r3, pc}
 80a1578:	080601c8 	.word	0x080601c8

080a157c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a157c:	b508      	push	{r3, lr}
 80a157e:	4b02      	ldr	r3, [pc, #8]	; (80a1588 <network_on+0xc>)
 80a1580:	681b      	ldr	r3, [r3, #0]
 80a1582:	695b      	ldr	r3, [r3, #20]
 80a1584:	9301      	str	r3, [sp, #4]
 80a1586:	bd08      	pop	{r3, pc}
 80a1588:	080601c8 	.word	0x080601c8

080a158c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a158c:	b508      	push	{r3, lr}
 80a158e:	4b02      	ldr	r3, [pc, #8]	; (80a1598 <network_off+0xc>)
 80a1590:	681b      	ldr	r3, [r3, #0]
 80a1592:	699b      	ldr	r3, [r3, #24]
 80a1594:	9301      	str	r3, [sp, #4]
 80a1596:	bd08      	pop	{r3, pc}
 80a1598:	080601c8 	.word	0x080601c8

080a159c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a159c:	b508      	push	{r3, lr}
 80a159e:	4b02      	ldr	r3, [pc, #8]	; (80a15a8 <network_listen+0xc>)
 80a15a0:	681b      	ldr	r3, [r3, #0]
 80a15a2:	69db      	ldr	r3, [r3, #28]
 80a15a4:	9301      	str	r3, [sp, #4]
 80a15a6:	bd08      	pop	{r3, pc}
 80a15a8:	080601c8 	.word	0x080601c8

080a15ac <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a15ac:	b508      	push	{r3, lr}
 80a15ae:	4b02      	ldr	r3, [pc, #8]	; (80a15b8 <network_listening+0xc>)
 80a15b0:	681b      	ldr	r3, [r3, #0]
 80a15b2:	6a1b      	ldr	r3, [r3, #32]
 80a15b4:	9301      	str	r3, [sp, #4]
 80a15b6:	bd08      	pop	{r3, pc}
 80a15b8:	080601c8 	.word	0x080601c8

080a15bc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a15bc:	b508      	push	{r3, lr}
 80a15be:	4b02      	ldr	r3, [pc, #8]	; (80a15c8 <network_set_listen_timeout+0xc>)
 80a15c0:	681b      	ldr	r3, [r3, #0]
 80a15c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a15c4:	9301      	str	r3, [sp, #4]
 80a15c6:	bd08      	pop	{r3, pc}
 80a15c8:	080601c8 	.word	0x080601c8

080a15cc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a15cc:	b508      	push	{r3, lr}
 80a15ce:	4b02      	ldr	r3, [pc, #8]	; (80a15d8 <network_get_listen_timeout+0xc>)
 80a15d0:	681b      	ldr	r3, [r3, #0]
 80a15d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a15d4:	9301      	str	r3, [sp, #4]
 80a15d6:	bd08      	pop	{r3, pc}
 80a15d8:	080601c8 	.word	0x080601c8

080a15dc <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a15dc:	b508      	push	{r3, lr}
 80a15de:	4b02      	ldr	r3, [pc, #8]	; (80a15e8 <spark_cloud_flag_connected+0xc>)
 80a15e0:	681b      	ldr	r3, [r3, #0]
 80a15e2:	695b      	ldr	r3, [r3, #20]
 80a15e4:	9301      	str	r3, [sp, #4]
 80a15e6:	bd08      	pop	{r3, pc}
 80a15e8:	080601cc 	.word	0x080601cc

080a15ec <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a15ec:	b508      	push	{r3, lr}
 80a15ee:	4b02      	ldr	r3, [pc, #8]	; (80a15f8 <spark_send_event+0xc>)
 80a15f0:	681b      	ldr	r3, [r3, #0]
 80a15f2:	6a1b      	ldr	r3, [r3, #32]
 80a15f4:	9301      	str	r3, [sp, #4]
 80a15f6:	bd08      	pop	{r3, pc}
 80a15f8:	080601cc 	.word	0x080601cc

080a15fc <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80a15fc:	b508      	push	{r3, lr}
 80a15fe:	4b02      	ldr	r3, [pc, #8]	; (80a1608 <spark_subscribe+0xc>)
 80a1600:	681b      	ldr	r3, [r3, #0]
 80a1602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1604:	9301      	str	r3, [sp, #4]
 80a1606:	bd08      	pop	{r3, pc}
 80a1608:	080601cc 	.word	0x080601cc

080a160c <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 80a160c:	b508      	push	{r3, lr}
 80a160e:	4b02      	ldr	r3, [pc, #8]	; (80a1618 <spark_sync_time+0xc>)
 80a1610:	681b      	ldr	r3, [r3, #0]
 80a1612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1614:	9301      	str	r3, [sp, #4]
 80a1616:	bd08      	pop	{r3, pc}
 80a1618:	080601cc 	.word	0x080601cc

080a161c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a161c:	b508      	push	{r3, lr}
 80a161e:	4b02      	ldr	r3, [pc, #8]	; (80a1628 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1620:	681b      	ldr	r3, [r3, #0]
 80a1622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1624:	9301      	str	r3, [sp, #4]
 80a1626:	bd08      	pop	{r3, pc}
 80a1628:	080601cc 	.word	0x080601cc

080a162c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a162c:	b508      	push	{r3, lr}
 80a162e:	4b02      	ldr	r3, [pc, #8]	; (80a1638 <malloc+0xc>)
 80a1630:	681b      	ldr	r3, [r3, #0]
 80a1632:	681b      	ldr	r3, [r3, #0]
 80a1634:	9301      	str	r3, [sp, #4]
 80a1636:	bd08      	pop	{r3, pc}
 80a1638:	080601a0 	.word	0x080601a0

080a163c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a163c:	b508      	push	{r3, lr}
 80a163e:	4b02      	ldr	r3, [pc, #8]	; (80a1648 <free+0xc>)
 80a1640:	681b      	ldr	r3, [r3, #0]
 80a1642:	685b      	ldr	r3, [r3, #4]
 80a1644:	9301      	str	r3, [sp, #4]
 80a1646:	bd08      	pop	{r3, pc}
 80a1648:	080601a0 	.word	0x080601a0

080a164c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a164c:	b508      	push	{r3, lr}
 80a164e:	4b02      	ldr	r3, [pc, #8]	; (80a1658 <realloc+0xc>)
 80a1650:	681b      	ldr	r3, [r3, #0]
 80a1652:	689b      	ldr	r3, [r3, #8]
 80a1654:	9301      	str	r3, [sp, #4]
 80a1656:	bd08      	pop	{r3, pc}
 80a1658:	080601a0 	.word	0x080601a0

080a165c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a165c:	b508      	push	{r3, lr}
 80a165e:	4b02      	ldr	r3, [pc, #8]	; (80a1668 <vsnprintf+0xc>)
 80a1660:	681b      	ldr	r3, [r3, #0]
 80a1662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1664:	9301      	str	r3, [sp, #4]
 80a1666:	bd08      	pop	{r3, pc}
 80a1668:	080601a0 	.word	0x080601a0

080a166c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a166c:	b508      	push	{r3, lr}
 80a166e:	4b02      	ldr	r3, [pc, #8]	; (80a1678 <abort+0xc>)
 80a1670:	681b      	ldr	r3, [r3, #0]
 80a1672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1674:	9301      	str	r3, [sp, #4]
 80a1676:	bd08      	pop	{r3, pc}
 80a1678:	080601a0 	.word	0x080601a0

080a167c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a167c:	b508      	push	{r3, lr}
 80a167e:	4b02      	ldr	r3, [pc, #8]	; (80a1688 <_malloc_r+0xc>)
 80a1680:	681b      	ldr	r3, [r3, #0]
 80a1682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1684:	9301      	str	r3, [sp, #4]
 80a1686:	bd08      	pop	{r3, pc}
 80a1688:	080601a0 	.word	0x080601a0

080a168c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a168c:	b508      	push	{r3, lr}
 80a168e:	4b02      	ldr	r3, [pc, #8]	; (80a1698 <__errno+0xc>)
 80a1690:	681b      	ldr	r3, [r3, #0]
 80a1692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1694:	9301      	str	r3, [sp, #4]
 80a1696:	bd08      	pop	{r3, pc}
 80a1698:	080601a0 	.word	0x080601a0

080a169c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a169c:	4770      	bx	lr

080a169e <_ZN8SPIClassD0Ev>:
 80a169e:	b510      	push	{r4, lr}
 80a16a0:	4604      	mov	r4, r0
 80a16a2:	2110      	movs	r1, #16
 80a16a4:	f001 f8e9 	bl	80a287a <_ZdlPvj>
 80a16a8:	4620      	mov	r0, r4
 80a16aa:	bd10      	pop	{r4, pc}

080a16ac <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a16ac:	b570      	push	{r4, r5, r6, lr}
 80a16ae:	4604      	mov	r4, r0
 80a16b0:	460e      	mov	r6, r1
 80a16b2:	4b07      	ldr	r3, [pc, #28]	; (80a16d0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a16b4:	2500      	movs	r5, #0
 80a16b6:	6003      	str	r3, [r0, #0]
 80a16b8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a16bc:	f7ff fe20 	bl	80a1300 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a16c0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a16c2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a16c4:	f7ff fdf4 	bl	80a12b0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a16c8:	60a5      	str	r5, [r4, #8]
}
 80a16ca:	4620      	mov	r0, r4
 80a16cc:	bd70      	pop	{r4, r5, r6, pc}
 80a16ce:	bf00      	nop
 80a16d0:	080a5d70 	.word	0x080a5d70

080a16d4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a16d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a16d8:	7900      	ldrb	r0, [r0, #4]
 80a16da:	f7ff bdc1 	b.w	80a1260 <HAL_SPI_Begin>

080a16de <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a16de:	7900      	ldrb	r0, [r0, #4]
 80a16e0:	f7ff bdc6 	b.w	80a1270 <HAL_SPI_Set_Bit_Order>

080a16e4 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 80a16e4:	7900      	ldrb	r0, [r0, #4]
 80a16e6:	f7ff bdcb 	b.w	80a1280 <HAL_SPI_Set_Data_Mode>
	...

080a16ec <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a16ec:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a16ee:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a16f0:	6018      	str	r0, [r3, #0]
 80a16f2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a16f4:	6818      	ldr	r0, [r3, #0]
 80a16f6:	b2e5      	uxtb	r5, r4
 80a16f8:	4288      	cmp	r0, r1
 80a16fa:	d906      	bls.n	80a170a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a16fc:	3401      	adds	r4, #1
 80a16fe:	2c08      	cmp	r4, #8
 80a1700:	d002      	beq.n	80a1708 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a1702:	0840      	lsrs	r0, r0, #1
 80a1704:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a1706:	e7f5      	b.n	80a16f4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a1708:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a170a:	4b02      	ldr	r3, [pc, #8]	; (80a1714 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a170c:	5d5b      	ldrb	r3, [r3, r5]
 80a170e:	7013      	strb	r3, [r2, #0]
 80a1710:	bd30      	pop	{r4, r5, pc}
 80a1712:	bf00      	nop
 80a1714:	080a5d78 	.word	0x080a5d78

080a1718 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a1718:	b570      	push	{r4, r5, r6, lr}
 80a171a:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 80a171c:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a1720:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 80a1722:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a1724:	2214      	movs	r2, #20
 80a1726:	2100      	movs	r1, #0
 80a1728:	a803      	add	r0, sp, #12
 80a172a:	f002 fbb8 	bl	80a3e9e <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a172e:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a1730:	a903      	add	r1, sp, #12
 80a1732:	4630      	mov	r0, r6
 80a1734:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a1736:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 80a173a:	f7ff fdc9 	bl	80a12d0 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80a173e:	ab02      	add	r3, sp, #8
 80a1740:	f10d 0207 	add.w	r2, sp, #7
 80a1744:	4629      	mov	r1, r5
 80a1746:	9804      	ldr	r0, [sp, #16]
 80a1748:	f7ff ffd0 	bl	80a16ec <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a174c:	7920      	ldrb	r0, [r4, #4]
 80a174e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a1752:	f7ff fd9d 	bl	80a1290 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80a1756:	9802      	ldr	r0, [sp, #8]
 80a1758:	b008      	add	sp, #32
 80a175a:	bd70      	pop	{r4, r5, r6, pc}

080a175c <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 80a175c:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a175e:	7900      	ldrb	r0, [r0, #4]
 80a1760:	f7ff fd9e 	bl	80a12a0 <HAL_SPI_Send_Receive_Data>
}
 80a1764:	b2c0      	uxtb	r0, r0
 80a1766:	bd08      	pop	{r3, pc}

080a1768 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1768:	7900      	ldrb	r0, [r0, #4]
 80a176a:	f7ff bda9 	b.w	80a12c0 <HAL_SPI_Is_Enabled>
	...

080a1770 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1770:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a1774:	4b03      	ldr	r3, [pc, #12]	; (80a1784 <_GLOBAL__sub_I_System+0x14>)
 80a1776:	2000      	movs	r0, #0
 80a1778:	7018      	strb	r0, [r3, #0]
 80a177a:	8058      	strh	r0, [r3, #2]
 80a177c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a177e:	f7ff bea9 	b.w	80a14d4 <set_system_mode>
 80a1782:	bf00      	nop
 80a1784:	20000244 	.word	0x20000244

080a1788 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1788:	b510      	push	{r4, lr}
 80a178a:	4604      	mov	r4, r0
{
	free(buffer);
 80a178c:	6800      	ldr	r0, [r0, #0]
 80a178e:	f7ff ff55 	bl	80a163c <free>
}
 80a1792:	4620      	mov	r0, r4
 80a1794:	bd10      	pop	{r4, pc}

080a1796 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1796:	b510      	push	{r4, lr}
 80a1798:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a179a:	6800      	ldr	r0, [r0, #0]
 80a179c:	b108      	cbz	r0, 80a17a2 <_ZN6String10invalidateEv+0xc>
 80a179e:	f7ff ff4d 	bl	80a163c <free>
	buffer = NULL;
 80a17a2:	2300      	movs	r3, #0
 80a17a4:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a17a6:	60a3      	str	r3, [r4, #8]
 80a17a8:	6063      	str	r3, [r4, #4]
 80a17aa:	bd10      	pop	{r4, pc}

080a17ac <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a17ac:	b538      	push	{r3, r4, r5, lr}
 80a17ae:	4604      	mov	r4, r0
 80a17b0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a17b2:	6800      	ldr	r0, [r0, #0]
 80a17b4:	3101      	adds	r1, #1
 80a17b6:	f7ff ff49 	bl	80a164c <realloc>
	if (newbuffer) {
 80a17ba:	b110      	cbz	r0, 80a17c2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a17bc:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a17c0:	2001      	movs	r0, #1
	}
	return 0;
}
 80a17c2:	bd38      	pop	{r3, r4, r5, pc}

080a17c4 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a17c4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a17c6:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a17c8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a17ca:	b113      	cbz	r3, 80a17d2 <_ZN6String7reserveEj+0xe>
 80a17cc:	6843      	ldr	r3, [r0, #4]
 80a17ce:	428b      	cmp	r3, r1
 80a17d0:	d207      	bcs.n	80a17e2 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a17d2:	4620      	mov	r0, r4
 80a17d4:	f7ff ffea 	bl	80a17ac <_ZN6String12changeBufferEj>
 80a17d8:	b120      	cbz	r0, 80a17e4 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a17da:	68a3      	ldr	r3, [r4, #8]
 80a17dc:	b90b      	cbnz	r3, 80a17e2 <_ZN6String7reserveEj+0x1e>
 80a17de:	6822      	ldr	r2, [r4, #0]
 80a17e0:	7013      	strb	r3, [r2, #0]
 80a17e2:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a17e4:	bd10      	pop	{r4, pc}

080a17e6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a17e6:	b570      	push	{r4, r5, r6, lr}
 80a17e8:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a17ea:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a17ec:	4604      	mov	r4, r0
 80a17ee:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a17f0:	f7ff ffe8 	bl	80a17c4 <_ZN6String7reserveEj>
 80a17f4:	b918      	cbnz	r0, 80a17fe <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a17f6:	4620      	mov	r0, r4
 80a17f8:	f7ff ffcd 	bl	80a1796 <_ZN6String10invalidateEv>
		return *this;
 80a17fc:	e009      	b.n	80a1812 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a17fe:	462a      	mov	r2, r5
 80a1800:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a1802:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1804:	6820      	ldr	r0, [r4, #0]
 80a1806:	f002 fb3f 	bl	80a3e88 <memcpy>
	buffer[len] = 0;
 80a180a:	6822      	ldr	r2, [r4, #0]
 80a180c:	68a3      	ldr	r3, [r4, #8]
 80a180e:	2100      	movs	r1, #0
 80a1810:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1812:	4620      	mov	r0, r4
 80a1814:	bd70      	pop	{r4, r5, r6, pc}

080a1816 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1816:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1818:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a181a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a181c:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a181e:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1820:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1822:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1824:	460d      	mov	r5, r1
 80a1826:	b139      	cbz	r1, 80a1838 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a1828:	4608      	mov	r0, r1
 80a182a:	f002 fb9a 	bl	80a3f62 <strlen>
 80a182e:	4629      	mov	r1, r5
 80a1830:	4602      	mov	r2, r0
 80a1832:	4620      	mov	r0, r4
 80a1834:	f7ff ffd7 	bl	80a17e6 <_ZN6String4copyEPKcj>
}
 80a1838:	4620      	mov	r0, r4
 80a183a:	bd38      	pop	{r3, r4, r5, pc}

080a183c <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a183c:	b538      	push	{r3, r4, r5, lr}
 80a183e:	4605      	mov	r5, r0
	if (buffer) {
 80a1840:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a1842:	460c      	mov	r4, r1
	if (buffer) {
 80a1844:	b160      	cbz	r0, 80a1860 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 80a1846:	686a      	ldr	r2, [r5, #4]
 80a1848:	688b      	ldr	r3, [r1, #8]
 80a184a:	429a      	cmp	r2, r3
 80a184c:	d306      	bcc.n	80a185c <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 80a184e:	6809      	ldr	r1, [r1, #0]
 80a1850:	f002 fb64 	bl	80a3f1c <strcpy>
			len = rhs.len;
 80a1854:	68a3      	ldr	r3, [r4, #8]
 80a1856:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a1858:	2300      	movs	r3, #0
 80a185a:	e00a      	b.n	80a1872 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 80a185c:	f7ff feee 	bl	80a163c <free>
		}
	}
	buffer = rhs.buffer;
 80a1860:	6823      	ldr	r3, [r4, #0]
 80a1862:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a1864:	6863      	ldr	r3, [r4, #4]
 80a1866:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a1868:	68a3      	ldr	r3, [r4, #8]
 80a186a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a186c:	2300      	movs	r3, #0
 80a186e:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 80a1870:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 80a1872:	60a3      	str	r3, [r4, #8]
 80a1874:	bd38      	pop	{r3, r4, r5, pc}

080a1876 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a1876:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 80a1878:	b510      	push	{r4, lr}
 80a187a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a187c:	d001      	beq.n	80a1882 <_ZN6StringaSEOS_+0xc>
 80a187e:	f7ff ffdd 	bl	80a183c <_ZN6String4moveERS_>
	return *this;
}
 80a1882:	4620      	mov	r0, r4
 80a1884:	bd10      	pop	{r4, pc}
	...

080a1888 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 80a1888:	b40e      	push	{r1, r2, r3}
 80a188a:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 80a188c:	ac09      	add	r4, sp, #36	; 0x24
 80a188e:	f854 7b04 	ldr.w	r7, [r4], #4
 80a1892:	4605      	mov	r5, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a1894:	4623      	mov	r3, r4
 80a1896:	463a      	mov	r2, r7
 80a1898:	2105      	movs	r1, #5
 80a189a:	a802      	add	r0, sp, #8
}

String String::format(const char* fmt, ...)
{
    va_list marker;
    va_start(marker, fmt);
 80a189c:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a189e:	f7ff fedd 	bl	80a165c <vsnprintf>
 80a18a2:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 80a18a4:	490b      	ldr	r1, [pc, #44]	; (80a18d4 <_ZN6String6formatEPKcz+0x4c>)
 80a18a6:	4628      	mov	r0, r5
 80a18a8:	f7ff ffb5 	bl	80a1816 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 80a18ac:	4631      	mov	r1, r6
 80a18ae:	4628      	mov	r0, r5
 80a18b0:	f7ff ff88 	bl	80a17c4 <_ZN6String7reserveEj>
    if (result.buffer) {
 80a18b4:	6828      	ldr	r0, [r5, #0]
 80a18b6:	b130      	cbz	r0, 80a18c6 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a18b8:	4623      	mov	r3, r4
 80a18ba:	463a      	mov	r2, r7
 80a18bc:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
 80a18be:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a18c0:	f7ff fecc 	bl	80a165c <vsnprintf>
        va_end(marker);
        result.len = n;
 80a18c4:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
 80a18c6:	4628      	mov	r0, r5
 80a18c8:	b004      	add	sp, #16
 80a18ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80a18ce:	b003      	add	sp, #12
 80a18d0:	4770      	bx	lr
 80a18d2:	bf00      	nop
 80a18d4:	080a5e2a 	.word	0x080a5e2a

080a18d8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a18d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a18da:	4606      	mov	r6, r0
 80a18dc:	460d      	mov	r5, r1
 80a18de:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a18e0:	2400      	movs	r4, #0
  while (size--) {
 80a18e2:	42bd      	cmp	r5, r7
 80a18e4:	d00c      	beq.n	80a1900 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a18e6:	6833      	ldr	r3, [r6, #0]
 80a18e8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a18ec:	689b      	ldr	r3, [r3, #8]
 80a18ee:	4630      	mov	r0, r6
 80a18f0:	4798      	blx	r3
     if (chunk>=0)
 80a18f2:	2800      	cmp	r0, #0
 80a18f4:	db01      	blt.n	80a18fa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a18f6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a18f8:	e7f3      	b.n	80a18e2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a18fa:	2c00      	cmp	r4, #0
 80a18fc:	bf08      	it	eq
 80a18fe:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1900:	4620      	mov	r0, r4
 80a1902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1904 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1904:	b570      	push	{r4, r5, r6, lr}
 80a1906:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1908:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a190a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a190c:	b149      	cbz	r1, 80a1922 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a190e:	f002 fb28 	bl	80a3f62 <strlen>
 80a1912:	682b      	ldr	r3, [r5, #0]
 80a1914:	4602      	mov	r2, r0
 80a1916:	4621      	mov	r1, r4
 80a1918:	4628      	mov	r0, r5
    }
 80a191a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a191e:	68db      	ldr	r3, [r3, #12]
 80a1920:	4718      	bx	r3
    }
 80a1922:	bd70      	pop	{r4, r5, r6, pc}

080a1924 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1924:	6803      	ldr	r3, [r0, #0]
 80a1926:	689b      	ldr	r3, [r3, #8]
 80a1928:	4718      	bx	r3

080a192a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a192a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a192c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a192e:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1930:	f7ff fff8 	bl	80a1924 <_ZN5Print5printEc>
  n += print('\n');
 80a1934:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1936:	4604      	mov	r4, r0
  n += print('\n');
 80a1938:	4628      	mov	r0, r5
 80a193a:	f7ff fff3 	bl	80a1924 <_ZN5Print5printEc>
  return n;
}
 80a193e:	4420      	add	r0, r4
 80a1940:	bd38      	pop	{r3, r4, r5, pc}

080a1942 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1942:	b538      	push	{r3, r4, r5, lr}
 80a1944:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1946:	f7ff ffdd 	bl	80a1904 <_ZN5Print5writeEPKc>
 80a194a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a194c:	4628      	mov	r0, r5
 80a194e:	f7ff ffec 	bl	80a192a <_ZN5Print7printlnEv>
  return n;
}
 80a1952:	4420      	add	r0, r4
 80a1954:	bd38      	pop	{r3, r4, r5, pc}

080a1956 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1956:	2a01      	cmp	r2, #1
 80a1958:	bf98      	it	ls
 80a195a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a195c:	b530      	push	{r4, r5, lr}
 80a195e:	460b      	mov	r3, r1
 80a1960:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1962:	2100      	movs	r1, #0
 80a1964:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1968:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a196c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1970:	fb05 3312 	mls	r3, r5, r2, r3
 80a1974:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1976:	2b09      	cmp	r3, #9
 80a1978:	bf94      	ite	ls
 80a197a:	3330      	addls	r3, #48	; 0x30
 80a197c:	3337      	addhi	r3, #55	; 0x37
 80a197e:	b2db      	uxtb	r3, r3
 80a1980:	4621      	mov	r1, r4
 80a1982:	f804 3901 	strb.w	r3, [r4], #-1
 80a1986:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1988:	2d00      	cmp	r5, #0
 80a198a:	d1ef      	bne.n	80a196c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a198c:	f7ff ffba 	bl	80a1904 <_ZN5Print5writeEPKc>
}
 80a1990:	b00b      	add	sp, #44	; 0x2c
 80a1992:	bd30      	pop	{r4, r5, pc}

080a1994 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1994:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1996:	b922      	cbnz	r2, 80a19a2 <_ZN5Print5printEmi+0xe>
 80a1998:	6803      	ldr	r3, [r0, #0]
 80a199a:	b2c9      	uxtb	r1, r1
 80a199c:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a199e:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a19a0:	4718      	bx	r3
  else return printNumber(n, base);
 80a19a2:	b2d2      	uxtb	r2, r2
}
 80a19a4:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a19a6:	f7ff bfd6 	b.w	80a1956 <_ZN5Print11printNumberEmh>

080a19aa <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a19aa:	f7ff bff3 	b.w	80a1994 <_ZN5Print5printEmi>

080a19ae <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a19ae:	2300      	movs	r3, #0
 80a19b0:	461a      	mov	r2, r3
 80a19b2:	4619      	mov	r1, r3
 80a19b4:	6840      	ldr	r0, [r0, #4]
 80a19b6:	f7ff bde1 	b.w	80a157c <network_on>

080a19ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a19ba:	680b      	ldr	r3, [r1, #0]
 80a19bc:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a19be:	b113      	cbz	r3, 80a19c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a19c0:	685a      	ldr	r2, [r3, #4]
 80a19c2:	3201      	adds	r2, #1
 80a19c4:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a19c6:	4770      	bx	lr

080a19c8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a19c8:	4a01      	ldr	r2, [pc, #4]	; (80a19d0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a19ca:	4b02      	ldr	r3, [pc, #8]	; (80a19d4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a19cc:	601a      	str	r2, [r3, #0]
 80a19ce:	4770      	bx	lr
 80a19d0:	080a5df6 	.word	0x080a5df6
 80a19d4:	2000024c 	.word	0x2000024c

080a19d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a19d8:	4b02      	ldr	r3, [pc, #8]	; (80a19e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a19da:	681a      	ldr	r2, [r3, #0]
 80a19dc:	4b02      	ldr	r3, [pc, #8]	; (80a19e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a19de:	601a      	str	r2, [r3, #0]
 80a19e0:	4770      	bx	lr
 80a19e2:	bf00      	nop
 80a19e4:	20000010 	.word	0x20000010
 80a19e8:	20000250 	.word	0x20000250

080a19ec <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a19ec:	2100      	movs	r1, #0
 80a19ee:	f7ff bd79 	b.w	80a14e4 <system_delay_ms>

080a19f2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a19f2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a19f4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a19f6:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a19f8:	b113      	cbz	r3, 80a1a00 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a19fa:	2203      	movs	r2, #3
 80a19fc:	4601      	mov	r1, r0
 80a19fe:	4798      	blx	r3
    }
 80a1a00:	4620      	mov	r0, r4
 80a1a02:	bd10      	pop	{r4, pc}

080a1a04 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1a04:	b510      	push	{r4, lr}
 80a1a06:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1a08:	f7ff fff3 	bl	80a19f2 <_ZNSt14_Function_baseD1Ev>
 80a1a0c:	4620      	mov	r0, r4
 80a1a0e:	bd10      	pop	{r4, pc}

080a1a10 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a1a10:	b513      	push	{r0, r1, r4, lr}
 80a1a12:	460b      	mov	r3, r1
 80a1a14:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1a16:	c803      	ldmia	r0, {r0, r1}
 80a1a18:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a1a1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a1a20:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a1a24:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a1a28:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a1a2c:	b002      	add	sp, #8
 80a1a2e:	bd10      	pop	{r4, pc}

080a1a30 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1a30:	4803      	ldr	r0, [pc, #12]	; (80a1a40 <_GLOBAL__sub_I_RGB+0x10>)
 80a1a32:	2300      	movs	r3, #0
 80a1a34:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1a36:	4a03      	ldr	r2, [pc, #12]	; (80a1a44 <_GLOBAL__sub_I_RGB+0x14>)
 80a1a38:	4903      	ldr	r1, [pc, #12]	; (80a1a48 <_GLOBAL__sub_I_RGB+0x18>)
 80a1a3a:	f000 bf19 	b.w	80a2870 <__aeabi_atexit>
 80a1a3e:	bf00      	nop
 80a1a40:	20000254 	.word	0x20000254
 80a1a44:	200000b8 	.word	0x200000b8
 80a1a48:	080a1a05 	.word	0x080a1a05

080a1a4c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1a4c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1a4e:	4b14      	ldr	r3, [pc, #80]	; (80a1aa0 <serialEventRun+0x54>)
 80a1a50:	b133      	cbz	r3, 80a1a60 <serialEventRun+0x14>
 80a1a52:	f000 fc2f 	bl	80a22b4 <_Z16_fetch_usbserialv>
 80a1a56:	6803      	ldr	r3, [r0, #0]
 80a1a58:	691b      	ldr	r3, [r3, #16]
 80a1a5a:	4798      	blx	r3
 80a1a5c:	2800      	cmp	r0, #0
 80a1a5e:	dc16      	bgt.n	80a1a8e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1a60:	4b10      	ldr	r3, [pc, #64]	; (80a1aa4 <serialEventRun+0x58>)
 80a1a62:	b133      	cbz	r3, 80a1a72 <serialEventRun+0x26>
 80a1a64:	f000 fcea 	bl	80a243c <_Z22__fetch_global_Serial1v>
 80a1a68:	6803      	ldr	r3, [r0, #0]
 80a1a6a:	691b      	ldr	r3, [r3, #16]
 80a1a6c:	4798      	blx	r3
 80a1a6e:	2800      	cmp	r0, #0
 80a1a70:	dc10      	bgt.n	80a1a94 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1a72:	4b0d      	ldr	r3, [pc, #52]	; (80a1aa8 <serialEventRun+0x5c>)
 80a1a74:	b10b      	cbz	r3, 80a1a7a <serialEventRun+0x2e>
 80a1a76:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1a7a:	4b0c      	ldr	r3, [pc, #48]	; (80a1aac <serialEventRun+0x60>)
 80a1a7c:	b17b      	cbz	r3, 80a1a9e <serialEventRun+0x52>
 80a1a7e:	f000 fc55 	bl	80a232c <_Z17_fetch_usbserial1v>
 80a1a82:	6803      	ldr	r3, [r0, #0]
 80a1a84:	691b      	ldr	r3, [r3, #16]
 80a1a86:	4798      	blx	r3
 80a1a88:	2800      	cmp	r0, #0
 80a1a8a:	dc06      	bgt.n	80a1a9a <serialEventRun+0x4e>
 80a1a8c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1a8e:	f3af 8000 	nop.w
 80a1a92:	e7e5      	b.n	80a1a60 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1a94:	f3af 8000 	nop.w
 80a1a98:	e7eb      	b.n	80a1a72 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1a9a:	f3af 8000 	nop.w
 80a1a9e:	bd08      	pop	{r3, pc}
	...

080a1ab0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1ab0:	b508      	push	{r3, lr}
	serialEventRun();
 80a1ab2:	f7ff ffcb 	bl	80a1a4c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1ab6:	f7ff fc1b 	bl	80a12f0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1aba:	4b01      	ldr	r3, [pc, #4]	; (80a1ac0 <_post_loop+0x10>)
 80a1abc:	6018      	str	r0, [r3, #0]
 80a1abe:	bd08      	pop	{r3, pc}
 80a1ac0:	200006f8 	.word	0x200006f8

080a1ac4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1ac4:	4802      	ldr	r0, [pc, #8]	; (80a1ad0 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1ac6:	4a03      	ldr	r2, [pc, #12]	; (80a1ad4 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1ac8:	4903      	ldr	r1, [pc, #12]	; (80a1ad8 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1aca:	1a12      	subs	r2, r2, r0
 80a1acc:	f002 b9dc 	b.w	80a3e88 <memcpy>
 80a1ad0:	40024000 	.word	0x40024000
 80a1ad4:	40024004 	.word	0x40024004
 80a1ad8:	080a62e0 	.word	0x080a62e0

080a1adc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1adc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1ade:	2300      	movs	r3, #0
 80a1ae0:	9300      	str	r3, [sp, #0]
 80a1ae2:	461a      	mov	r2, r3
 80a1ae4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1ae8:	f7ff fd1e 	bl	80a1528 <system_ctrl_set_result>
}
 80a1aec:	b003      	add	sp, #12
 80a1aee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1af4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a1af4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1af6:	8843      	ldrh	r3, [r0, #2]
 80a1af8:	2b0a      	cmp	r3, #10
 80a1afa:	d008      	beq.n	80a1b0e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1afc:	2b50      	cmp	r3, #80	; 0x50
 80a1afe:	d109      	bne.n	80a1b14 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1b00:	4b09      	ldr	r3, [pc, #36]	; (80a1b28 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1b02:	681b      	ldr	r3, [r3, #0]
 80a1b04:	b13b      	cbz	r3, 80a1b16 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a1b06:	b003      	add	sp, #12
 80a1b08:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1b0c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1b0e:	f7ff ffe5 	bl	80a1adc <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a1b12:	e006      	b.n	80a1b22 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1b14:	2300      	movs	r3, #0
 80a1b16:	9300      	str	r3, [sp, #0]
 80a1b18:	461a      	mov	r2, r3
 80a1b1a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1b1e:	f7ff fd03 	bl	80a1528 <system_ctrl_set_result>
        break;
    }
}
 80a1b22:	b003      	add	sp, #12
 80a1b24:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1b28:	20000264 	.word	0x20000264

080a1b2c <module_user_init_hook>:

void module_user_init_hook()
{
 80a1b2c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1b2e:	4c10      	ldr	r4, [pc, #64]	; (80a1b70 <module_user_init_hook+0x44>)
 80a1b30:	4d10      	ldr	r5, [pc, #64]	; (80a1b74 <module_user_init_hook+0x48>)
 80a1b32:	6823      	ldr	r3, [r4, #0]
 80a1b34:	42ab      	cmp	r3, r5
 80a1b36:	4b10      	ldr	r3, [pc, #64]	; (80a1b78 <module_user_init_hook+0x4c>)
 80a1b38:	bf0c      	ite	eq
 80a1b3a:	2201      	moveq	r2, #1
 80a1b3c:	2200      	movne	r2, #0
 80a1b3e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1b40:	d002      	beq.n	80a1b48 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1b42:	f7ff ffbf 	bl	80a1ac4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1b46:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1b48:	f7ff fbca 	bl	80a12e0 <HAL_RNG_GetRandomNumber>
 80a1b4c:	4604      	mov	r4, r0
    srand(seed);
 80a1b4e:	f002 f9af 	bl	80a3eb0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1b52:	4b0a      	ldr	r3, [pc, #40]	; (80a1b7c <module_user_init_hook+0x50>)
 80a1b54:	b113      	cbz	r3, 80a1b5c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a1b56:	4620      	mov	r0, r4
 80a1b58:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1b5c:	2100      	movs	r1, #0
 80a1b5e:	4807      	ldr	r0, [pc, #28]	; (80a1b7c <module_user_init_hook+0x50>)
 80a1b60:	f7ff fd5c 	bl	80a161c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1b64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1b68:	2100      	movs	r1, #0
 80a1b6a:	4805      	ldr	r0, [pc, #20]	; (80a1b80 <module_user_init_hook+0x54>)
 80a1b6c:	f7ff bcd2 	b.w	80a1514 <system_ctrl_set_app_request_handler>
 80a1b70:	40024000 	.word	0x40024000
 80a1b74:	9a271c1e 	.word	0x9a271c1e
 80a1b78:	20000268 	.word	0x20000268
 80a1b7c:	00000000 	.word	0x00000000
 80a1b80:	080a1af5 	.word	0x080a1af5

080a1b84 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1b84:	4770      	bx	lr

080a1b86 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a1b86:	2000      	movs	r0, #0
 80a1b88:	4770      	bx	lr

080a1b8a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1b8a:	b510      	push	{r4, lr}
 80a1b8c:	4604      	mov	r4, r0
 80a1b8e:	2110      	movs	r1, #16
 80a1b90:	f000 fe73 	bl	80a287a <_ZdlPvj>
 80a1b94:	4620      	mov	r0, r4
 80a1b96:	bd10      	pop	{r4, pc}

080a1b98 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a1b98:	b508      	push	{r3, lr}
      { delete this; }
 80a1b9a:	b108      	cbz	r0, 80a1ba0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a1b9c:	f7ff fff5 	bl	80a1b8a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a1ba0:	bd08      	pop	{r3, pc}

080a1ba2 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a1ba2:	2200      	movs	r2, #0
 80a1ba4:	6002      	str	r2, [r0, #0]
 80a1ba6:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a1baa:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a1bac:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1bae:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a1bb2:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1bb4:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1bb6:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a1bb8:	680c      	ldr	r4, [r1, #0]
 80a1bba:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1bbc:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a1bbe:	bd10      	pop	{r4, pc}

080a1bc0 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a1bc0:	b510      	push	{r4, lr}
 80a1bc2:	4604      	mov	r4, r0
    free((void*)msg_);
 80a1bc4:	6800      	ldr	r0, [r0, #0]
 80a1bc6:	f7ff fd39 	bl	80a163c <free>
}
 80a1bca:	4620      	mov	r0, r4
 80a1bcc:	bd10      	pop	{r4, pc}

080a1bce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a1bce:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a1bd0:	68c4      	ldr	r4, [r0, #12]
 80a1bd2:	b1f4      	cbz	r4, 80a1c12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a1bd4:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a1bd6:	2b02      	cmp	r3, #2
 80a1bd8:	d103      	bne.n	80a1be2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a1bda:	f104 000c 	add.w	r0, r4, #12
 80a1bde:	f7ff ffef 	bl	80a1bc0 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a1be2:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a1be4:	b135      	cbz	r5, 80a1bf4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1be6:	4628      	mov	r0, r5
 80a1be8:	f7ff ff03 	bl	80a19f2 <_ZNSt14_Function_baseD1Ev>
 80a1bec:	2110      	movs	r1, #16
 80a1bee:	4628      	mov	r0, r5
 80a1bf0:	f000 fe43 	bl	80a287a <_ZdlPvj>
 80a1bf4:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a1bf6:	b135      	cbz	r5, 80a1c06 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a1bf8:	4628      	mov	r0, r5
 80a1bfa:	f7ff fefa 	bl	80a19f2 <_ZNSt14_Function_baseD1Ev>
 80a1bfe:	2110      	movs	r1, #16
 80a1c00:	4628      	mov	r0, r5
 80a1c02:	f000 fe3a 	bl	80a287a <_ZdlPvj>
 80a1c06:	4620      	mov	r0, r4
 80a1c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a1c0c:	2114      	movs	r1, #20
 80a1c0e:	f000 be34 	b.w	80a287a <_ZdlPvj>
 80a1c12:	bd38      	pop	{r3, r4, r5, pc}

080a1c14 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a1c14:	b513      	push	{r0, r1, r4, lr}
 80a1c16:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1c18:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a1c1c:	2300      	movs	r3, #0
 80a1c1e:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1c20:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1c22:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a1c24:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1c26:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a1c28:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1c2a:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1c2c:	f7fe fa88 	bl	80a0140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1c30:	4620      	mov	r0, r4
 80a1c32:	b002      	add	sp, #8
 80a1c34:	bd10      	pop	{r4, pc}

080a1c36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a1c36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1c38:	460c      	mov	r4, r1
 80a1c3a:	4606      	mov	r6, r0
 80a1c3c:	460f      	mov	r7, r1
 80a1c3e:	f854 3b04 	ldr.w	r3, [r4], #4
 80a1c42:	ad02      	add	r5, sp, #8
 80a1c44:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a1c48:	4621      	mov	r1, r4
 80a1c4a:	a801      	add	r0, sp, #4
 80a1c4c:	f7ff feb5 	bl	80a19ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a1c50:	4629      	mov	r1, r5
 80a1c52:	4630      	mov	r0, r6
 80a1c54:	f7ff ffde 	bl	80a1c14 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1c58:	a801      	add	r0, sp, #4
 80a1c5a:	f7fe fa71 	bl	80a0140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1c5e:	4620      	mov	r0, r4
 80a1c60:	f7fe fa6e 	bl	80a0140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a1c64:	4638      	mov	r0, r7
 80a1c66:	2108      	movs	r1, #8
 80a1c68:	f000 fe07 	bl	80a287a <_ZdlPvj>
        return p;
    }
 80a1c6c:	4630      	mov	r0, r6
 80a1c6e:	b003      	add	sp, #12
 80a1c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a1c74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1c74:	b538      	push	{r3, r4, r5, lr}
 80a1c76:	2300      	movs	r3, #0
 80a1c78:	4604      	mov	r4, r0
 80a1c7a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1c7c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1c7e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1c80:	f7fe fa0d 	bl	80a009e <_Znwj>
 80a1c84:	b128      	cbz	r0, 80a1c92 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a1c86:	2301      	movs	r3, #1
 80a1c88:	6043      	str	r3, [r0, #4]
 80a1c8a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a1c8c:	4b02      	ldr	r3, [pc, #8]	; (80a1c98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a1c8e:	60c5      	str	r5, [r0, #12]
 80a1c90:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1c92:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a1c94:	4620      	mov	r0, r4
 80a1c96:	bd38      	pop	{r3, r4, r5, pc}
 80a1c98:	080a5e94 	.word	0x080a5e94

080a1c9c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1c9c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a1c9e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1ca0:	b90a      	cbnz	r2, 80a1ca6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a1ca2:	f000 fdec 	bl	80a287e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1ca6:	68c3      	ldr	r3, [r0, #12]
    }
 80a1ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1cac:	4718      	bx	r3

080a1cae <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1cae:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1cb0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a1cb2:	f100 0110 	add.w	r1, r0, #16
 80a1cb6:	f7ff fff1 	bl	80a1c9c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a1cba:	bd08      	pop	{r3, pc}

080a1cbc <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1cbc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a1cbe:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1cc0:	b90a      	cbnz	r2, 80a1cc6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a1cc2:	f000 fddc 	bl	80a287e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1cc6:	68c3      	ldr	r3, [r0, #12]
    }
 80a1cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1ccc:	4718      	bx	r3

080a1cce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1cce:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1cd0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a1cd2:	f100 0110 	add.w	r1, r0, #16
 80a1cd6:	f7ff fff1 	bl	80a1cbc <_ZNKSt8functionIFvRKbEEclES1_>
 80a1cda:	bd08      	pop	{r3, pc}

080a1cdc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1cdc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1cde:	2300      	movs	r3, #0
 80a1ce0:	6083      	str	r3, [r0, #8]
 80a1ce2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1ce4:	4604      	mov	r4, r0
 80a1ce6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1ce8:	b12b      	cbz	r3, 80a1cf6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1cea:	2202      	movs	r2, #2
 80a1cec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1cee:	68eb      	ldr	r3, [r5, #12]
 80a1cf0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1cf2:	68ab      	ldr	r3, [r5, #8]
 80a1cf4:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1cf6:	4620      	mov	r0, r4
 80a1cf8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1cfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a1cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1cfe:	b089      	sub	sp, #36	; 0x24
 80a1d00:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a1d02:	4668      	mov	r0, sp
 80a1d04:	f7ff ff4d 	bl	80a1ba2 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1d08:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1d0c:	2300      	movs	r3, #0
 80a1d0e:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1d12:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a1d16:	2b00      	cmp	r3, #0
 80a1d18:	d103      	bne.n	80a1d22 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a1d1a:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a1d1e:	2900      	cmp	r1, #0
 80a1d20:	d1f7      	bne.n	80a1d12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a1d22:	d002      	beq.n	80a1d2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a1d24:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1d28:	e063      	b.n	80a1df2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a1d2a:	f114 050c 	adds.w	r5, r4, #12
 80a1d2e:	d003      	beq.n	80a1d38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a1d30:	4669      	mov	r1, sp
 80a1d32:	4628      	mov	r0, r5
 80a1d34:	f7ff ff35 	bl	80a1ba2 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1d38:	f3bf 8f5f 	dmb	sy
 80a1d3c:	2301      	movs	r3, #1
 80a1d3e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1d40:	f3bf 8f5f 	dmb	sy
 80a1d44:	f104 0308 	add.w	r3, r4, #8
 80a1d48:	2000      	movs	r0, #0
 80a1d4a:	e853 6f00 	ldrex	r6, [r3]
 80a1d4e:	e843 0200 	strex	r2, r0, [r3]
 80a1d52:	2a00      	cmp	r2, #0
 80a1d54:	d1f9      	bne.n	80a1d4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a1d56:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1d5a:	2e00      	cmp	r6, #0
 80a1d5c:	d049      	beq.n	80a1df2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a1d5e:	f7ff fbc9 	bl	80a14f4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a1d62:	b120      	cbz	r0, 80a1d6e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1d64:	4629      	mov	r1, r5
 80a1d66:	4630      	mov	r0, r6
 80a1d68:	f7ff ff98 	bl	80a1c9c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a1d6c:	e03a      	b.n	80a1de4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1d6e:	4631      	mov	r1, r6
 80a1d70:	a802      	add	r0, sp, #8
 80a1d72:	f7ff ffb3 	bl	80a1cdc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1d76:	68e0      	ldr	r0, [r4, #12]
 80a1d78:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1d7c:	b108      	cbz	r0, 80a1d82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a1d7e:	f002 f8d5 	bl	80a3f2c <strdup>
 80a1d82:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1d84:	2010      	movs	r0, #16
 80a1d86:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a1d8a:	f7fe f988 	bl	80a009e <_Znwj>
 80a1d8e:	4605      	mov	r5, r0
 80a1d90:	b1e8      	cbz	r0, 80a1dce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1d92:	2700      	movs	r7, #0
 80a1d94:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1d96:	2018      	movs	r0, #24
 80a1d98:	f7fe f981 	bl	80a009e <_Znwj>
 80a1d9c:	4604      	mov	r4, r0
 80a1d9e:	b188      	cbz	r0, 80a1dc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1da0:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1da2:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1da4:	a802      	add	r0, sp, #8
 80a1da6:	f7ff fe33 	bl	80a1a10 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1daa:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1dac:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1dae:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1db0:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a1db2:	9204      	str	r2, [sp, #16]
 80a1db4:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1db6:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a1db8:	60e3      	str	r3, [r4, #12]
 80a1dba:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1dbe:	9205      	str	r2, [sp, #20]
 80a1dc0:	f7ff feef 	bl	80a1ba2 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1dc4:	4b0d      	ldr	r3, [pc, #52]	; (80a1dfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1dc6:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1dc8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1dca:	4b0d      	ldr	r3, [pc, #52]	; (80a1e00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a1dcc:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a1dce:	a806      	add	r0, sp, #24
 80a1dd0:	f7ff fef6 	bl	80a1bc0 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1dd4:	a802      	add	r0, sp, #8
 80a1dd6:	f7ff fe0c 	bl	80a19f2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1dda:	2200      	movs	r2, #0
 80a1ddc:	4629      	mov	r1, r5
 80a1dde:	4809      	ldr	r0, [pc, #36]	; (80a1e04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a1de0:	f7ff fb90 	bl	80a1504 <application_thread_invoke>
 80a1de4:	4630      	mov	r0, r6
 80a1de6:	f7ff fe04 	bl	80a19f2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1dea:	2110      	movs	r1, #16
 80a1dec:	4630      	mov	r0, r6
 80a1dee:	f000 fd44 	bl	80a287a <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a1df2:	4668      	mov	r0, sp
 80a1df4:	f7ff fee4 	bl	80a1bc0 <_ZN8particle5ErrorD1Ev>
    }
 80a1df8:	b009      	add	sp, #36	; 0x24
 80a1dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1dfc:	080a1caf 	.word	0x080a1caf
 80a1e00:	080a1f25 	.word	0x080a1f25
 80a1e04:	080a2489 	.word	0x080a2489

080a1e08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1e0c:	b08b      	sub	sp, #44	; 0x2c
 80a1e0e:	4606      	mov	r6, r0
 80a1e10:	460f      	mov	r7, r1
 80a1e12:	4690      	mov	r8, r2
 80a1e14:	4699      	mov	r9, r3
 80a1e16:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1e1a:	f7ff fbdf 	bl	80a15dc <spark_cloud_flag_connected>
 80a1e1e:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 80a1e20:	4683      	mov	fp, r0
 80a1e22:	bb30      	cbnz	r0, 80a1e72 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a1e24:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a1e28:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a1e2a:	a905      	add	r1, sp, #20
 80a1e2c:	4628      	mov	r0, r5
 80a1e2e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1e32:	f7ff feb6 	bl	80a1ba2 <_ZN8particle5ErrorC1EOS0_>
 80a1e36:	2014      	movs	r0, #20
 80a1e38:	f7fe f931 	bl	80a009e <_Znwj>
 80a1e3c:	4604      	mov	r4, r0
 80a1e3e:	b158      	cbz	r0, 80a1e58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a1e40:	2302      	movs	r3, #2
 80a1e42:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1e44:	2301      	movs	r3, #1
 80a1e46:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1e48:	f8c0 b004 	str.w	fp, [r0, #4]
 80a1e4c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a1e50:	4629      	mov	r1, r5
 80a1e52:	300c      	adds	r0, #12
 80a1e54:	f7ff fea5 	bl	80a1ba2 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a1e58:	4630      	mov	r0, r6
 80a1e5a:	4621      	mov	r1, r4
 80a1e5c:	f840 4b04 	str.w	r4, [r0], #4
 80a1e60:	f7ff ff08 	bl	80a1c74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a1e64:	4628      	mov	r0, r5
 80a1e66:	f7ff feab 	bl	80a1bc0 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a1e6a:	a805      	add	r0, sp, #20
 80a1e6c:	f7ff fea8 	bl	80a1bc0 <_ZN8particle5ErrorD1Ev>
 80a1e70:	e052      	b.n	80a1f18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1e72:	2400      	movs	r4, #0
 80a1e74:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a1e76:	2014      	movs	r0, #20
 80a1e78:	606c      	str	r4, [r5, #4]
 80a1e7a:	60ac      	str	r4, [r5, #8]
 80a1e7c:	9307      	str	r3, [sp, #28]
 80a1e7e:	f7fe f90e 	bl	80a009e <_Znwj>
 80a1e82:	4601      	mov	r1, r0
 80a1e84:	b118      	cbz	r0, 80a1e8e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a1e86:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1e88:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1e8a:	6044      	str	r4, [r0, #4]
 80a1e8c:	6084      	str	r4, [r0, #8]
 80a1e8e:	a804      	add	r0, sp, #16
 80a1e90:	9103      	str	r1, [sp, #12]
 80a1e92:	f7ff feef 	bl	80a1c74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a1e96:	4b22      	ldr	r3, [pc, #136]	; (80a1f20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a1e98:	2008      	movs	r0, #8
 80a1e9a:	9308      	str	r3, [sp, #32]
 80a1e9c:	f7fe f8ff 	bl	80a009e <_Znwj>
 80a1ea0:	4604      	mov	r4, r0
 80a1ea2:	b128      	cbz	r0, 80a1eb0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1ea4:	9b03      	ldr	r3, [sp, #12]
 80a1ea6:	a904      	add	r1, sp, #16
 80a1ea8:	f840 3b04 	str.w	r3, [r0], #4
 80a1eac:	f7ff fd85 	bl	80a19ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1eb0:	9500      	str	r5, [sp, #0]
 80a1eb2:	fa5f f38a 	uxtb.w	r3, sl
 80a1eb6:	464a      	mov	r2, r9
 80a1eb8:	4641      	mov	r1, r8
 80a1eba:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a1ebc:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1ebe:	f7ff fb95 	bl	80a15ec <spark_send_event>
 80a1ec2:	b920      	cbnz	r0, 80a1ece <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a1ec4:	9b03      	ldr	r3, [sp, #12]
 80a1ec6:	785b      	ldrb	r3, [r3, #1]
 80a1ec8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1ecc:	b183      	cbz	r3, 80a1ef0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a1ece:	9b03      	ldr	r3, [sp, #12]
 80a1ed0:	a904      	add	r1, sp, #16
 80a1ed2:	a806      	add	r0, sp, #24
 80a1ed4:	9305      	str	r3, [sp, #20]
 80a1ed6:	f7ff fd70 	bl	80a19ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a1eda:	a905      	add	r1, sp, #20
 80a1edc:	4630      	mov	r0, r6
 80a1ede:	f7ff fe99 	bl	80a1c14 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1ee2:	a806      	add	r0, sp, #24
 80a1ee4:	f7fe f92c 	bl	80a0140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1ee8:	a804      	add	r0, sp, #16
 80a1eea:	f7fe f929 	bl	80a0140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1eee:	e013      	b.n	80a1f18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a1ef0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a1ef4:	a905      	add	r1, sp, #20
 80a1ef6:	a803      	add	r0, sp, #12
 80a1ef8:	9205      	str	r2, [sp, #20]
 80a1efa:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1efe:	f7ff fefd 	bl	80a1cfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1f02:	a805      	add	r0, sp, #20
 80a1f04:	f7ff fe5c 	bl	80a1bc0 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a1f08:	a805      	add	r0, sp, #20
 80a1f0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1f0c:	f7ff fe93 	bl	80a1c36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a1f10:	a806      	add	r0, sp, #24
 80a1f12:	f7fe f915 	bl	80a0140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1f16:	e7da      	b.n	80a1ece <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a1f18:	4630      	mov	r0, r6
 80a1f1a:	b00b      	add	sp, #44	; 0x2c
 80a1f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1f20:	080a2095 	.word	0x080a2095

080a1f24 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1f24:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1f26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1f28:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1f2a:	d006      	beq.n	80a1f3a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a1f2c:	2a03      	cmp	r2, #3
 80a1f2e:	d017      	beq.n	80a1f60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a1f30:	2a01      	cmp	r2, #1
 80a1f32:	d122      	bne.n	80a1f7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1f34:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1f36:	6003      	str	r3, [r0, #0]
	      break;
 80a1f38:	e01f      	b.n	80a1f7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1f3a:	2018      	movs	r0, #24
 80a1f3c:	680e      	ldr	r6, [r1, #0]
 80a1f3e:	f7fe f8ae 	bl	80a009e <_Znwj>
 80a1f42:	4605      	mov	r5, r0
 80a1f44:	b150      	cbz	r0, 80a1f5c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1f46:	4631      	mov	r1, r6
 80a1f48:	f7ff fec8 	bl	80a1cdc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1f4c:	6930      	ldr	r0, [r6, #16]
 80a1f4e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1f52:	b108      	cbz	r0, 80a1f58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a1f54:	f001 ffea 	bl	80a3f2c <strdup>
 80a1f58:	6128      	str	r0, [r5, #16]
 80a1f5a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1f5c:	6025      	str	r5, [r4, #0]
 80a1f5e:	e00c      	b.n	80a1f7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1f60:	6804      	ldr	r4, [r0, #0]
 80a1f62:	b154      	cbz	r4, 80a1f7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a1f64:	f104 0010 	add.w	r0, r4, #16
 80a1f68:	f7ff fe2a 	bl	80a1bc0 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1f6c:	4620      	mov	r0, r4
 80a1f6e:	f7ff fd40 	bl	80a19f2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1f72:	2118      	movs	r1, #24
 80a1f74:	4620      	mov	r0, r4
 80a1f76:	f000 fc80 	bl	80a287a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1f7a:	2000      	movs	r0, #0
 80a1f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1f7e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1f7e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1f80:	2300      	movs	r3, #0
 80a1f82:	6083      	str	r3, [r0, #8]
 80a1f84:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1f86:	4604      	mov	r4, r0
 80a1f88:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1f8a:	b12b      	cbz	r3, 80a1f98 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1f8c:	2202      	movs	r2, #2
 80a1f8e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1f90:	68eb      	ldr	r3, [r5, #12]
 80a1f92:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1f94:	68ab      	ldr	r3, [r5, #8]
 80a1f96:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1f98:	4620      	mov	r0, r4
 80a1f9a:	bd38      	pop	{r3, r4, r5, pc}

080a1f9c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1f9c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1f9e:	b570      	push	{r4, r5, r6, lr}
 80a1fa0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1fa2:	d006      	beq.n	80a1fb2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a1fa4:	2a03      	cmp	r2, #3
 80a1fa6:	d011      	beq.n	80a1fcc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a1fa8:	2a01      	cmp	r2, #1
 80a1faa:	d118      	bne.n	80a1fde <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1fac:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1fae:	6003      	str	r3, [r0, #0]
	      break;
 80a1fb0:	e015      	b.n	80a1fde <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1fb2:	2014      	movs	r0, #20
 80a1fb4:	680e      	ldr	r6, [r1, #0]
 80a1fb6:	f7fe f872 	bl	80a009e <_Znwj>
 80a1fba:	4605      	mov	r5, r0
 80a1fbc:	b120      	cbz	r0, 80a1fc8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1fbe:	4631      	mov	r1, r6
 80a1fc0:	f7ff ffdd 	bl	80a1f7e <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1fc4:	7c33      	ldrb	r3, [r6, #16]
 80a1fc6:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1fc8:	6025      	str	r5, [r4, #0]
 80a1fca:	e008      	b.n	80a1fde <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1fcc:	6804      	ldr	r4, [r0, #0]
 80a1fce:	b134      	cbz	r4, 80a1fde <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1fd0:	4620      	mov	r0, r4
 80a1fd2:	f7ff fd0e 	bl	80a19f2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1fd6:	2114      	movs	r1, #20
 80a1fd8:	4620      	mov	r0, r4
 80a1fda:	f000 fc4e 	bl	80a287a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1fde:	2000      	movs	r0, #0
 80a1fe0:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1fe4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a1fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1fe6:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1fe8:	f3bf 8f5f 	dmb	sy
 80a1fec:	b087      	sub	sp, #28
 80a1fee:	2300      	movs	r3, #0
 80a1ff0:	e850 6f00 	ldrex	r6, [r0]
 80a1ff4:	e840 3200 	strex	r2, r3, [r0]
 80a1ff8:	2a00      	cmp	r2, #0
 80a1ffa:	d1f9      	bne.n	80a1ff0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a1ffc:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a2000:	2e00      	cmp	r6, #0
 80a2002:	d03f      	beq.n	80a2084 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a2004:	4618      	mov	r0, r3
 80a2006:	f7ff fa75 	bl	80a14f4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a200a:	4607      	mov	r7, r0
 80a200c:	b120      	cbz	r0, 80a2018 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a200e:	4621      	mov	r1, r4
 80a2010:	4630      	mov	r0, r6
 80a2012:	f7ff fe53 	bl	80a1cbc <_ZNKSt8functionIFvRKbEEclES1_>
 80a2016:	e02e      	b.n	80a2076 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2018:	4631      	mov	r1, r6
 80a201a:	a801      	add	r0, sp, #4
 80a201c:	f7ff ffaf 	bl	80a1f7e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a2020:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a2022:	2010      	movs	r0, #16
 80a2024:	f88d 3014 	strb.w	r3, [sp, #20]
 80a2028:	f7fe f839 	bl	80a009e <_Znwj>
 80a202c:	4605      	mov	r5, r0
 80a202e:	b1d0      	cbz	r0, 80a2066 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2030:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2032:	2014      	movs	r0, #20
 80a2034:	f7fe f833 	bl	80a009e <_Znwj>
 80a2038:	4604      	mov	r4, r0
 80a203a:	b178      	cbz	r0, 80a205c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a203c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a203e:	4601      	mov	r1, r0
 80a2040:	a801      	add	r0, sp, #4
 80a2042:	f7ff fce5 	bl	80a1a10 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2046:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a2048:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a204a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a204c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a204e:	9203      	str	r2, [sp, #12]
 80a2050:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2052:	60e3      	str	r3, [r4, #12]
 80a2054:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a2058:	9204      	str	r2, [sp, #16]
 80a205a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a205c:	4b0a      	ldr	r3, [pc, #40]	; (80a2088 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a205e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2060:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a2062:	4b0a      	ldr	r3, [pc, #40]	; (80a208c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a2064:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2066:	a801      	add	r0, sp, #4
 80a2068:	f7ff fcc3 	bl	80a19f2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a206c:	2200      	movs	r2, #0
 80a206e:	4629      	mov	r1, r5
 80a2070:	4807      	ldr	r0, [pc, #28]	; (80a2090 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a2072:	f7ff fa47 	bl	80a1504 <application_thread_invoke>
 80a2076:	4630      	mov	r0, r6
 80a2078:	f7ff fcbb 	bl	80a19f2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a207c:	2110      	movs	r1, #16
 80a207e:	4630      	mov	r0, r6
 80a2080:	f000 fbfb 	bl	80a287a <_ZdlPvj>
        }
    }
 80a2084:	b007      	add	sp, #28
 80a2086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2088:	080a1ccf 	.word	0x080a1ccf
 80a208c:	080a1f9d 	.word	0x080a1f9d
 80a2090:	080a2489 	.word	0x080a2489

080a2094 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a2094:	b530      	push	{r4, r5, lr}
 80a2096:	4604      	mov	r4, r0
 80a2098:	b085      	sub	sp, #20
 80a209a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a209c:	4668      	mov	r0, sp
 80a209e:	4611      	mov	r1, r2
 80a20a0:	f7ff fdc9 	bl	80a1c36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a20a4:	b17c      	cbz	r4, 80a20c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a20a6:	b224      	sxth	r4, r4
 80a20a8:	4628      	mov	r0, r5
 80a20aa:	b10d      	cbz	r5, 80a20b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a20ac:	f001 ff3e 	bl	80a3f2c <strdup>
 80a20b0:	9002      	str	r0, [sp, #8]
 80a20b2:	a902      	add	r1, sp, #8
 80a20b4:	4668      	mov	r0, sp
 80a20b6:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a20ba:	f7ff fe1f 	bl	80a1cfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a20be:	a802      	add	r0, sp, #8
 80a20c0:	f7ff fd7e 	bl	80a1bc0 <_ZN8particle5ErrorD1Ev>
 80a20c4:	e01d      	b.n	80a2102 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a20c6:	f04f 0201 	mov.w	r2, #1
 80a20ca:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a20cc:	f88d 4008 	strb.w	r4, [sp, #8]
 80a20d0:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a20d4:	42a3      	cmp	r3, r4
 80a20d6:	d103      	bne.n	80a20e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a20d8:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a20dc:	2900      	cmp	r1, #0
 80a20de:	d1f7      	bne.n	80a20d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a20e0:	d002      	beq.n	80a20e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a20e2:	f88d 3008 	strb.w	r3, [sp, #8]
 80a20e6:	e00c      	b.n	80a2102 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a20e8:	f110 010c 	adds.w	r1, r0, #12
 80a20ec:	f04f 0301 	mov.w	r3, #1
 80a20f0:	bf18      	it	ne
 80a20f2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a20f4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a20f8:	3004      	adds	r0, #4
 80a20fa:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a20fe:	f7ff ff71 	bl	80a1fe4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a2102:	a801      	add	r0, sp, #4
 80a2104:	f7fe f81c 	bl	80a0140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a2108:	b005      	add	sp, #20
 80a210a:	bd30      	pop	{r4, r5, pc}

080a210c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a210c:	4770      	bx	lr

080a210e <_ZN9IPAddressD0Ev>:
 80a210e:	b510      	push	{r4, lr}
 80a2110:	4604      	mov	r4, r0
 80a2112:	2118      	movs	r1, #24
 80a2114:	f000 fbb1 	bl	80a287a <_ZdlPvj>
 80a2118:	4620      	mov	r0, r4
 80a211a:	bd10      	pop	{r4, pc}

080a211c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a211c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a211e:	460f      	mov	r7, r1
 80a2120:	f100 0608 	add.w	r6, r0, #8
 80a2124:	1d05      	adds	r5, r0, #4
 80a2126:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2128:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a212c:	220a      	movs	r2, #10
 80a212e:	4638      	mov	r0, r7
 80a2130:	f7ff fc3b 	bl	80a19aa <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2134:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2136:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2138:	d007      	beq.n	80a214a <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a213a:	2c00      	cmp	r4, #0
 80a213c:	d0f4      	beq.n	80a2128 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a213e:	212e      	movs	r1, #46	; 0x2e
 80a2140:	4638      	mov	r0, r7
 80a2142:	f7ff fbef 	bl	80a1924 <_ZN5Print5printEc>
 80a2146:	4404      	add	r4, r0
 80a2148:	e7ee      	b.n	80a2128 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a214a:	4620      	mov	r0, r4
 80a214c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a2150 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a2150:	b510      	push	{r4, lr}
 80a2152:	4604      	mov	r4, r0
 80a2154:	4b04      	ldr	r3, [pc, #16]	; (80a2168 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a2156:	2211      	movs	r2, #17
 80a2158:	f840 3b04 	str.w	r3, [r0], #4
 80a215c:	2100      	movs	r1, #0
 80a215e:	f001 fe9e 	bl	80a3e9e <memset>
{
    clear();
}
 80a2162:	4620      	mov	r0, r4
 80a2164:	bd10      	pop	{r4, pc}
 80a2166:	bf00      	nop
 80a2168:	080a5eb0 	.word	0x080a5eb0

080a216c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a216c:	4603      	mov	r3, r0
 80a216e:	4a07      	ldr	r2, [pc, #28]	; (80a218c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2170:	b510      	push	{r4, lr}
 80a2172:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a2176:	f101 0210 	add.w	r2, r1, #16
 80a217a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a217e:	4291      	cmp	r1, r2
 80a2180:	f843 4b04 	str.w	r4, [r3], #4
 80a2184:	d1f9      	bne.n	80a217a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a2186:	780a      	ldrb	r2, [r1, #0]
 80a2188:	701a      	strb	r2, [r3, #0]
}
 80a218a:	bd10      	pop	{r4, pc}
 80a218c:	080a5eb0 	.word	0x080a5eb0

080a2190 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2190:	4a02      	ldr	r2, [pc, #8]	; (80a219c <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a2192:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2194:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a2196:	2204      	movs	r2, #4
 80a2198:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a219a:	4770      	bx	lr
 80a219c:	080a5eb0 	.word	0x080a5eb0

080a21a0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a21a0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a21a2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a21a6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a21aa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a21ae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a21b2:	2304      	movs	r3, #4
 80a21b4:	6041      	str	r1, [r0, #4]
 80a21b6:	7503      	strb	r3, [r0, #20]
 80a21b8:	bd10      	pop	{r4, pc}
	...

080a21bc <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a21bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a21be:	4d04      	ldr	r5, [pc, #16]	; (80a21d0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a21c0:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a21c2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a21c6:	9500      	str	r5, [sp, #0]
 80a21c8:	f7ff ffea 	bl	80a21a0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a21cc:	b003      	add	sp, #12
 80a21ce:	bd30      	pop	{r4, r5, pc}
 80a21d0:	080a5eb0 	.word	0x080a5eb0

080a21d4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a21d4:	7441      	strb	r1, [r0, #17]
 80a21d6:	4770      	bx	lr

080a21d8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a21d8:	4770      	bx	lr

080a21da <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a21da:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a21dc:	2100      	movs	r1, #0
 80a21de:	7c00      	ldrb	r0, [r0, #16]
 80a21e0:	f7ff f958 	bl	80a1494 <HAL_USB_USART_Receive_Data>
}
 80a21e4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a21e8:	bf28      	it	cs
 80a21ea:	f04f 30ff 	movcs.w	r0, #4294967295
 80a21ee:	bd08      	pop	{r3, pc}

080a21f0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a21f0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a21f2:	2101      	movs	r1, #1
 80a21f4:	7c00      	ldrb	r0, [r0, #16]
 80a21f6:	f7ff f94d 	bl	80a1494 <HAL_USB_USART_Receive_Data>
}
 80a21fa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a21fe:	bf28      	it	cs
 80a2200:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2204:	bd08      	pop	{r3, pc}

080a2206 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a2206:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2208:	7c00      	ldrb	r0, [r0, #16]
 80a220a:	f7ff f93b 	bl	80a1484 <HAL_USB_USART_Available_Data_For_Write>
}
 80a220e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2212:	bd08      	pop	{r3, pc}

080a2214 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a2214:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2216:	7c00      	ldrb	r0, [r0, #16]
 80a2218:	f7ff f92c 	bl	80a1474 <HAL_USB_USART_Available_Data>
}
 80a221c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2220:	bd08      	pop	{r3, pc}

080a2222 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a2222:	7c00      	ldrb	r0, [r0, #16]
 80a2224:	f7ff b946 	b.w	80a14b4 <HAL_USB_USART_Flush_Data>

080a2228 <_ZN9USBSerialD0Ev>:
 80a2228:	b510      	push	{r4, lr}
 80a222a:	4604      	mov	r4, r0
 80a222c:	2114      	movs	r1, #20
 80a222e:	f000 fb24 	bl	80a287a <_ZdlPvj>
 80a2232:	4620      	mov	r0, r4
 80a2234:	bd10      	pop	{r4, pc}

080a2236 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2236:	b538      	push	{r3, r4, r5, lr}
 80a2238:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a223a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a223c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a223e:	f7ff f921 	bl	80a1484 <HAL_USB_USART_Available_Data_For_Write>
 80a2242:	2800      	cmp	r0, #0
 80a2244:	dc01      	bgt.n	80a224a <_ZN9USBSerial5writeEh+0x14>
 80a2246:	7c60      	ldrb	r0, [r4, #17]
 80a2248:	b128      	cbz	r0, 80a2256 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a224a:	4629      	mov	r1, r5
 80a224c:	7c20      	ldrb	r0, [r4, #16]
 80a224e:	f7ff f929 	bl	80a14a4 <HAL_USB_USART_Send_Data>
 80a2252:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a2256:	bd38      	pop	{r3, r4, r5, pc}

080a2258 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2258:	b510      	push	{r4, lr}
 80a225a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a225c:	2300      	movs	r3, #0
 80a225e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a2260:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2264:	60a3      	str	r3, [r4, #8]
 80a2266:	4b05      	ldr	r3, [pc, #20]	; (80a227c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2268:	4608      	mov	r0, r1
 80a226a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a226c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a226e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2270:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a2272:	4611      	mov	r1, r2
 80a2274:	f7ff f8ee 	bl	80a1454 <HAL_USB_USART_Init>
}
 80a2278:	4620      	mov	r0, r4
 80a227a:	bd10      	pop	{r4, pc}
 80a227c:	080a5ec4 	.word	0x080a5ec4

080a2280 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2280:	2200      	movs	r2, #0
 80a2282:	7c00      	ldrb	r0, [r0, #16]
 80a2284:	f7ff b8ee 	b.w	80a1464 <HAL_USB_USART_Begin>

080a2288 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2288:	b510      	push	{r4, lr}
 80a228a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a228c:	2214      	movs	r2, #20
 80a228e:	2100      	movs	r1, #0
 80a2290:	f001 fe05 	bl	80a3e9e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2294:	4b05      	ldr	r3, [pc, #20]	; (80a22ac <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2296:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2298:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a229a:	4b05      	ldr	r3, [pc, #20]	; (80a22b0 <_Z19acquireSerialBufferv+0x28>)
 80a229c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a229e:	f240 1301 	movw	r3, #257	; 0x101
 80a22a2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a22a4:	2381      	movs	r3, #129	; 0x81
 80a22a6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a22a8:	bd10      	pop	{r4, pc}
 80a22aa:	bf00      	nop
 80a22ac:	200002f1 	.word	0x200002f1
 80a22b0:	20000270 	.word	0x20000270

080a22b4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a22b4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a22b6:	4d0e      	ldr	r5, [pc, #56]	; (80a22f0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a22b8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a22ba:	a801      	add	r0, sp, #4
 80a22bc:	f7ff ffe4 	bl	80a2288 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a22c0:	6829      	ldr	r1, [r5, #0]
 80a22c2:	f011 0401 	ands.w	r4, r1, #1
 80a22c6:	d110      	bne.n	80a22ea <_Z16_fetch_usbserialv+0x36>
 80a22c8:	4628      	mov	r0, r5
 80a22ca:	f7fd feec 	bl	80a00a6 <__cxa_guard_acquire>
 80a22ce:	b160      	cbz	r0, 80a22ea <_Z16_fetch_usbserialv+0x36>
 80a22d0:	aa01      	add	r2, sp, #4
 80a22d2:	4621      	mov	r1, r4
 80a22d4:	4807      	ldr	r0, [pc, #28]	; (80a22f4 <_Z16_fetch_usbserialv+0x40>)
 80a22d6:	f7ff ffbf 	bl	80a2258 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a22da:	4628      	mov	r0, r5
 80a22dc:	f7fd fee8 	bl	80a00b0 <__cxa_guard_release>
 80a22e0:	4a05      	ldr	r2, [pc, #20]	; (80a22f8 <_Z16_fetch_usbserialv+0x44>)
 80a22e2:	4906      	ldr	r1, [pc, #24]	; (80a22fc <_Z16_fetch_usbserialv+0x48>)
 80a22e4:	4803      	ldr	r0, [pc, #12]	; (80a22f4 <_Z16_fetch_usbserialv+0x40>)
 80a22e6:	f000 fac3 	bl	80a2870 <__aeabi_atexit>
	return _usbserial;
}
 80a22ea:	4802      	ldr	r0, [pc, #8]	; (80a22f4 <_Z16_fetch_usbserialv+0x40>)
 80a22ec:	b007      	add	sp, #28
 80a22ee:	bd30      	pop	{r4, r5, pc}
 80a22f0:	2000026c 	.word	0x2000026c
 80a22f4:	200003f4 	.word	0x200003f4
 80a22f8:	200000b8 	.word	0x200000b8
 80a22fc:	080a21d9 	.word	0x080a21d9

080a2300 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2300:	b510      	push	{r4, lr}
 80a2302:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2304:	2214      	movs	r2, #20
 80a2306:	2100      	movs	r1, #0
 80a2308:	f001 fdc9 	bl	80a3e9e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a230c:	4b05      	ldr	r3, [pc, #20]	; (80a2324 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a230e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2310:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2312:	4b05      	ldr	r3, [pc, #20]	; (80a2328 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2314:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2316:	f240 1301 	movw	r3, #257	; 0x101
 80a231a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a231c:	2381      	movs	r3, #129	; 0x81
 80a231e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2320:	bd10      	pop	{r4, pc}
 80a2322:	bf00      	nop
 80a2324:	200004a4 	.word	0x200004a4
 80a2328:	2000040c 	.word	0x2000040c

080a232c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a232c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a232e:	4c0e      	ldr	r4, [pc, #56]	; (80a2368 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2330:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2332:	a801      	add	r0, sp, #4
 80a2334:	f7ff ffe4 	bl	80a2300 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2338:	6823      	ldr	r3, [r4, #0]
 80a233a:	07db      	lsls	r3, r3, #31
 80a233c:	d410      	bmi.n	80a2360 <_Z17_fetch_usbserial1v+0x34>
 80a233e:	4620      	mov	r0, r4
 80a2340:	f7fd feb1 	bl	80a00a6 <__cxa_guard_acquire>
 80a2344:	b160      	cbz	r0, 80a2360 <_Z17_fetch_usbserial1v+0x34>
 80a2346:	aa01      	add	r2, sp, #4
 80a2348:	2101      	movs	r1, #1
 80a234a:	4808      	ldr	r0, [pc, #32]	; (80a236c <_Z17_fetch_usbserial1v+0x40>)
 80a234c:	f7ff ff84 	bl	80a2258 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2350:	4620      	mov	r0, r4
 80a2352:	f7fd fead 	bl	80a00b0 <__cxa_guard_release>
 80a2356:	4a06      	ldr	r2, [pc, #24]	; (80a2370 <_Z17_fetch_usbserial1v+0x44>)
 80a2358:	4906      	ldr	r1, [pc, #24]	; (80a2374 <_Z17_fetch_usbserial1v+0x48>)
 80a235a:	4804      	ldr	r0, [pc, #16]	; (80a236c <_Z17_fetch_usbserial1v+0x40>)
 80a235c:	f000 fa88 	bl	80a2870 <__aeabi_atexit>
  return _usbserial1;
}
 80a2360:	4802      	ldr	r0, [pc, #8]	; (80a236c <_Z17_fetch_usbserial1v+0x40>)
 80a2362:	b006      	add	sp, #24
 80a2364:	bd10      	pop	{r4, pc}
 80a2366:	bf00      	nop
 80a2368:	20000408 	.word	0x20000408
 80a236c:	20000490 	.word	0x20000490
 80a2370:	200000b8 	.word	0x200000b8
 80a2374:	080a21d9 	.word	0x080a21d9

080a2378 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a2378:	4770      	bx	lr

080a237a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a237a:	7441      	strb	r1, [r0, #17]
 80a237c:	4770      	bx	lr

080a237e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a237e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a2380:	7c00      	ldrb	r0, [r0, #16]
 80a2382:	f7fe fffd 	bl	80a1380 <HAL_USART_Available_Data_For_Write>
}
 80a2386:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a238a:	bd08      	pop	{r3, pc}

080a238c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a238c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a238e:	7c00      	ldrb	r0, [r0, #16]
 80a2390:	f7fe ffce 	bl	80a1330 <HAL_USART_Available_Data>
}
 80a2394:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2398:	bd08      	pop	{r3, pc}

080a239a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a239a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a239c:	7c00      	ldrb	r0, [r0, #16]
 80a239e:	f7fe ffd7 	bl	80a1350 <HAL_USART_Peek_Data>
}
 80a23a2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a23a6:	bf28      	it	cs
 80a23a8:	f04f 30ff 	movcs.w	r0, #4294967295
 80a23ac:	bd08      	pop	{r3, pc}

080a23ae <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a23ae:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a23b0:	7c00      	ldrb	r0, [r0, #16]
 80a23b2:	f7fe ffc5 	bl	80a1340 <HAL_USART_Read_Data>
}
 80a23b6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a23ba:	bf28      	it	cs
 80a23bc:	f04f 30ff 	movcs.w	r0, #4294967295
 80a23c0:	bd08      	pop	{r3, pc}

080a23c2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a23c2:	7c00      	ldrb	r0, [r0, #16]
 80a23c4:	f7fe bfcc 	b.w	80a1360 <HAL_USART_Flush_Data>

080a23c8 <_ZN11USARTSerialD0Ev>:
 80a23c8:	b510      	push	{r4, lr}
 80a23ca:	4604      	mov	r4, r0
 80a23cc:	2114      	movs	r1, #20
 80a23ce:	f000 fa54 	bl	80a287a <_ZdlPvj>
 80a23d2:	4620      	mov	r0, r4
 80a23d4:	bd10      	pop	{r4, pc}

080a23d6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a23d6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a23d8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a23da:	4604      	mov	r4, r0
 80a23dc:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a23de:	b925      	cbnz	r5, 80a23ea <_ZN11USARTSerial5writeEh+0x14>
 80a23e0:	7c00      	ldrb	r0, [r0, #16]
 80a23e2:	f7fe ffcd 	bl	80a1380 <HAL_USART_Available_Data_For_Write>
 80a23e6:	2800      	cmp	r0, #0
 80a23e8:	dd05      	ble.n	80a23f6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a23ea:	4631      	mov	r1, r6
 80a23ec:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a23ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a23f2:	f7fe bf95 	b.w	80a1320 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a23f6:	4628      	mov	r0, r5
 80a23f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080a23fc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a23fc:	b510      	push	{r4, lr}
 80a23fe:	4604      	mov	r4, r0
 80a2400:	4608      	mov	r0, r1
 80a2402:	4611      	mov	r1, r2
 80a2404:	2200      	movs	r2, #0
 80a2406:	6062      	str	r2, [r4, #4]
 80a2408:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a240c:	60a2      	str	r2, [r4, #8]
 80a240e:	4a05      	ldr	r2, [pc, #20]	; (80a2424 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2410:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2412:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2414:	2201      	movs	r2, #1
 80a2416:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2418:	461a      	mov	r2, r3
 80a241a:	f7fe ff79 	bl	80a1310 <HAL_USART_Init>
}
 80a241e:	4620      	mov	r0, r4
 80a2420:	bd10      	pop	{r4, pc}
 80a2422:	bf00      	nop
 80a2424:	080a5ef4 	.word	0x080a5ef4

080a2428 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80a2428:	2300      	movs	r3, #0
 80a242a:	7c00      	ldrb	r0, [r0, #16]
 80a242c:	f7fe bfb0 	b.w	80a1390 <HAL_USART_BeginConfig>

080a2430 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 80a2430:	2200      	movs	r2, #0
 80a2432:	f7ff bff9 	b.w	80a2428 <_ZN11USARTSerial5beginEmm>

080a2436 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a2436:	7c00      	ldrb	r0, [r0, #16]
 80a2438:	f7fe bf9a 	b.w	80a1370 <HAL_USART_Is_Enabled>

080a243c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a243c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a243e:	4d0c      	ldr	r5, [pc, #48]	; (80a2470 <_Z22__fetch_global_Serial1v+0x34>)
 80a2440:	6829      	ldr	r1, [r5, #0]
 80a2442:	f011 0401 	ands.w	r4, r1, #1
 80a2446:	d111      	bne.n	80a246c <_Z22__fetch_global_Serial1v+0x30>
 80a2448:	4628      	mov	r0, r5
 80a244a:	f7fd fe2c 	bl	80a00a6 <__cxa_guard_acquire>
 80a244e:	b168      	cbz	r0, 80a246c <_Z22__fetch_global_Serial1v+0x30>
 80a2450:	4a08      	ldr	r2, [pc, #32]	; (80a2474 <_Z22__fetch_global_Serial1v+0x38>)
 80a2452:	4621      	mov	r1, r4
 80a2454:	4b08      	ldr	r3, [pc, #32]	; (80a2478 <_Z22__fetch_global_Serial1v+0x3c>)
 80a2456:	4809      	ldr	r0, [pc, #36]	; (80a247c <_Z22__fetch_global_Serial1v+0x40>)
 80a2458:	f7ff ffd0 	bl	80a23fc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a245c:	4628      	mov	r0, r5
 80a245e:	f7fd fe27 	bl	80a00b0 <__cxa_guard_release>
 80a2462:	4a07      	ldr	r2, [pc, #28]	; (80a2480 <_Z22__fetch_global_Serial1v+0x44>)
 80a2464:	4907      	ldr	r1, [pc, #28]	; (80a2484 <_Z22__fetch_global_Serial1v+0x48>)
 80a2466:	4805      	ldr	r0, [pc, #20]	; (80a247c <_Z22__fetch_global_Serial1v+0x40>)
 80a2468:	f000 fa02 	bl	80a2870 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a246c:	4803      	ldr	r0, [pc, #12]	; (80a247c <_Z22__fetch_global_Serial1v+0x40>)
 80a246e:	bd38      	pop	{r3, r4, r5, pc}
 80a2470:	20000640 	.word	0x20000640
 80a2474:	20000644 	.word	0x20000644
 80a2478:	200005bc 	.word	0x200005bc
 80a247c:	200005a8 	.word	0x200005a8
 80a2480:	200000b8 	.word	0x200000b8
 80a2484:	080a2379 	.word	0x080a2379

080a2488 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a2488:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a248a:	6883      	ldr	r3, [r0, #8]
 80a248c:	4604      	mov	r4, r0
 80a248e:	b90b      	cbnz	r3, 80a2494 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a2490:	f000 f9f5 	bl	80a287e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2494:	68c3      	ldr	r3, [r0, #12]
 80a2496:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a2498:	68a3      	ldr	r3, [r4, #8]
 80a249a:	b11b      	cbz	r3, 80a24a4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a249c:	2203      	movs	r2, #3
 80a249e:	4621      	mov	r1, r4
 80a24a0:	4620      	mov	r0, r4
 80a24a2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a24a4:	4620      	mov	r0, r4
}
 80a24a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a24aa:	2110      	movs	r1, #16
 80a24ac:	f000 b9e5 	b.w	80a287a <_ZdlPvj>

080a24b0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a24b0:	4770      	bx	lr

080a24b2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a24b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a24b4:	4606      	mov	r6, r0
 80a24b6:	4615      	mov	r5, r2
 80a24b8:	460c      	mov	r4, r1
 80a24ba:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a24bc:	42bc      	cmp	r4, r7
 80a24be:	d006      	beq.n	80a24ce <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a24c0:	6833      	ldr	r3, [r6, #0]
 80a24c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a24c6:	689b      	ldr	r3, [r3, #8]
 80a24c8:	4630      	mov	r0, r6
 80a24ca:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a24cc:	e7f6      	b.n	80a24bc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a24ce:	4628      	mov	r0, r5
 80a24d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a24d2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a24d2:	2200      	movs	r2, #0
 80a24d4:	7c00      	ldrb	r0, [r0, #16]
 80a24d6:	f7fe bf83 	b.w	80a13e0 <HAL_I2C_Write_Data>

080a24da <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a24da:	2100      	movs	r1, #0
 80a24dc:	7c00      	ldrb	r0, [r0, #16]
 80a24de:	f7fe bf87 	b.w	80a13f0 <HAL_I2C_Available_Data>

080a24e2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a24e2:	2100      	movs	r1, #0
 80a24e4:	7c00      	ldrb	r0, [r0, #16]
 80a24e6:	f7fe bf8b 	b.w	80a1400 <HAL_I2C_Read_Data>

080a24ea <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a24ea:	2100      	movs	r1, #0
 80a24ec:	7c00      	ldrb	r0, [r0, #16]
 80a24ee:	f7fe bf8f 	b.w	80a1410 <HAL_I2C_Peek_Data>

080a24f2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a24f2:	2100      	movs	r1, #0
 80a24f4:	7c00      	ldrb	r0, [r0, #16]
 80a24f6:	f7fe bf93 	b.w	80a1420 <HAL_I2C_Flush_Data>

080a24fa <_ZN7TwoWireD0Ev>:
 80a24fa:	b510      	push	{r4, lr}
 80a24fc:	4604      	mov	r4, r0
 80a24fe:	2114      	movs	r1, #20
 80a2500:	f000 f9bb 	bl	80a287a <_ZdlPvj>
 80a2504:	4620      	mov	r0, r4
 80a2506:	bd10      	pop	{r4, pc}

080a2508 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2508:	b510      	push	{r4, lr}
 80a250a:	4604      	mov	r4, r0
 80a250c:	4608      	mov	r0, r1
 80a250e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2512:	60a3      	str	r3, [r4, #8]
 80a2514:	4b04      	ldr	r3, [pc, #16]	; (80a2528 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a2516:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a2518:	7420      	strb	r0, [r4, #16]
 80a251a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a251c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a251e:	f7fe ff8f 	bl	80a1440 <HAL_I2C_Init>

}
 80a2522:	4620      	mov	r0, r4
 80a2524:	bd10      	pop	{r4, pc}
 80a2526:	bf00      	nop
 80a2528:	080a5f24 	.word	0x080a5f24

080a252c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a252c:	2300      	movs	r3, #0
 80a252e:	461a      	mov	r2, r3
 80a2530:	4619      	mov	r1, r3
 80a2532:	7c00      	ldrb	r0, [r0, #16]
 80a2534:	f7fe bf34 	b.w	80a13a0 <HAL_I2C_Begin>

080a2538 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a2538:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a253a:	2400      	movs	r4, #0
 80a253c:	7c00      	ldrb	r0, [r0, #16]
 80a253e:	9400      	str	r4, [sp, #0]
 80a2540:	f7fe ff36 	bl	80a13b0 <HAL_I2C_Request_Data>
  return result;
}
 80a2544:	b2c0      	uxtb	r0, r0
 80a2546:	b002      	add	sp, #8
 80a2548:	bd10      	pop	{r4, pc}

080a254a <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a254a:	2301      	movs	r3, #1
 80a254c:	b2d2      	uxtb	r2, r2
 80a254e:	b2c9      	uxtb	r1, r1
 80a2550:	f7ff bff2 	b.w	80a2538 <_ZN7TwoWire11requestFromEhhh>

080a2554 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a2554:	2200      	movs	r2, #0
 80a2556:	7c00      	ldrb	r0, [r0, #16]
 80a2558:	f7fe bf32 	b.w	80a13c0 <HAL_I2C_Begin_Transmission>

080a255c <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a255c:	b2c9      	uxtb	r1, r1
 80a255e:	f7ff bff9 	b.w	80a2554 <_ZN7TwoWire17beginTransmissionEh>

080a2562 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a2562:	2200      	movs	r2, #0
 80a2564:	7c00      	ldrb	r0, [r0, #16]
 80a2566:	f7fe bf33 	b.w	80a13d0 <HAL_I2C_End_Transmission>

080a256a <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a256a:	2101      	movs	r1, #1
 80a256c:	f7ff bff9 	b.w	80a2562 <_ZN7TwoWire15endTransmissionEh>

080a2570 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a2570:	2100      	movs	r1, #0
 80a2572:	7c00      	ldrb	r0, [r0, #16]
 80a2574:	f7fe bf5c 	b.w	80a1430 <HAL_I2C_Is_Enabled>

080a2578 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2578:	2200      	movs	r2, #0
 80a257a:	4611      	mov	r1, r2
 80a257c:	6840      	ldr	r0, [r0, #4]
 80a257e:	f7fe bff5 	b.w	80a156c <network_ready>

080a2582 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2582:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2584:	4616      	mov	r6, r2
 80a2586:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2588:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a258a:	460f      	mov	r7, r1
 80a258c:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a258e:	2100      	movs	r1, #0
 80a2590:	a803      	add	r0, sp, #12
 80a2592:	f001 fc84 	bl	80a3e9e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2596:	4630      	mov	r0, r6
 80a2598:	f001 fce3 	bl	80a3f62 <strlen>
 80a259c:	2500      	movs	r5, #0
 80a259e:	9500      	str	r5, [sp, #0]
 80a25a0:	b281      	uxth	r1, r0
 80a25a2:	687b      	ldr	r3, [r7, #4]
 80a25a4:	aa03      	add	r2, sp, #12
 80a25a6:	4630      	mov	r0, r6
 80a25a8:	f7fe ff8c 	bl	80a14c4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a25ac:	b120      	cbz	r0, 80a25b8 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a25ae:	4629      	mov	r1, r5
 80a25b0:	4620      	mov	r0, r4
 80a25b2:	f7ff fded 	bl	80a2190 <_ZN9IPAddressC1Em>
 80a25b6:	e003      	b.n	80a25c0 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a25b8:	a903      	add	r1, sp, #12
 80a25ba:	4620      	mov	r0, r4
 80a25bc:	f7ff fdd6 	bl	80a216c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a25c0:	4620      	mov	r0, r4
 80a25c2:	b009      	add	sp, #36	; 0x24
 80a25c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a25c6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a25c6:	2200      	movs	r2, #0
 80a25c8:	4611      	mov	r1, r2
 80a25ca:	6840      	ldr	r0, [r0, #4]
 80a25cc:	f7fe bfee 	b.w	80a15ac <network_listening>

080a25d0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a25d0:	2200      	movs	r2, #0
 80a25d2:	4611      	mov	r1, r2
 80a25d4:	6840      	ldr	r0, [r0, #4]
 80a25d6:	f7fe bff9 	b.w	80a15cc <network_get_listen_timeout>

080a25da <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a25da:	2200      	movs	r2, #0
 80a25dc:	6840      	ldr	r0, [r0, #4]
 80a25de:	f7fe bfed 	b.w	80a15bc <network_set_listen_timeout>

080a25e2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a25e2:	2200      	movs	r2, #0
 80a25e4:	f081 0101 	eor.w	r1, r1, #1
 80a25e8:	6840      	ldr	r0, [r0, #4]
 80a25ea:	f7fe bfd7 	b.w	80a159c <network_listen>

080a25ee <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a25ee:	2300      	movs	r3, #0
 80a25f0:	461a      	mov	r2, r3
 80a25f2:	4619      	mov	r1, r3
 80a25f4:	6840      	ldr	r0, [r0, #4]
 80a25f6:	f7fe bfc9 	b.w	80a158c <network_off>

080a25fa <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a25fa:	2200      	movs	r2, #0
 80a25fc:	4611      	mov	r1, r2
 80a25fe:	6840      	ldr	r0, [r0, #4]
 80a2600:	f7fe bfa4 	b.w	80a154c <network_connecting>

080a2604 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2604:	2200      	movs	r2, #0
 80a2606:	2102      	movs	r1, #2
 80a2608:	6840      	ldr	r0, [r0, #4]
 80a260a:	f7fe bfa7 	b.w	80a155c <network_disconnect>

080a260e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a260e:	2300      	movs	r3, #0
 80a2610:	461a      	mov	r2, r3
 80a2612:	6840      	ldr	r0, [r0, #4]
 80a2614:	f7fe bf92 	b.w	80a153c <network_connect>

080a2618 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2618:	4b02      	ldr	r3, [pc, #8]	; (80a2624 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a261a:	2204      	movs	r2, #4
 80a261c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a261e:	4a02      	ldr	r2, [pc, #8]	; (80a2628 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2620:	601a      	str	r2, [r3, #0]
 80a2622:	4770      	bx	lr
 80a2624:	200006c8 	.word	0x200006c8
 80a2628:	080a5f4c 	.word	0x080a5f4c

080a262c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a262c:	2300      	movs	r3, #0
 80a262e:	461a      	mov	r2, r3
 80a2630:	6840      	ldr	r0, [r0, #4]
 80a2632:	f7fe bf83 	b.w	80a153c <network_connect>

080a2636 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2636:	2200      	movs	r2, #0
 80a2638:	2102      	movs	r1, #2
 80a263a:	6840      	ldr	r0, [r0, #4]
 80a263c:	f7fe bf8e 	b.w	80a155c <network_disconnect>

080a2640 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2640:	2200      	movs	r2, #0
 80a2642:	4611      	mov	r1, r2
 80a2644:	6840      	ldr	r0, [r0, #4]
 80a2646:	f7fe bf81 	b.w	80a154c <network_connecting>

080a264a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a264a:	2200      	movs	r2, #0
 80a264c:	4611      	mov	r1, r2
 80a264e:	6840      	ldr	r0, [r0, #4]
 80a2650:	f7fe bf8c 	b.w	80a156c <network_ready>

080a2654 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2654:	2300      	movs	r3, #0
 80a2656:	461a      	mov	r2, r3
 80a2658:	4619      	mov	r1, r3
 80a265a:	6840      	ldr	r0, [r0, #4]
 80a265c:	f7fe bf8e 	b.w	80a157c <network_on>

080a2660 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2660:	2300      	movs	r3, #0
 80a2662:	461a      	mov	r2, r3
 80a2664:	4619      	mov	r1, r3
 80a2666:	6840      	ldr	r0, [r0, #4]
 80a2668:	f7fe bf90 	b.w	80a158c <network_off>

080a266c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a266c:	2200      	movs	r2, #0
 80a266e:	f081 0101 	eor.w	r1, r1, #1
 80a2672:	6840      	ldr	r0, [r0, #4]
 80a2674:	f7fe bf92 	b.w	80a159c <network_listen>

080a2678 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2678:	2200      	movs	r2, #0
 80a267a:	6840      	ldr	r0, [r0, #4]
 80a267c:	f7fe bf9e 	b.w	80a15bc <network_set_listen_timeout>

080a2680 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2680:	2200      	movs	r2, #0
 80a2682:	4611      	mov	r1, r2
 80a2684:	6840      	ldr	r0, [r0, #4]
 80a2686:	f7fe bfa1 	b.w	80a15cc <network_get_listen_timeout>

080a268a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a268a:	2200      	movs	r2, #0
 80a268c:	4611      	mov	r1, r2
 80a268e:	6840      	ldr	r0, [r0, #4]
 80a2690:	f7fe bf8c 	b.w	80a15ac <network_listening>

080a2694 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2694:	b570      	push	{r4, r5, r6, lr}
 80a2696:	4616      	mov	r6, r2
 80a2698:	b08e      	sub	sp, #56	; 0x38
 80a269a:	4604      	mov	r4, r0
    IPAddress addr;
 80a269c:	a808      	add	r0, sp, #32
 80a269e:	f7ff fd57 	bl	80a2150 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a26a2:	2211      	movs	r2, #17
 80a26a4:	2100      	movs	r1, #0
 80a26a6:	a803      	add	r0, sp, #12
 80a26a8:	f001 fbf9 	bl	80a3e9e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a26ac:	4630      	mov	r0, r6
 80a26ae:	f001 fc58 	bl	80a3f62 <strlen>
 80a26b2:	2500      	movs	r5, #0
 80a26b4:	4b0a      	ldr	r3, [pc, #40]	; (80a26e0 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a26b6:	9500      	str	r5, [sp, #0]
 80a26b8:	b281      	uxth	r1, r0
 80a26ba:	685b      	ldr	r3, [r3, #4]
 80a26bc:	aa03      	add	r2, sp, #12
 80a26be:	4630      	mov	r0, r6
 80a26c0:	f7fe ff00 	bl	80a14c4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a26c4:	b120      	cbz	r0, 80a26d0 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a26c6:	4629      	mov	r1, r5
 80a26c8:	4620      	mov	r0, r4
 80a26ca:	f7ff fd61 	bl	80a2190 <_ZN9IPAddressC1Em>
 80a26ce:	e003      	b.n	80a26d8 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a26d0:	a903      	add	r1, sp, #12
 80a26d2:	4620      	mov	r0, r4
 80a26d4:	f7ff fd4a 	bl	80a216c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a26d8:	4620      	mov	r0, r4
 80a26da:	b00e      	add	sp, #56	; 0x38
 80a26dc:	bd70      	pop	{r4, r5, r6, pc}
 80a26de:	bf00      	nop
 80a26e0:	200006c8 	.word	0x200006c8

080a26e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a26e4:	4b02      	ldr	r3, [pc, #8]	; (80a26f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a26e6:	4a03      	ldr	r2, [pc, #12]	; (80a26f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a26e8:	601a      	str	r2, [r3, #0]
 80a26ea:	2200      	movs	r2, #0
 80a26ec:	605a      	str	r2, [r3, #4]
 80a26ee:	4770      	bx	lr
 80a26f0:	200006d0 	.word	0x200006d0
 80a26f4:	080a5f80 	.word	0x080a5f80

080a26f8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a26f8:	b510      	push	{r4, lr}
 80a26fa:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a26fc:	480f      	ldr	r0, [pc, #60]	; (80a273c <pinAvailable+0x44>)
 80a26fe:	f7ff f833 	bl	80a1768 <_ZN8SPIClass9isEnabledEv>
 80a2702:	b128      	cbz	r0, 80a2710 <pinAvailable+0x18>
 80a2704:	f1a4 030d 	sub.w	r3, r4, #13
 80a2708:	2b02      	cmp	r3, #2
 80a270a:	d801      	bhi.n	80a2710 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a270c:	2000      	movs	r0, #0
 80a270e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2710:	f000 f88e 	bl	80a2830 <_Z19__fetch_global_Wirev>
 80a2714:	f7ff ff2c 	bl	80a2570 <_ZN7TwoWire9isEnabledEv>
 80a2718:	b108      	cbz	r0, 80a271e <pinAvailable+0x26>
 80a271a:	2c01      	cmp	r4, #1
 80a271c:	d9f6      	bls.n	80a270c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a271e:	f7ff fe8d 	bl	80a243c <_Z22__fetch_global_Serial1v>
 80a2722:	f7ff fe88 	bl	80a2436 <_ZN11USARTSerial9isEnabledEv>
 80a2726:	b118      	cbz	r0, 80a2730 <pinAvailable+0x38>
 80a2728:	f1a4 0312 	sub.w	r3, r4, #18
 80a272c:	2b01      	cmp	r3, #1
 80a272e:	d9ed      	bls.n	80a270c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2730:	2c17      	cmp	r4, #23
 80a2732:	bf8c      	ite	hi
 80a2734:	2000      	movhi	r0, #0
 80a2736:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2738:	bd10      	pop	{r4, pc}
 80a273a:	bf00      	nop
 80a273c:	200006d8 	.word	0x200006d8

080a2740 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2740:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a2742:	b538      	push	{r3, r4, r5, lr}
 80a2744:	4604      	mov	r4, r0
 80a2746:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2748:	d80a      	bhi.n	80a2760 <pinMode+0x20>
 80a274a:	29ff      	cmp	r1, #255	; 0xff
 80a274c:	d008      	beq.n	80a2760 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a274e:	f7ff ffd3 	bl	80a26f8 <pinAvailable>
 80a2752:	b128      	cbz	r0, 80a2760 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2754:	4629      	mov	r1, r5
 80a2756:	4620      	mov	r0, r4
}
 80a2758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a275c:	f7fe bd60 	b.w	80a1220 <HAL_Pin_Mode>
 80a2760:	bd38      	pop	{r3, r4, r5, pc}

080a2762 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2762:	b538      	push	{r3, r4, r5, lr}
 80a2764:	4604      	mov	r4, r0
 80a2766:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2768:	f7fe fd62 	bl	80a1230 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a276c:	28ff      	cmp	r0, #255	; 0xff
 80a276e:	d010      	beq.n	80a2792 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2770:	2806      	cmp	r0, #6
 80a2772:	d804      	bhi.n	80a277e <digitalWrite+0x1c>
 80a2774:	234d      	movs	r3, #77	; 0x4d
 80a2776:	fa23 f000 	lsr.w	r0, r3, r0
 80a277a:	07c3      	lsls	r3, r0, #31
 80a277c:	d409      	bmi.n	80a2792 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a277e:	4620      	mov	r0, r4
 80a2780:	f7ff ffba 	bl	80a26f8 <pinAvailable>
 80a2784:	b128      	cbz	r0, 80a2792 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2786:	4629      	mov	r1, r5
 80a2788:	4620      	mov	r0, r4
}
 80a278a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a278e:	f7fe bd57 	b.w	80a1240 <HAL_GPIO_Write>
 80a2792:	bd38      	pop	{r3, r4, r5, pc}

080a2794 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a2794:	b510      	push	{r4, lr}
 80a2796:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2798:	f7fe fd4a 	bl	80a1230 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a279c:	3804      	subs	r0, #4
 80a279e:	b2c0      	uxtb	r0, r0
 80a27a0:	2801      	cmp	r0, #1
 80a27a2:	d908      	bls.n	80a27b6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a27a4:	4620      	mov	r0, r4
 80a27a6:	f7ff ffa7 	bl	80a26f8 <pinAvailable>
 80a27aa:	b120      	cbz	r0, 80a27b6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a27ac:	4620      	mov	r0, r4
}
 80a27ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a27b2:	f7fe bd4d 	b.w	80a1250 <HAL_GPIO_Read>
}
 80a27b6:	2000      	movs	r0, #0
 80a27b8:	bd10      	pop	{r4, pc}
	...

080a27bc <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a27bc:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a27be:	4c0c      	ldr	r4, [pc, #48]	; (80a27f0 <_GLOBAL__sub_I_SPI+0x34>)
 80a27c0:	4e0c      	ldr	r6, [pc, #48]	; (80a27f4 <_GLOBAL__sub_I_SPI+0x38>)
 80a27c2:	4d0d      	ldr	r5, [pc, #52]	; (80a27f8 <_GLOBAL__sub_I_SPI+0x3c>)
 80a27c4:	2100      	movs	r1, #0
 80a27c6:	4620      	mov	r0, r4
 80a27c8:	f7fe ff70 	bl	80a16ac <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a27cc:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a27ce:	4c0b      	ldr	r4, [pc, #44]	; (80a27fc <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a27d0:	4632      	mov	r2, r6
 80a27d2:	4629      	mov	r1, r5
 80a27d4:	f000 f84c 	bl	80a2870 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a27d8:	2101      	movs	r1, #1
 80a27da:	4620      	mov	r0, r4
 80a27dc:	f7fe ff66 	bl	80a16ac <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a27e0:	4632      	mov	r2, r6
 80a27e2:	4629      	mov	r1, r5
 80a27e4:	4620      	mov	r0, r4
 80a27e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a27ea:	f000 b841 	b.w	80a2870 <__aeabi_atexit>
 80a27ee:	bf00      	nop
 80a27f0:	200006d8 	.word	0x200006d8
 80a27f4:	200000b8 	.word	0x200000b8
 80a27f8:	080a169d 	.word	0x080a169d
 80a27fc:	200006e8 	.word	0x200006e8

080a2800 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2800:	b513      	push	{r0, r1, r4, lr}
 80a2802:	4c08      	ldr	r4, [pc, #32]	; (80a2824 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2804:	2300      	movs	r3, #0
 80a2806:	461a      	mov	r2, r3
 80a2808:	4619      	mov	r1, r3
 80a280a:	9300      	str	r3, [sp, #0]
 80a280c:	4620      	mov	r0, r4
 80a280e:	f7ff fcd5 	bl	80a21bc <_ZN9IPAddressC1Ehhhh>
 80a2812:	4620      	mov	r0, r4
 80a2814:	4a04      	ldr	r2, [pc, #16]	; (80a2828 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2816:	4905      	ldr	r1, [pc, #20]	; (80a282c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2818:	b002      	add	sp, #8
 80a281a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a281e:	f000 b827 	b.w	80a2870 <__aeabi_atexit>
 80a2822:	bf00      	nop
 80a2824:	200006fc 	.word	0x200006fc
 80a2828:	200000b8 	.word	0x200000b8
 80a282c:	080a210d 	.word	0x080a210d

080a2830 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a2830:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a2832:	4d0b      	ldr	r5, [pc, #44]	; (80a2860 <_Z19__fetch_global_Wirev+0x30>)
 80a2834:	6829      	ldr	r1, [r5, #0]
 80a2836:	f011 0401 	ands.w	r4, r1, #1
 80a283a:	d10f      	bne.n	80a285c <_Z19__fetch_global_Wirev+0x2c>
 80a283c:	4628      	mov	r0, r5
 80a283e:	f7fd fc32 	bl	80a00a6 <__cxa_guard_acquire>
 80a2842:	b158      	cbz	r0, 80a285c <_Z19__fetch_global_Wirev+0x2c>
 80a2844:	4621      	mov	r1, r4
 80a2846:	4807      	ldr	r0, [pc, #28]	; (80a2864 <_Z19__fetch_global_Wirev+0x34>)
 80a2848:	f7ff fe5e 	bl	80a2508 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a284c:	4628      	mov	r0, r5
 80a284e:	f7fd fc2f 	bl	80a00b0 <__cxa_guard_release>
 80a2852:	4a05      	ldr	r2, [pc, #20]	; (80a2868 <_Z19__fetch_global_Wirev+0x38>)
 80a2854:	4905      	ldr	r1, [pc, #20]	; (80a286c <_Z19__fetch_global_Wirev+0x3c>)
 80a2856:	4803      	ldr	r0, [pc, #12]	; (80a2864 <_Z19__fetch_global_Wirev+0x34>)
 80a2858:	f000 f80a 	bl	80a2870 <__aeabi_atexit>
	return wire;
}
 80a285c:	4801      	ldr	r0, [pc, #4]	; (80a2864 <_Z19__fetch_global_Wirev+0x34>)
 80a285e:	bd38      	pop	{r3, r4, r5, pc}
 80a2860:	20000714 	.word	0x20000714
 80a2864:	20000718 	.word	0x20000718
 80a2868:	200000b8 	.word	0x200000b8
 80a286c:	080a24b1 	.word	0x080a24b1

080a2870 <__aeabi_atexit>:
 80a2870:	460b      	mov	r3, r1
 80a2872:	4601      	mov	r1, r0
 80a2874:	4618      	mov	r0, r3
 80a2876:	f001 baf5 	b.w	80a3e64 <__cxa_atexit>

080a287a <_ZdlPvj>:
 80a287a:	f7fd bc12 	b.w	80a00a2 <_ZdlPv>

080a287e <_ZSt25__throw_bad_function_callv>:
 80a287e:	b508      	push	{r3, lr}
 80a2880:	f7fe fef4 	bl	80a166c <abort>

080a2884 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2884:	4b18      	ldr	r3, [pc, #96]	; (80a28e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2886:	681a      	ldr	r2, [r3, #0]
 80a2888:	07d1      	lsls	r1, r2, #31
 80a288a:	bf5c      	itt	pl
 80a288c:	2201      	movpl	r2, #1
 80a288e:	601a      	strpl	r2, [r3, #0]
 80a2890:	4b16      	ldr	r3, [pc, #88]	; (80a28ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2892:	681a      	ldr	r2, [r3, #0]
 80a2894:	07d2      	lsls	r2, r2, #31
 80a2896:	bf5c      	itt	pl
 80a2898:	2201      	movpl	r2, #1
 80a289a:	601a      	strpl	r2, [r3, #0]
 80a289c:	4b14      	ldr	r3, [pc, #80]	; (80a28f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a289e:	681a      	ldr	r2, [r3, #0]
 80a28a0:	07d0      	lsls	r0, r2, #31
 80a28a2:	bf5c      	itt	pl
 80a28a4:	2201      	movpl	r2, #1
 80a28a6:	601a      	strpl	r2, [r3, #0]
 80a28a8:	4b12      	ldr	r3, [pc, #72]	; (80a28f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a28aa:	681a      	ldr	r2, [r3, #0]
 80a28ac:	07d1      	lsls	r1, r2, #31
 80a28ae:	bf5c      	itt	pl
 80a28b0:	2201      	movpl	r2, #1
 80a28b2:	601a      	strpl	r2, [r3, #0]
 80a28b4:	4b10      	ldr	r3, [pc, #64]	; (80a28f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a28b6:	681a      	ldr	r2, [r3, #0]
 80a28b8:	07d2      	lsls	r2, r2, #31
 80a28ba:	bf5c      	itt	pl
 80a28bc:	2201      	movpl	r2, #1
 80a28be:	601a      	strpl	r2, [r3, #0]
 80a28c0:	4b0e      	ldr	r3, [pc, #56]	; (80a28fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a28c2:	681a      	ldr	r2, [r3, #0]
 80a28c4:	07d0      	lsls	r0, r2, #31
 80a28c6:	bf5c      	itt	pl
 80a28c8:	2201      	movpl	r2, #1
 80a28ca:	601a      	strpl	r2, [r3, #0]
 80a28cc:	4b0c      	ldr	r3, [pc, #48]	; (80a2900 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a28ce:	681a      	ldr	r2, [r3, #0]
 80a28d0:	07d1      	lsls	r1, r2, #31
 80a28d2:	bf5c      	itt	pl
 80a28d4:	2201      	movpl	r2, #1
 80a28d6:	601a      	strpl	r2, [r3, #0]
 80a28d8:	4b0a      	ldr	r3, [pc, #40]	; (80a2904 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a28da:	681a      	ldr	r2, [r3, #0]
 80a28dc:	07d2      	lsls	r2, r2, #31
 80a28de:	bf5c      	itt	pl
 80a28e0:	2201      	movpl	r2, #1
 80a28e2:	601a      	strpl	r2, [r3, #0]
 80a28e4:	4770      	bx	lr
 80a28e6:	bf00      	nop
 80a28e8:	20000748 	.word	0x20000748
 80a28ec:	20000744 	.word	0x20000744
 80a28f0:	20000740 	.word	0x20000740
 80a28f4:	2000073c 	.word	0x2000073c
 80a28f8:	20000738 	.word	0x20000738
 80a28fc:	20000734 	.word	0x20000734
 80a2900:	20000730 	.word	0x20000730
 80a2904:	2000072c 	.word	0x2000072c

080a2908 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2908:	4b24      	ldr	r3, [pc, #144]	; (80a299c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a290a:	681a      	ldr	r2, [r3, #0]
 80a290c:	07d0      	lsls	r0, r2, #31
 80a290e:	bf5c      	itt	pl
 80a2910:	2201      	movpl	r2, #1
 80a2912:	601a      	strpl	r2, [r3, #0]
 80a2914:	4b22      	ldr	r3, [pc, #136]	; (80a29a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2916:	681a      	ldr	r2, [r3, #0]
 80a2918:	07d1      	lsls	r1, r2, #31
 80a291a:	bf5c      	itt	pl
 80a291c:	2201      	movpl	r2, #1
 80a291e:	601a      	strpl	r2, [r3, #0]
 80a2920:	4b20      	ldr	r3, [pc, #128]	; (80a29a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2922:	681a      	ldr	r2, [r3, #0]
 80a2924:	07d2      	lsls	r2, r2, #31
 80a2926:	bf5c      	itt	pl
 80a2928:	2201      	movpl	r2, #1
 80a292a:	601a      	strpl	r2, [r3, #0]
 80a292c:	4b1e      	ldr	r3, [pc, #120]	; (80a29a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a292e:	681a      	ldr	r2, [r3, #0]
 80a2930:	07d0      	lsls	r0, r2, #31
 80a2932:	bf5c      	itt	pl
 80a2934:	2201      	movpl	r2, #1
 80a2936:	601a      	strpl	r2, [r3, #0]
 80a2938:	4b1c      	ldr	r3, [pc, #112]	; (80a29ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a293a:	681a      	ldr	r2, [r3, #0]
 80a293c:	07d1      	lsls	r1, r2, #31
 80a293e:	bf5c      	itt	pl
 80a2940:	2201      	movpl	r2, #1
 80a2942:	601a      	strpl	r2, [r3, #0]
 80a2944:	4b1a      	ldr	r3, [pc, #104]	; (80a29b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2946:	681a      	ldr	r2, [r3, #0]
 80a2948:	07d2      	lsls	r2, r2, #31
 80a294a:	bf5c      	itt	pl
 80a294c:	2201      	movpl	r2, #1
 80a294e:	601a      	strpl	r2, [r3, #0]
 80a2950:	4b18      	ldr	r3, [pc, #96]	; (80a29b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2952:	681a      	ldr	r2, [r3, #0]
 80a2954:	07d0      	lsls	r0, r2, #31
 80a2956:	bf5c      	itt	pl
 80a2958:	2201      	movpl	r2, #1
 80a295a:	601a      	strpl	r2, [r3, #0]
 80a295c:	4b16      	ldr	r3, [pc, #88]	; (80a29b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a295e:	681a      	ldr	r2, [r3, #0]
 80a2960:	07d1      	lsls	r1, r2, #31
 80a2962:	bf5c      	itt	pl
 80a2964:	2201      	movpl	r2, #1
 80a2966:	601a      	strpl	r2, [r3, #0]
 80a2968:	4b14      	ldr	r3, [pc, #80]	; (80a29bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a296a:	681a      	ldr	r2, [r3, #0]
 80a296c:	07d2      	lsls	r2, r2, #31
 80a296e:	bf5c      	itt	pl
 80a2970:	2201      	movpl	r2, #1
 80a2972:	601a      	strpl	r2, [r3, #0]
 80a2974:	4b12      	ldr	r3, [pc, #72]	; (80a29c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a2976:	681a      	ldr	r2, [r3, #0]
 80a2978:	07d0      	lsls	r0, r2, #31
 80a297a:	bf5c      	itt	pl
 80a297c:	2201      	movpl	r2, #1
 80a297e:	601a      	strpl	r2, [r3, #0]
 80a2980:	4b10      	ldr	r3, [pc, #64]	; (80a29c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2982:	681a      	ldr	r2, [r3, #0]
 80a2984:	07d1      	lsls	r1, r2, #31
 80a2986:	bf5c      	itt	pl
 80a2988:	2201      	movpl	r2, #1
 80a298a:	601a      	strpl	r2, [r3, #0]
 80a298c:	4b0e      	ldr	r3, [pc, #56]	; (80a29c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a298e:	681a      	ldr	r2, [r3, #0]
 80a2990:	07d2      	lsls	r2, r2, #31
 80a2992:	bf5c      	itt	pl
 80a2994:	2201      	movpl	r2, #1
 80a2996:	601a      	strpl	r2, [r3, #0]
 80a2998:	4770      	bx	lr
 80a299a:	bf00      	nop
 80a299c:	20000778 	.word	0x20000778
 80a29a0:	20000774 	.word	0x20000774
 80a29a4:	20000770 	.word	0x20000770
 80a29a8:	2000076c 	.word	0x2000076c
 80a29ac:	20000768 	.word	0x20000768
 80a29b0:	20000764 	.word	0x20000764
 80a29b4:	20000760 	.word	0x20000760
 80a29b8:	2000075c 	.word	0x2000075c
 80a29bc:	20000758 	.word	0x20000758
 80a29c0:	20000754 	.word	0x20000754
 80a29c4:	20000750 	.word	0x20000750
 80a29c8:	2000074c 	.word	0x2000074c

080a29cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a29cc:	4b24      	ldr	r3, [pc, #144]	; (80a2a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a29ce:	681a      	ldr	r2, [r3, #0]
 80a29d0:	07d0      	lsls	r0, r2, #31
 80a29d2:	bf5c      	itt	pl
 80a29d4:	2201      	movpl	r2, #1
 80a29d6:	601a      	strpl	r2, [r3, #0]
 80a29d8:	4b22      	ldr	r3, [pc, #136]	; (80a2a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a29da:	681a      	ldr	r2, [r3, #0]
 80a29dc:	07d1      	lsls	r1, r2, #31
 80a29de:	bf5c      	itt	pl
 80a29e0:	2201      	movpl	r2, #1
 80a29e2:	601a      	strpl	r2, [r3, #0]
 80a29e4:	4b20      	ldr	r3, [pc, #128]	; (80a2a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a29e6:	681a      	ldr	r2, [r3, #0]
 80a29e8:	07d2      	lsls	r2, r2, #31
 80a29ea:	bf5c      	itt	pl
 80a29ec:	2201      	movpl	r2, #1
 80a29ee:	601a      	strpl	r2, [r3, #0]
 80a29f0:	4b1e      	ldr	r3, [pc, #120]	; (80a2a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a29f2:	681a      	ldr	r2, [r3, #0]
 80a29f4:	07d0      	lsls	r0, r2, #31
 80a29f6:	bf5c      	itt	pl
 80a29f8:	2201      	movpl	r2, #1
 80a29fa:	601a      	strpl	r2, [r3, #0]
 80a29fc:	4b1c      	ldr	r3, [pc, #112]	; (80a2a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a29fe:	681a      	ldr	r2, [r3, #0]
 80a2a00:	07d1      	lsls	r1, r2, #31
 80a2a02:	bf5c      	itt	pl
 80a2a04:	2201      	movpl	r2, #1
 80a2a06:	601a      	strpl	r2, [r3, #0]
 80a2a08:	4b1a      	ldr	r3, [pc, #104]	; (80a2a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2a0a:	681a      	ldr	r2, [r3, #0]
 80a2a0c:	07d2      	lsls	r2, r2, #31
 80a2a0e:	bf5c      	itt	pl
 80a2a10:	2201      	movpl	r2, #1
 80a2a12:	601a      	strpl	r2, [r3, #0]
 80a2a14:	4b18      	ldr	r3, [pc, #96]	; (80a2a78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2a16:	681a      	ldr	r2, [r3, #0]
 80a2a18:	07d0      	lsls	r0, r2, #31
 80a2a1a:	bf5c      	itt	pl
 80a2a1c:	2201      	movpl	r2, #1
 80a2a1e:	601a      	strpl	r2, [r3, #0]
 80a2a20:	4b16      	ldr	r3, [pc, #88]	; (80a2a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2a22:	681a      	ldr	r2, [r3, #0]
 80a2a24:	07d1      	lsls	r1, r2, #31
 80a2a26:	bf5c      	itt	pl
 80a2a28:	2201      	movpl	r2, #1
 80a2a2a:	601a      	strpl	r2, [r3, #0]
 80a2a2c:	4b14      	ldr	r3, [pc, #80]	; (80a2a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2a2e:	681a      	ldr	r2, [r3, #0]
 80a2a30:	07d2      	lsls	r2, r2, #31
 80a2a32:	bf5c      	itt	pl
 80a2a34:	2201      	movpl	r2, #1
 80a2a36:	601a      	strpl	r2, [r3, #0]
 80a2a38:	4b12      	ldr	r3, [pc, #72]	; (80a2a84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2a3a:	681a      	ldr	r2, [r3, #0]
 80a2a3c:	07d0      	lsls	r0, r2, #31
 80a2a3e:	bf5c      	itt	pl
 80a2a40:	2201      	movpl	r2, #1
 80a2a42:	601a      	strpl	r2, [r3, #0]
 80a2a44:	4b10      	ldr	r3, [pc, #64]	; (80a2a88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2a46:	681a      	ldr	r2, [r3, #0]
 80a2a48:	07d1      	lsls	r1, r2, #31
 80a2a4a:	bf5c      	itt	pl
 80a2a4c:	2201      	movpl	r2, #1
 80a2a4e:	601a      	strpl	r2, [r3, #0]
 80a2a50:	4b0e      	ldr	r3, [pc, #56]	; (80a2a8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2a52:	681a      	ldr	r2, [r3, #0]
 80a2a54:	07d2      	lsls	r2, r2, #31
 80a2a56:	bf5c      	itt	pl
 80a2a58:	2201      	movpl	r2, #1
 80a2a5a:	601a      	strpl	r2, [r3, #0]
 80a2a5c:	4770      	bx	lr
 80a2a5e:	bf00      	nop
 80a2a60:	200007a8 	.word	0x200007a8
 80a2a64:	200007a4 	.word	0x200007a4
 80a2a68:	200007a0 	.word	0x200007a0
 80a2a6c:	2000079c 	.word	0x2000079c
 80a2a70:	20000798 	.word	0x20000798
 80a2a74:	20000794 	.word	0x20000794
 80a2a78:	20000790 	.word	0x20000790
 80a2a7c:	2000078c 	.word	0x2000078c
 80a2a80:	20000788 	.word	0x20000788
 80a2a84:	20000784 	.word	0x20000784
 80a2a88:	20000780 	.word	0x20000780
 80a2a8c:	2000077c 	.word	0x2000077c

080a2a90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2a90:	4b18      	ldr	r3, [pc, #96]	; (80a2af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2a92:	681a      	ldr	r2, [r3, #0]
 80a2a94:	07d1      	lsls	r1, r2, #31
 80a2a96:	bf5c      	itt	pl
 80a2a98:	2201      	movpl	r2, #1
 80a2a9a:	601a      	strpl	r2, [r3, #0]
 80a2a9c:	4b16      	ldr	r3, [pc, #88]	; (80a2af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2a9e:	681a      	ldr	r2, [r3, #0]
 80a2aa0:	07d2      	lsls	r2, r2, #31
 80a2aa2:	bf5c      	itt	pl
 80a2aa4:	2201      	movpl	r2, #1
 80a2aa6:	601a      	strpl	r2, [r3, #0]
 80a2aa8:	4b14      	ldr	r3, [pc, #80]	; (80a2afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2aaa:	681a      	ldr	r2, [r3, #0]
 80a2aac:	07d0      	lsls	r0, r2, #31
 80a2aae:	bf5c      	itt	pl
 80a2ab0:	2201      	movpl	r2, #1
 80a2ab2:	601a      	strpl	r2, [r3, #0]
 80a2ab4:	4b12      	ldr	r3, [pc, #72]	; (80a2b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2ab6:	681a      	ldr	r2, [r3, #0]
 80a2ab8:	07d1      	lsls	r1, r2, #31
 80a2aba:	bf5c      	itt	pl
 80a2abc:	2201      	movpl	r2, #1
 80a2abe:	601a      	strpl	r2, [r3, #0]
 80a2ac0:	4b10      	ldr	r3, [pc, #64]	; (80a2b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2ac2:	681a      	ldr	r2, [r3, #0]
 80a2ac4:	07d2      	lsls	r2, r2, #31
 80a2ac6:	bf5c      	itt	pl
 80a2ac8:	2201      	movpl	r2, #1
 80a2aca:	601a      	strpl	r2, [r3, #0]
 80a2acc:	4b0e      	ldr	r3, [pc, #56]	; (80a2b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2ace:	681a      	ldr	r2, [r3, #0]
 80a2ad0:	07d0      	lsls	r0, r2, #31
 80a2ad2:	bf5c      	itt	pl
 80a2ad4:	2201      	movpl	r2, #1
 80a2ad6:	601a      	strpl	r2, [r3, #0]
 80a2ad8:	4b0c      	ldr	r3, [pc, #48]	; (80a2b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2ada:	681a      	ldr	r2, [r3, #0]
 80a2adc:	07d1      	lsls	r1, r2, #31
 80a2ade:	bf5c      	itt	pl
 80a2ae0:	2201      	movpl	r2, #1
 80a2ae2:	601a      	strpl	r2, [r3, #0]
 80a2ae4:	4b0a      	ldr	r3, [pc, #40]	; (80a2b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2ae6:	681a      	ldr	r2, [r3, #0]
 80a2ae8:	07d2      	lsls	r2, r2, #31
 80a2aea:	bf5c      	itt	pl
 80a2aec:	2201      	movpl	r2, #1
 80a2aee:	601a      	strpl	r2, [r3, #0]
 80a2af0:	4770      	bx	lr
 80a2af2:	bf00      	nop
 80a2af4:	200007c8 	.word	0x200007c8
 80a2af8:	200007c4 	.word	0x200007c4
 80a2afc:	200007c0 	.word	0x200007c0
 80a2b00:	200007bc 	.word	0x200007bc
 80a2b04:	200007b8 	.word	0x200007b8
 80a2b08:	200007b4 	.word	0x200007b4
 80a2b0c:	200007b0 	.word	0x200007b0
 80a2b10:	200007ac 	.word	0x200007ac

080a2b14 <fmod>:
 80a2b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2b18:	b08b      	sub	sp, #44	; 0x2c
 80a2b1a:	461d      	mov	r5, r3
 80a2b1c:	4680      	mov	r8, r0
 80a2b1e:	4689      	mov	r9, r1
 80a2b20:	4614      	mov	r4, r2
 80a2b22:	f000 f859 	bl	80a2bd8 <__ieee754_fmod>
 80a2b26:	4b2a      	ldr	r3, [pc, #168]	; (80a2bd0 <fmod+0xbc>)
 80a2b28:	4606      	mov	r6, r0
 80a2b2a:	f993 a000 	ldrsb.w	sl, [r3]
 80a2b2e:	460f      	mov	r7, r1
 80a2b30:	f1ba 3fff 	cmp.w	sl, #4294967295
 80a2b34:	d02f      	beq.n	80a2b96 <fmod+0x82>
 80a2b36:	4622      	mov	r2, r4
 80a2b38:	462b      	mov	r3, r5
 80a2b3a:	4620      	mov	r0, r4
 80a2b3c:	4629      	mov	r1, r5
 80a2b3e:	f000 fdbd 	bl	80a36bc <__aeabi_dcmpun>
 80a2b42:	bb40      	cbnz	r0, 80a2b96 <fmod+0x82>
 80a2b44:	4642      	mov	r2, r8
 80a2b46:	464b      	mov	r3, r9
 80a2b48:	4640      	mov	r0, r8
 80a2b4a:	4649      	mov	r1, r9
 80a2b4c:	f000 fdb6 	bl	80a36bc <__aeabi_dcmpun>
 80a2b50:	4683      	mov	fp, r0
 80a2b52:	bb00      	cbnz	r0, 80a2b96 <fmod+0x82>
 80a2b54:	2200      	movs	r2, #0
 80a2b56:	2300      	movs	r3, #0
 80a2b58:	4620      	mov	r0, r4
 80a2b5a:	4629      	mov	r1, r5
 80a2b5c:	f000 fd7c 	bl	80a3658 <__aeabi_dcmpeq>
 80a2b60:	b1c8      	cbz	r0, 80a2b96 <fmod+0x82>
 80a2b62:	4a1c      	ldr	r2, [pc, #112]	; (80a2bd4 <fmod+0xc0>)
 80a2b64:	2301      	movs	r3, #1
 80a2b66:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80a2b6a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80a2b6e:	f8cd b020 	str.w	fp, [sp, #32]
 80a2b72:	9201      	str	r2, [sp, #4]
 80a2b74:	9300      	str	r3, [sp, #0]
 80a2b76:	f1ba 0f00 	cmp.w	sl, #0
 80a2b7a:	d111      	bne.n	80a2ba0 <fmod+0x8c>
 80a2b7c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80a2b80:	4668      	mov	r0, sp
 80a2b82:	f000 f947 	bl	80a2e14 <matherr>
 80a2b86:	b1b0      	cbz	r0, 80a2bb6 <fmod+0xa2>
 80a2b88:	9b08      	ldr	r3, [sp, #32]
 80a2b8a:	b9db      	cbnz	r3, 80a2bc4 <fmod+0xb0>
 80a2b8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a2b90:	b00b      	add	sp, #44	; 0x2c
 80a2b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2b96:	4630      	mov	r0, r6
 80a2b98:	4639      	mov	r1, r7
 80a2b9a:	b00b      	add	sp, #44	; 0x2c
 80a2b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2ba0:	2200      	movs	r2, #0
 80a2ba2:	2300      	movs	r3, #0
 80a2ba4:	4610      	mov	r0, r2
 80a2ba6:	4619      	mov	r1, r3
 80a2ba8:	f000 fc18 	bl	80a33dc <__aeabi_ddiv>
 80a2bac:	f1ba 0f02 	cmp.w	sl, #2
 80a2bb0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a2bb4:	d1e4      	bne.n	80a2b80 <fmod+0x6c>
 80a2bb6:	f7fe fd69 	bl	80a168c <__errno>
 80a2bba:	2321      	movs	r3, #33	; 0x21
 80a2bbc:	6003      	str	r3, [r0, #0]
 80a2bbe:	9b08      	ldr	r3, [sp, #32]
 80a2bc0:	2b00      	cmp	r3, #0
 80a2bc2:	d0e3      	beq.n	80a2b8c <fmod+0x78>
 80a2bc4:	f7fe fd62 	bl	80a168c <__errno>
 80a2bc8:	9b08      	ldr	r3, [sp, #32]
 80a2bca:	6003      	str	r3, [r0, #0]
 80a2bcc:	e7de      	b.n	80a2b8c <fmod+0x78>
 80a2bce:	bf00      	nop
 80a2bd0:	20000014 	.word	0x20000014
 80a2bd4:	080a5fac 	.word	0x080a5fac

080a2bd8 <__ieee754_fmod>:
 80a2bd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2bdc:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80a2be0:	ea52 0609 	orrs.w	r6, r2, r9
 80a2be4:	d020      	beq.n	80a2c28 <__ieee754_fmod+0x50>
 80a2be6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a2bea:	4f83      	ldr	r7, [pc, #524]	; (80a2df8 <__ieee754_fmod+0x220>)
 80a2bec:	ea81 0806 	eor.w	r8, r1, r6
 80a2bf0:	45b8      	cmp	r8, r7
 80a2bf2:	dc19      	bgt.n	80a2c28 <__ieee754_fmod+0x50>
 80a2bf4:	4257      	negs	r7, r2
 80a2bf6:	4317      	orrs	r7, r2
 80a2bf8:	f8df b214 	ldr.w	fp, [pc, #532]	; 80a2e10 <__ieee754_fmod+0x238>
 80a2bfc:	ea49 77d7 	orr.w	r7, r9, r7, lsr #31
 80a2c00:	455f      	cmp	r7, fp
 80a2c02:	4694      	mov	ip, r2
 80a2c04:	d810      	bhi.n	80a2c28 <__ieee754_fmod+0x50>
 80a2c06:	45c8      	cmp	r8, r9
 80a2c08:	461d      	mov	r5, r3
 80a2c0a:	4682      	mov	sl, r0
 80a2c0c:	4604      	mov	r4, r0
 80a2c0e:	4696      	mov	lr, r2
 80a2c10:	dc12      	bgt.n	80a2c38 <__ieee754_fmod+0x60>
 80a2c12:	db0f      	blt.n	80a2c34 <__ieee754_fmod+0x5c>
 80a2c14:	4290      	cmp	r0, r2
 80a2c16:	d30d      	bcc.n	80a2c34 <__ieee754_fmod+0x5c>
 80a2c18:	d10e      	bne.n	80a2c38 <__ieee754_fmod+0x60>
 80a2c1a:	4b78      	ldr	r3, [pc, #480]	; (80a2dfc <__ieee754_fmod+0x224>)
 80a2c1c:	0ff6      	lsrs	r6, r6, #31
 80a2c1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80a2c22:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a2c26:	e005      	b.n	80a2c34 <__ieee754_fmod+0x5c>
 80a2c28:	f000 faae 	bl	80a3188 <__aeabi_dmul>
 80a2c2c:	4602      	mov	r2, r0
 80a2c2e:	460b      	mov	r3, r1
 80a2c30:	f000 fbd4 	bl	80a33dc <__aeabi_ddiv>
 80a2c34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2c38:	f5b8 1f80 	cmp.w	r8, #1048576	; 0x100000
 80a2c3c:	da0e      	bge.n	80a2c5c <__ieee754_fmod+0x84>
 80a2c3e:	f1b8 0f00 	cmp.w	r8, #0
 80a2c42:	f040 809c 	bne.w	80a2d7e <__ieee754_fmod+0x1a6>
 80a2c46:	f1ba 0f00 	cmp.w	sl, #0
 80a2c4a:	4653      	mov	r3, sl
 80a2c4c:	496c      	ldr	r1, [pc, #432]	; (80a2e00 <__ieee754_fmod+0x228>)
 80a2c4e:	dd09      	ble.n	80a2c64 <__ieee754_fmod+0x8c>
 80a2c50:	005b      	lsls	r3, r3, #1
 80a2c52:	2b00      	cmp	r3, #0
 80a2c54:	f101 31ff 	add.w	r1, r1, #4294967295
 80a2c58:	dcfa      	bgt.n	80a2c50 <__ieee754_fmod+0x78>
 80a2c5a:	e003      	b.n	80a2c64 <__ieee754_fmod+0x8c>
 80a2c5c:	ea4f 5128 	mov.w	r1, r8, asr #20
 80a2c60:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80a2c64:	f5b9 1f80 	cmp.w	r9, #1048576	; 0x100000
 80a2c68:	da0e      	bge.n	80a2c88 <__ieee754_fmod+0xb0>
 80a2c6a:	f1b9 0f00 	cmp.w	r9, #0
 80a2c6e:	f040 809f 	bne.w	80a2db0 <__ieee754_fmod+0x1d8>
 80a2c72:	f1bc 0f00 	cmp.w	ip, #0
 80a2c76:	4663      	mov	r3, ip
 80a2c78:	4f61      	ldr	r7, [pc, #388]	; (80a2e00 <__ieee754_fmod+0x228>)
 80a2c7a:	dd09      	ble.n	80a2c90 <__ieee754_fmod+0xb8>
 80a2c7c:	005b      	lsls	r3, r3, #1
 80a2c7e:	2b00      	cmp	r3, #0
 80a2c80:	f107 37ff 	add.w	r7, r7, #4294967295
 80a2c84:	dcfa      	bgt.n	80a2c7c <__ieee754_fmod+0xa4>
 80a2c86:	e003      	b.n	80a2c90 <__ieee754_fmod+0xb8>
 80a2c88:	ea4f 5729 	mov.w	r7, r9, asr #20
 80a2c8c:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 80a2c90:	4b5c      	ldr	r3, [pc, #368]	; (80a2e04 <__ieee754_fmod+0x22c>)
 80a2c92:	4299      	cmp	r1, r3
 80a2c94:	db56      	blt.n	80a2d44 <__ieee754_fmod+0x16c>
 80a2c96:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80a2c9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2c9e:	4a59      	ldr	r2, [pc, #356]	; (80a2e04 <__ieee754_fmod+0x22c>)
 80a2ca0:	4297      	cmp	r7, r2
 80a2ca2:	db5e      	blt.n	80a2d62 <__ieee754_fmod+0x18a>
 80a2ca4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80a2ca8:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 80a2cac:	1bc9      	subs	r1, r1, r7
 80a2cae:	e007      	b.n	80a2cc0 <__ieee754_fmod+0xe8>
 80a2cb0:	ea52 0300 	orrs.w	r3, r2, r0
 80a2cb4:	d013      	beq.n	80a2cde <__ieee754_fmod+0x106>
 80a2cb6:	0fc3      	lsrs	r3, r0, #31
 80a2cb8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80a2cbc:	0044      	lsls	r4, r0, #1
 80a2cbe:	3901      	subs	r1, #1
 80a2cc0:	ebce 0004 	rsb	r0, lr, r4
 80a2cc4:	1b5a      	subs	r2, r3, r5
 80a2cc6:	b189      	cbz	r1, 80a2cec <__ieee754_fmod+0x114>
 80a2cc8:	4574      	cmp	r4, lr
 80a2cca:	bf38      	it	cc
 80a2ccc:	f102 32ff 	addcc.w	r2, r2, #4294967295
 80a2cd0:	2a00      	cmp	r2, #0
 80a2cd2:	daed      	bge.n	80a2cb0 <__ieee754_fmod+0xd8>
 80a2cd4:	0fe2      	lsrs	r2, r4, #31
 80a2cd6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80a2cda:	0064      	lsls	r4, r4, #1
 80a2cdc:	e7ef      	b.n	80a2cbe <__ieee754_fmod+0xe6>
 80a2cde:	4b47      	ldr	r3, [pc, #284]	; (80a2dfc <__ieee754_fmod+0x224>)
 80a2ce0:	0ff6      	lsrs	r6, r6, #31
 80a2ce2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80a2ce6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80a2cea:	e7a3      	b.n	80a2c34 <__ieee754_fmod+0x5c>
 80a2cec:	4615      	mov	r5, r2
 80a2cee:	4574      	cmp	r4, lr
 80a2cf0:	bf38      	it	cc
 80a2cf2:	f102 35ff 	addcc.w	r5, r2, #4294967295
 80a2cf6:	2d00      	cmp	r5, #0
 80a2cf8:	bfb4      	ite	lt
 80a2cfa:	461d      	movlt	r5, r3
 80a2cfc:	ebce 0404 	rsbge	r4, lr, r4
 80a2d00:	ea55 0304 	orrs.w	r3, r5, r4
 80a2d04:	d0eb      	beq.n	80a2cde <__ieee754_fmod+0x106>
 80a2d06:	4a40      	ldr	r2, [pc, #256]	; (80a2e08 <__ieee754_fmod+0x230>)
 80a2d08:	4295      	cmp	r5, r2
 80a2d0a:	dc08      	bgt.n	80a2d1e <__ieee754_fmod+0x146>
 80a2d0c:	0fe3      	lsrs	r3, r4, #31
 80a2d0e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80a2d12:	4295      	cmp	r5, r2
 80a2d14:	f107 37ff 	add.w	r7, r7, #4294967295
 80a2d18:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80a2d1c:	ddf6      	ble.n	80a2d0c <__ieee754_fmod+0x134>
 80a2d1e:	4b39      	ldr	r3, [pc, #228]	; (80a2e04 <__ieee754_fmod+0x22c>)
 80a2d20:	429f      	cmp	r7, r3
 80a2d22:	da4e      	bge.n	80a2dc2 <__ieee754_fmod+0x1ea>
 80a2d24:	4a37      	ldr	r2, [pc, #220]	; (80a2e04 <__ieee754_fmod+0x22c>)
 80a2d26:	1bd2      	subs	r2, r2, r7
 80a2d28:	2a14      	cmp	r2, #20
 80a2d2a:	dc54      	bgt.n	80a2dd6 <__ieee754_fmod+0x1fe>
 80a2d2c:	f1c2 0320 	rsb	r3, r2, #32
 80a2d30:	40d4      	lsrs	r4, r2
 80a2d32:	fa05 f303 	lsl.w	r3, r5, r3
 80a2d36:	4323      	orrs	r3, r4
 80a2d38:	fa45 f202 	asr.w	r2, r5, r2
 80a2d3c:	ea42 0106 	orr.w	r1, r2, r6
 80a2d40:	4618      	mov	r0, r3
 80a2d42:	e777      	b.n	80a2c34 <__ieee754_fmod+0x5c>
 80a2d44:	4c2f      	ldr	r4, [pc, #188]	; (80a2e04 <__ieee754_fmod+0x22c>)
 80a2d46:	1a64      	subs	r4, r4, r1
 80a2d48:	2c1f      	cmp	r4, #31
 80a2d4a:	dc2b      	bgt.n	80a2da4 <__ieee754_fmod+0x1cc>
 80a2d4c:	f1c4 0320 	rsb	r3, r4, #32
 80a2d50:	fa08 f804 	lsl.w	r8, r8, r4
 80a2d54:	fa2a f303 	lsr.w	r3, sl, r3
 80a2d58:	ea43 0308 	orr.w	r3, r3, r8
 80a2d5c:	fa0a f404 	lsl.w	r4, sl, r4
 80a2d60:	e79d      	b.n	80a2c9e <__ieee754_fmod+0xc6>
 80a2d62:	4828      	ldr	r0, [pc, #160]	; (80a2e04 <__ieee754_fmod+0x22c>)
 80a2d64:	1bc0      	subs	r0, r0, r7
 80a2d66:	281f      	cmp	r0, #31
 80a2d68:	dc15      	bgt.n	80a2d96 <__ieee754_fmod+0x1be>
 80a2d6a:	f1c0 0220 	rsb	r2, r0, #32
 80a2d6e:	fa09 f500 	lsl.w	r5, r9, r0
 80a2d72:	fa2c f202 	lsr.w	r2, ip, r2
 80a2d76:	4315      	orrs	r5, r2
 80a2d78:	fa0c fe00 	lsl.w	lr, ip, r0
 80a2d7c:	e796      	b.n	80a2cac <__ieee754_fmod+0xd4>
 80a2d7e:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 80a2d82:	2b00      	cmp	r3, #0
 80a2d84:	491f      	ldr	r1, [pc, #124]	; (80a2e04 <__ieee754_fmod+0x22c>)
 80a2d86:	f77f af6d 	ble.w	80a2c64 <__ieee754_fmod+0x8c>
 80a2d8a:	005b      	lsls	r3, r3, #1
 80a2d8c:	2b00      	cmp	r3, #0
 80a2d8e:	f101 31ff 	add.w	r1, r1, #4294967295
 80a2d92:	dcfa      	bgt.n	80a2d8a <__ieee754_fmod+0x1b2>
 80a2d94:	e766      	b.n	80a2c64 <__ieee754_fmod+0x8c>
 80a2d96:	4d1d      	ldr	r5, [pc, #116]	; (80a2e0c <__ieee754_fmod+0x234>)
 80a2d98:	f04f 0e00 	mov.w	lr, #0
 80a2d9c:	1bed      	subs	r5, r5, r7
 80a2d9e:	fa0c f505 	lsl.w	r5, ip, r5
 80a2da2:	e783      	b.n	80a2cac <__ieee754_fmod+0xd4>
 80a2da4:	4b19      	ldr	r3, [pc, #100]	; (80a2e0c <__ieee754_fmod+0x234>)
 80a2da6:	2400      	movs	r4, #0
 80a2da8:	1a5b      	subs	r3, r3, r1
 80a2daa:	fa0a f303 	lsl.w	r3, sl, r3
 80a2dae:	e776      	b.n	80a2c9e <__ieee754_fmod+0xc6>
 80a2db0:	4f14      	ldr	r7, [pc, #80]	; (80a2e04 <__ieee754_fmod+0x22c>)
 80a2db2:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 80a2db6:	005b      	lsls	r3, r3, #1
 80a2db8:	2b00      	cmp	r3, #0
 80a2dba:	f107 37ff 	add.w	r7, r7, #4294967295
 80a2dbe:	dcfa      	bgt.n	80a2db6 <__ieee754_fmod+0x1de>
 80a2dc0:	e766      	b.n	80a2c90 <__ieee754_fmod+0xb8>
 80a2dc2:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80a2dc6:	432e      	orrs	r6, r5
 80a2dc8:	f207 37ff 	addw	r7, r7, #1023	; 0x3ff
 80a2dcc:	ea46 5307 	orr.w	r3, r6, r7, lsl #20
 80a2dd0:	4620      	mov	r0, r4
 80a2dd2:	4619      	mov	r1, r3
 80a2dd4:	e72e      	b.n	80a2c34 <__ieee754_fmod+0x5c>
 80a2dd6:	2a1f      	cmp	r2, #31
 80a2dd8:	dc07      	bgt.n	80a2dea <__ieee754_fmod+0x212>
 80a2dda:	f1c2 0320 	rsb	r3, r2, #32
 80a2dde:	40d4      	lsrs	r4, r2
 80a2de0:	409d      	lsls	r5, r3
 80a2de2:	ea45 0304 	orr.w	r3, r5, r4
 80a2de6:	4632      	mov	r2, r6
 80a2de8:	e7a8      	b.n	80a2d3c <__ieee754_fmod+0x164>
 80a2dea:	4b08      	ldr	r3, [pc, #32]	; (80a2e0c <__ieee754_fmod+0x234>)
 80a2dec:	4632      	mov	r2, r6
 80a2dee:	1bdb      	subs	r3, r3, r7
 80a2df0:	fa45 f303 	asr.w	r3, r5, r3
 80a2df4:	e7a2      	b.n	80a2d3c <__ieee754_fmod+0x164>
 80a2df6:	bf00      	nop
 80a2df8:	7fefffff 	.word	0x7fefffff
 80a2dfc:	080a5fb8 	.word	0x080a5fb8
 80a2e00:	fffffbed 	.word	0xfffffbed
 80a2e04:	fffffc02 	.word	0xfffffc02
 80a2e08:	000fffff 	.word	0x000fffff
 80a2e0c:	fffffbe2 	.word	0xfffffbe2
 80a2e10:	7ff00000 	.word	0x7ff00000

080a2e14 <matherr>:
 80a2e14:	2000      	movs	r0, #0
 80a2e16:	4770      	bx	lr

080a2e18 <__aeabi_drsub>:
 80a2e18:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2e1c:	e002      	b.n	80a2e24 <__adddf3>
 80a2e1e:	bf00      	nop

080a2e20 <__aeabi_dsub>:
 80a2e20:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a2e24 <__adddf3>:
 80a2e24:	b530      	push	{r4, r5, lr}
 80a2e26:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a2e2a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a2e2e:	ea94 0f05 	teq	r4, r5
 80a2e32:	bf08      	it	eq
 80a2e34:	ea90 0f02 	teqeq	r0, r2
 80a2e38:	bf1f      	itttt	ne
 80a2e3a:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2e3e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2e42:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a2e46:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2e4a:	f000 80e2 	beq.w	80a3012 <__adddf3+0x1ee>
 80a2e4e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2e52:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a2e56:	bfb8      	it	lt
 80a2e58:	426d      	neglt	r5, r5
 80a2e5a:	dd0c      	ble.n	80a2e76 <__adddf3+0x52>
 80a2e5c:	442c      	add	r4, r5
 80a2e5e:	ea80 0202 	eor.w	r2, r0, r2
 80a2e62:	ea81 0303 	eor.w	r3, r1, r3
 80a2e66:	ea82 0000 	eor.w	r0, r2, r0
 80a2e6a:	ea83 0101 	eor.w	r1, r3, r1
 80a2e6e:	ea80 0202 	eor.w	r2, r0, r2
 80a2e72:	ea81 0303 	eor.w	r3, r1, r3
 80a2e76:	2d36      	cmp	r5, #54	; 0x36
 80a2e78:	bf88      	it	hi
 80a2e7a:	bd30      	pophi	{r4, r5, pc}
 80a2e7c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2e80:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2e84:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2e88:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2e8c:	d002      	beq.n	80a2e94 <__adddf3+0x70>
 80a2e8e:	4240      	negs	r0, r0
 80a2e90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2e94:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2e98:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2e9c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2ea0:	d002      	beq.n	80a2ea8 <__adddf3+0x84>
 80a2ea2:	4252      	negs	r2, r2
 80a2ea4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2ea8:	ea94 0f05 	teq	r4, r5
 80a2eac:	f000 80a7 	beq.w	80a2ffe <__adddf3+0x1da>
 80a2eb0:	f1a4 0401 	sub.w	r4, r4, #1
 80a2eb4:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2eb8:	db0d      	blt.n	80a2ed6 <__adddf3+0xb2>
 80a2eba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a2ebe:	fa22 f205 	lsr.w	r2, r2, r5
 80a2ec2:	1880      	adds	r0, r0, r2
 80a2ec4:	f141 0100 	adc.w	r1, r1, #0
 80a2ec8:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2ecc:	1880      	adds	r0, r0, r2
 80a2ece:	fa43 f305 	asr.w	r3, r3, r5
 80a2ed2:	4159      	adcs	r1, r3
 80a2ed4:	e00e      	b.n	80a2ef4 <__adddf3+0xd0>
 80a2ed6:	f1a5 0520 	sub.w	r5, r5, #32
 80a2eda:	f10e 0e20 	add.w	lr, lr, #32
 80a2ede:	2a01      	cmp	r2, #1
 80a2ee0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2ee4:	bf28      	it	cs
 80a2ee6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a2eea:	fa43 f305 	asr.w	r3, r3, r5
 80a2eee:	18c0      	adds	r0, r0, r3
 80a2ef0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2ef4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2ef8:	d507      	bpl.n	80a2f0a <__adddf3+0xe6>
 80a2efa:	f04f 0e00 	mov.w	lr, #0
 80a2efe:	f1dc 0c00 	rsbs	ip, ip, #0
 80a2f02:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a2f06:	eb6e 0101 	sbc.w	r1, lr, r1
 80a2f0a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a2f0e:	d31b      	bcc.n	80a2f48 <__adddf3+0x124>
 80a2f10:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a2f14:	d30c      	bcc.n	80a2f30 <__adddf3+0x10c>
 80a2f16:	0849      	lsrs	r1, r1, #1
 80a2f18:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2f1c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2f20:	f104 0401 	add.w	r4, r4, #1
 80a2f24:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2f28:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2f2c:	f080 809a 	bcs.w	80a3064 <__adddf3+0x240>
 80a2f30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2f34:	bf08      	it	eq
 80a2f36:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2f3a:	f150 0000 	adcs.w	r0, r0, #0
 80a2f3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2f42:	ea41 0105 	orr.w	r1, r1, r5
 80a2f46:	bd30      	pop	{r4, r5, pc}
 80a2f48:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2f4c:	4140      	adcs	r0, r0
 80a2f4e:	eb41 0101 	adc.w	r1, r1, r1
 80a2f52:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2f56:	f1a4 0401 	sub.w	r4, r4, #1
 80a2f5a:	d1e9      	bne.n	80a2f30 <__adddf3+0x10c>
 80a2f5c:	f091 0f00 	teq	r1, #0
 80a2f60:	bf04      	itt	eq
 80a2f62:	4601      	moveq	r1, r0
 80a2f64:	2000      	moveq	r0, #0
 80a2f66:	fab1 f381 	clz	r3, r1
 80a2f6a:	bf08      	it	eq
 80a2f6c:	3320      	addeq	r3, #32
 80a2f6e:	f1a3 030b 	sub.w	r3, r3, #11
 80a2f72:	f1b3 0220 	subs.w	r2, r3, #32
 80a2f76:	da0c      	bge.n	80a2f92 <__adddf3+0x16e>
 80a2f78:	320c      	adds	r2, #12
 80a2f7a:	dd08      	ble.n	80a2f8e <__adddf3+0x16a>
 80a2f7c:	f102 0c14 	add.w	ip, r2, #20
 80a2f80:	f1c2 020c 	rsb	r2, r2, #12
 80a2f84:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2f88:	fa21 f102 	lsr.w	r1, r1, r2
 80a2f8c:	e00c      	b.n	80a2fa8 <__adddf3+0x184>
 80a2f8e:	f102 0214 	add.w	r2, r2, #20
 80a2f92:	bfd8      	it	le
 80a2f94:	f1c2 0c20 	rsble	ip, r2, #32
 80a2f98:	fa01 f102 	lsl.w	r1, r1, r2
 80a2f9c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2fa0:	bfdc      	itt	le
 80a2fa2:	ea41 010c 	orrle.w	r1, r1, ip
 80a2fa6:	4090      	lslle	r0, r2
 80a2fa8:	1ae4      	subs	r4, r4, r3
 80a2faa:	bfa2      	ittt	ge
 80a2fac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2fb0:	4329      	orrge	r1, r5
 80a2fb2:	bd30      	popge	{r4, r5, pc}
 80a2fb4:	ea6f 0404 	mvn.w	r4, r4
 80a2fb8:	3c1f      	subs	r4, #31
 80a2fba:	da1c      	bge.n	80a2ff6 <__adddf3+0x1d2>
 80a2fbc:	340c      	adds	r4, #12
 80a2fbe:	dc0e      	bgt.n	80a2fde <__adddf3+0x1ba>
 80a2fc0:	f104 0414 	add.w	r4, r4, #20
 80a2fc4:	f1c4 0220 	rsb	r2, r4, #32
 80a2fc8:	fa20 f004 	lsr.w	r0, r0, r4
 80a2fcc:	fa01 f302 	lsl.w	r3, r1, r2
 80a2fd0:	ea40 0003 	orr.w	r0, r0, r3
 80a2fd4:	fa21 f304 	lsr.w	r3, r1, r4
 80a2fd8:	ea45 0103 	orr.w	r1, r5, r3
 80a2fdc:	bd30      	pop	{r4, r5, pc}
 80a2fde:	f1c4 040c 	rsb	r4, r4, #12
 80a2fe2:	f1c4 0220 	rsb	r2, r4, #32
 80a2fe6:	fa20 f002 	lsr.w	r0, r0, r2
 80a2fea:	fa01 f304 	lsl.w	r3, r1, r4
 80a2fee:	ea40 0003 	orr.w	r0, r0, r3
 80a2ff2:	4629      	mov	r1, r5
 80a2ff4:	bd30      	pop	{r4, r5, pc}
 80a2ff6:	fa21 f004 	lsr.w	r0, r1, r4
 80a2ffa:	4629      	mov	r1, r5
 80a2ffc:	bd30      	pop	{r4, r5, pc}
 80a2ffe:	f094 0f00 	teq	r4, #0
 80a3002:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a3006:	bf06      	itte	eq
 80a3008:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a300c:	3401      	addeq	r4, #1
 80a300e:	3d01      	subne	r5, #1
 80a3010:	e74e      	b.n	80a2eb0 <__adddf3+0x8c>
 80a3012:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3016:	bf18      	it	ne
 80a3018:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a301c:	d029      	beq.n	80a3072 <__adddf3+0x24e>
 80a301e:	ea94 0f05 	teq	r4, r5
 80a3022:	bf08      	it	eq
 80a3024:	ea90 0f02 	teqeq	r0, r2
 80a3028:	d005      	beq.n	80a3036 <__adddf3+0x212>
 80a302a:	ea54 0c00 	orrs.w	ip, r4, r0
 80a302e:	bf04      	itt	eq
 80a3030:	4619      	moveq	r1, r3
 80a3032:	4610      	moveq	r0, r2
 80a3034:	bd30      	pop	{r4, r5, pc}
 80a3036:	ea91 0f03 	teq	r1, r3
 80a303a:	bf1e      	ittt	ne
 80a303c:	2100      	movne	r1, #0
 80a303e:	2000      	movne	r0, #0
 80a3040:	bd30      	popne	{r4, r5, pc}
 80a3042:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a3046:	d105      	bne.n	80a3054 <__adddf3+0x230>
 80a3048:	0040      	lsls	r0, r0, #1
 80a304a:	4149      	adcs	r1, r1
 80a304c:	bf28      	it	cs
 80a304e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a3052:	bd30      	pop	{r4, r5, pc}
 80a3054:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a3058:	bf3c      	itt	cc
 80a305a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a305e:	bd30      	popcc	{r4, r5, pc}
 80a3060:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3064:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a3068:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a306c:	f04f 0000 	mov.w	r0, #0
 80a3070:	bd30      	pop	{r4, r5, pc}
 80a3072:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3076:	bf1a      	itte	ne
 80a3078:	4619      	movne	r1, r3
 80a307a:	4610      	movne	r0, r2
 80a307c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a3080:	bf1c      	itt	ne
 80a3082:	460b      	movne	r3, r1
 80a3084:	4602      	movne	r2, r0
 80a3086:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a308a:	bf06      	itte	eq
 80a308c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a3090:	ea91 0f03 	teqeq	r1, r3
 80a3094:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a3098:	bd30      	pop	{r4, r5, pc}
 80a309a:	bf00      	nop

080a309c <__aeabi_ui2d>:
 80a309c:	f090 0f00 	teq	r0, #0
 80a30a0:	bf04      	itt	eq
 80a30a2:	2100      	moveq	r1, #0
 80a30a4:	4770      	bxeq	lr
 80a30a6:	b530      	push	{r4, r5, lr}
 80a30a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a30ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a30b0:	f04f 0500 	mov.w	r5, #0
 80a30b4:	f04f 0100 	mov.w	r1, #0
 80a30b8:	e750      	b.n	80a2f5c <__adddf3+0x138>
 80a30ba:	bf00      	nop

080a30bc <__aeabi_i2d>:
 80a30bc:	f090 0f00 	teq	r0, #0
 80a30c0:	bf04      	itt	eq
 80a30c2:	2100      	moveq	r1, #0
 80a30c4:	4770      	bxeq	lr
 80a30c6:	b530      	push	{r4, r5, lr}
 80a30c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a30cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a30d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a30d4:	bf48      	it	mi
 80a30d6:	4240      	negmi	r0, r0
 80a30d8:	f04f 0100 	mov.w	r1, #0
 80a30dc:	e73e      	b.n	80a2f5c <__adddf3+0x138>
 80a30de:	bf00      	nop

080a30e0 <__aeabi_f2d>:
 80a30e0:	0042      	lsls	r2, r0, #1
 80a30e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a30e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80a30ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a30ee:	bf1f      	itttt	ne
 80a30f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a30f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a30f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a30fc:	4770      	bxne	lr
 80a30fe:	f092 0f00 	teq	r2, #0
 80a3102:	bf14      	ite	ne
 80a3104:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3108:	4770      	bxeq	lr
 80a310a:	b530      	push	{r4, r5, lr}
 80a310c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a3110:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3114:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3118:	e720      	b.n	80a2f5c <__adddf3+0x138>
 80a311a:	bf00      	nop

080a311c <__aeabi_ul2d>:
 80a311c:	ea50 0201 	orrs.w	r2, r0, r1
 80a3120:	bf08      	it	eq
 80a3122:	4770      	bxeq	lr
 80a3124:	b530      	push	{r4, r5, lr}
 80a3126:	f04f 0500 	mov.w	r5, #0
 80a312a:	e00a      	b.n	80a3142 <__aeabi_l2d+0x16>

080a312c <__aeabi_l2d>:
 80a312c:	ea50 0201 	orrs.w	r2, r0, r1
 80a3130:	bf08      	it	eq
 80a3132:	4770      	bxeq	lr
 80a3134:	b530      	push	{r4, r5, lr}
 80a3136:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a313a:	d502      	bpl.n	80a3142 <__aeabi_l2d+0x16>
 80a313c:	4240      	negs	r0, r0
 80a313e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3142:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3146:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a314a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a314e:	f43f aedc 	beq.w	80a2f0a <__adddf3+0xe6>
 80a3152:	f04f 0203 	mov.w	r2, #3
 80a3156:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a315a:	bf18      	it	ne
 80a315c:	3203      	addne	r2, #3
 80a315e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3162:	bf18      	it	ne
 80a3164:	3203      	addne	r2, #3
 80a3166:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a316a:	f1c2 0320 	rsb	r3, r2, #32
 80a316e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a3172:	fa20 f002 	lsr.w	r0, r0, r2
 80a3176:	fa01 fe03 	lsl.w	lr, r1, r3
 80a317a:	ea40 000e 	orr.w	r0, r0, lr
 80a317e:	fa21 f102 	lsr.w	r1, r1, r2
 80a3182:	4414      	add	r4, r2
 80a3184:	e6c1      	b.n	80a2f0a <__adddf3+0xe6>
 80a3186:	bf00      	nop

080a3188 <__aeabi_dmul>:
 80a3188:	b570      	push	{r4, r5, r6, lr}
 80a318a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a318e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a3192:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3196:	bf1d      	ittte	ne
 80a3198:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a319c:	ea94 0f0c 	teqne	r4, ip
 80a31a0:	ea95 0f0c 	teqne	r5, ip
 80a31a4:	f000 f8de 	bleq	80a3364 <__aeabi_dmul+0x1dc>
 80a31a8:	442c      	add	r4, r5
 80a31aa:	ea81 0603 	eor.w	r6, r1, r3
 80a31ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a31b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a31b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a31ba:	bf18      	it	ne
 80a31bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a31c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a31c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a31c8:	d038      	beq.n	80a323c <__aeabi_dmul+0xb4>
 80a31ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80a31ce:	f04f 0500 	mov.w	r5, #0
 80a31d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a31d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a31da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a31de:	f04f 0600 	mov.w	r6, #0
 80a31e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a31e6:	f09c 0f00 	teq	ip, #0
 80a31ea:	bf18      	it	ne
 80a31ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80a31f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a31f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a31f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a31fc:	d204      	bcs.n	80a3208 <__aeabi_dmul+0x80>
 80a31fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a3202:	416d      	adcs	r5, r5
 80a3204:	eb46 0606 	adc.w	r6, r6, r6
 80a3208:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a320c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a3210:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a3214:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a3218:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a321c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3220:	bf88      	it	hi
 80a3222:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3226:	d81e      	bhi.n	80a3266 <__aeabi_dmul+0xde>
 80a3228:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a322c:	bf08      	it	eq
 80a322e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a3232:	f150 0000 	adcs.w	r0, r0, #0
 80a3236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a323a:	bd70      	pop	{r4, r5, r6, pc}
 80a323c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a3240:	ea46 0101 	orr.w	r1, r6, r1
 80a3244:	ea40 0002 	orr.w	r0, r0, r2
 80a3248:	ea81 0103 	eor.w	r1, r1, r3
 80a324c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a3250:	bfc2      	ittt	gt
 80a3252:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3256:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a325a:	bd70      	popgt	{r4, r5, r6, pc}
 80a325c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3260:	f04f 0e00 	mov.w	lr, #0
 80a3264:	3c01      	subs	r4, #1
 80a3266:	f300 80ab 	bgt.w	80a33c0 <__aeabi_dmul+0x238>
 80a326a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a326e:	bfde      	ittt	le
 80a3270:	2000      	movle	r0, #0
 80a3272:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a3276:	bd70      	pople	{r4, r5, r6, pc}
 80a3278:	f1c4 0400 	rsb	r4, r4, #0
 80a327c:	3c20      	subs	r4, #32
 80a327e:	da35      	bge.n	80a32ec <__aeabi_dmul+0x164>
 80a3280:	340c      	adds	r4, #12
 80a3282:	dc1b      	bgt.n	80a32bc <__aeabi_dmul+0x134>
 80a3284:	f104 0414 	add.w	r4, r4, #20
 80a3288:	f1c4 0520 	rsb	r5, r4, #32
 80a328c:	fa00 f305 	lsl.w	r3, r0, r5
 80a3290:	fa20 f004 	lsr.w	r0, r0, r4
 80a3294:	fa01 f205 	lsl.w	r2, r1, r5
 80a3298:	ea40 0002 	orr.w	r0, r0, r2
 80a329c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a32a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a32a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a32a8:	fa21 f604 	lsr.w	r6, r1, r4
 80a32ac:	eb42 0106 	adc.w	r1, r2, r6
 80a32b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a32b4:	bf08      	it	eq
 80a32b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a32ba:	bd70      	pop	{r4, r5, r6, pc}
 80a32bc:	f1c4 040c 	rsb	r4, r4, #12
 80a32c0:	f1c4 0520 	rsb	r5, r4, #32
 80a32c4:	fa00 f304 	lsl.w	r3, r0, r4
 80a32c8:	fa20 f005 	lsr.w	r0, r0, r5
 80a32cc:	fa01 f204 	lsl.w	r2, r1, r4
 80a32d0:	ea40 0002 	orr.w	r0, r0, r2
 80a32d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a32d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a32dc:	f141 0100 	adc.w	r1, r1, #0
 80a32e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a32e4:	bf08      	it	eq
 80a32e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a32ea:	bd70      	pop	{r4, r5, r6, pc}
 80a32ec:	f1c4 0520 	rsb	r5, r4, #32
 80a32f0:	fa00 f205 	lsl.w	r2, r0, r5
 80a32f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80a32f8:	fa20 f304 	lsr.w	r3, r0, r4
 80a32fc:	fa01 f205 	lsl.w	r2, r1, r5
 80a3300:	ea43 0302 	orr.w	r3, r3, r2
 80a3304:	fa21 f004 	lsr.w	r0, r1, r4
 80a3308:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a330c:	fa21 f204 	lsr.w	r2, r1, r4
 80a3310:	ea20 0002 	bic.w	r0, r0, r2
 80a3314:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a3318:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a331c:	bf08      	it	eq
 80a331e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3322:	bd70      	pop	{r4, r5, r6, pc}
 80a3324:	f094 0f00 	teq	r4, #0
 80a3328:	d10f      	bne.n	80a334a <__aeabi_dmul+0x1c2>
 80a332a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a332e:	0040      	lsls	r0, r0, #1
 80a3330:	eb41 0101 	adc.w	r1, r1, r1
 80a3334:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3338:	bf08      	it	eq
 80a333a:	3c01      	subeq	r4, #1
 80a333c:	d0f7      	beq.n	80a332e <__aeabi_dmul+0x1a6>
 80a333e:	ea41 0106 	orr.w	r1, r1, r6
 80a3342:	f095 0f00 	teq	r5, #0
 80a3346:	bf18      	it	ne
 80a3348:	4770      	bxne	lr
 80a334a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a334e:	0052      	lsls	r2, r2, #1
 80a3350:	eb43 0303 	adc.w	r3, r3, r3
 80a3354:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a3358:	bf08      	it	eq
 80a335a:	3d01      	subeq	r5, #1
 80a335c:	d0f7      	beq.n	80a334e <__aeabi_dmul+0x1c6>
 80a335e:	ea43 0306 	orr.w	r3, r3, r6
 80a3362:	4770      	bx	lr
 80a3364:	ea94 0f0c 	teq	r4, ip
 80a3368:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a336c:	bf18      	it	ne
 80a336e:	ea95 0f0c 	teqne	r5, ip
 80a3372:	d00c      	beq.n	80a338e <__aeabi_dmul+0x206>
 80a3374:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3378:	bf18      	it	ne
 80a337a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a337e:	d1d1      	bne.n	80a3324 <__aeabi_dmul+0x19c>
 80a3380:	ea81 0103 	eor.w	r1, r1, r3
 80a3384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3388:	f04f 0000 	mov.w	r0, #0
 80a338c:	bd70      	pop	{r4, r5, r6, pc}
 80a338e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3392:	bf06      	itte	eq
 80a3394:	4610      	moveq	r0, r2
 80a3396:	4619      	moveq	r1, r3
 80a3398:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a339c:	d019      	beq.n	80a33d2 <__aeabi_dmul+0x24a>
 80a339e:	ea94 0f0c 	teq	r4, ip
 80a33a2:	d102      	bne.n	80a33aa <__aeabi_dmul+0x222>
 80a33a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a33a8:	d113      	bne.n	80a33d2 <__aeabi_dmul+0x24a>
 80a33aa:	ea95 0f0c 	teq	r5, ip
 80a33ae:	d105      	bne.n	80a33bc <__aeabi_dmul+0x234>
 80a33b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a33b4:	bf1c      	itt	ne
 80a33b6:	4610      	movne	r0, r2
 80a33b8:	4619      	movne	r1, r3
 80a33ba:	d10a      	bne.n	80a33d2 <__aeabi_dmul+0x24a>
 80a33bc:	ea81 0103 	eor.w	r1, r1, r3
 80a33c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a33c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a33c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a33cc:	f04f 0000 	mov.w	r0, #0
 80a33d0:	bd70      	pop	{r4, r5, r6, pc}
 80a33d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a33d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a33da:	bd70      	pop	{r4, r5, r6, pc}

080a33dc <__aeabi_ddiv>:
 80a33dc:	b570      	push	{r4, r5, r6, lr}
 80a33de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a33e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a33e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a33ea:	bf1d      	ittte	ne
 80a33ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a33f0:	ea94 0f0c 	teqne	r4, ip
 80a33f4:	ea95 0f0c 	teqne	r5, ip
 80a33f8:	f000 f8a7 	bleq	80a354a <__aeabi_ddiv+0x16e>
 80a33fc:	eba4 0405 	sub.w	r4, r4, r5
 80a3400:	ea81 0e03 	eor.w	lr, r1, r3
 80a3404:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a340c:	f000 8088 	beq.w	80a3520 <__aeabi_ddiv+0x144>
 80a3410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3414:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a3418:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a341c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a3420:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a3424:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a3428:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a342c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a3430:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a3434:	429d      	cmp	r5, r3
 80a3436:	bf08      	it	eq
 80a3438:	4296      	cmpeq	r6, r2
 80a343a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a343e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a3442:	d202      	bcs.n	80a344a <__aeabi_ddiv+0x6e>
 80a3444:	085b      	lsrs	r3, r3, #1
 80a3446:	ea4f 0232 	mov.w	r2, r2, rrx
 80a344a:	1ab6      	subs	r6, r6, r2
 80a344c:	eb65 0503 	sbc.w	r5, r5, r3
 80a3450:	085b      	lsrs	r3, r3, #1
 80a3452:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3456:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a345a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a345e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3462:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3466:	bf22      	ittt	cs
 80a3468:	1ab6      	subcs	r6, r6, r2
 80a346a:	4675      	movcs	r5, lr
 80a346c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3470:	085b      	lsrs	r3, r3, #1
 80a3472:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3476:	ebb6 0e02 	subs.w	lr, r6, r2
 80a347a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a347e:	bf22      	ittt	cs
 80a3480:	1ab6      	subcs	r6, r6, r2
 80a3482:	4675      	movcs	r5, lr
 80a3484:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3488:	085b      	lsrs	r3, r3, #1
 80a348a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a348e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3492:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3496:	bf22      	ittt	cs
 80a3498:	1ab6      	subcs	r6, r6, r2
 80a349a:	4675      	movcs	r5, lr
 80a349c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a34a0:	085b      	lsrs	r3, r3, #1
 80a34a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a34a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a34aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a34ae:	bf22      	ittt	cs
 80a34b0:	1ab6      	subcs	r6, r6, r2
 80a34b2:	4675      	movcs	r5, lr
 80a34b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a34b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80a34bc:	d018      	beq.n	80a34f0 <__aeabi_ddiv+0x114>
 80a34be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a34c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a34c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a34ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a34ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a34d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a34d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a34da:	d1c0      	bne.n	80a345e <__aeabi_ddiv+0x82>
 80a34dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a34e0:	d10b      	bne.n	80a34fa <__aeabi_ddiv+0x11e>
 80a34e2:	ea41 0100 	orr.w	r1, r1, r0
 80a34e6:	f04f 0000 	mov.w	r0, #0
 80a34ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a34ee:	e7b6      	b.n	80a345e <__aeabi_ddiv+0x82>
 80a34f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a34f4:	bf04      	itt	eq
 80a34f6:	4301      	orreq	r1, r0
 80a34f8:	2000      	moveq	r0, #0
 80a34fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a34fe:	bf88      	it	hi
 80a3500:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3504:	f63f aeaf 	bhi.w	80a3266 <__aeabi_dmul+0xde>
 80a3508:	ebb5 0c03 	subs.w	ip, r5, r3
 80a350c:	bf04      	itt	eq
 80a350e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a3512:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3516:	f150 0000 	adcs.w	r0, r0, #0
 80a351a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a351e:	bd70      	pop	{r4, r5, r6, pc}
 80a3520:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a3524:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a3528:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a352c:	bfc2      	ittt	gt
 80a352e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3532:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3536:	bd70      	popgt	{r4, r5, r6, pc}
 80a3538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a353c:	f04f 0e00 	mov.w	lr, #0
 80a3540:	3c01      	subs	r4, #1
 80a3542:	e690      	b.n	80a3266 <__aeabi_dmul+0xde>
 80a3544:	ea45 0e06 	orr.w	lr, r5, r6
 80a3548:	e68d      	b.n	80a3266 <__aeabi_dmul+0xde>
 80a354a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a354e:	ea94 0f0c 	teq	r4, ip
 80a3552:	bf08      	it	eq
 80a3554:	ea95 0f0c 	teqeq	r5, ip
 80a3558:	f43f af3b 	beq.w	80a33d2 <__aeabi_dmul+0x24a>
 80a355c:	ea94 0f0c 	teq	r4, ip
 80a3560:	d10a      	bne.n	80a3578 <__aeabi_ddiv+0x19c>
 80a3562:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3566:	f47f af34 	bne.w	80a33d2 <__aeabi_dmul+0x24a>
 80a356a:	ea95 0f0c 	teq	r5, ip
 80a356e:	f47f af25 	bne.w	80a33bc <__aeabi_dmul+0x234>
 80a3572:	4610      	mov	r0, r2
 80a3574:	4619      	mov	r1, r3
 80a3576:	e72c      	b.n	80a33d2 <__aeabi_dmul+0x24a>
 80a3578:	ea95 0f0c 	teq	r5, ip
 80a357c:	d106      	bne.n	80a358c <__aeabi_ddiv+0x1b0>
 80a357e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3582:	f43f aefd 	beq.w	80a3380 <__aeabi_dmul+0x1f8>
 80a3586:	4610      	mov	r0, r2
 80a3588:	4619      	mov	r1, r3
 80a358a:	e722      	b.n	80a33d2 <__aeabi_dmul+0x24a>
 80a358c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3590:	bf18      	it	ne
 80a3592:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3596:	f47f aec5 	bne.w	80a3324 <__aeabi_dmul+0x19c>
 80a359a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a359e:	f47f af0d 	bne.w	80a33bc <__aeabi_dmul+0x234>
 80a35a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a35a6:	f47f aeeb 	bne.w	80a3380 <__aeabi_dmul+0x1f8>
 80a35aa:	e712      	b.n	80a33d2 <__aeabi_dmul+0x24a>

080a35ac <__gedf2>:
 80a35ac:	f04f 3cff 	mov.w	ip, #4294967295
 80a35b0:	e006      	b.n	80a35c0 <__cmpdf2+0x4>
 80a35b2:	bf00      	nop

080a35b4 <__ledf2>:
 80a35b4:	f04f 0c01 	mov.w	ip, #1
 80a35b8:	e002      	b.n	80a35c0 <__cmpdf2+0x4>
 80a35ba:	bf00      	nop

080a35bc <__cmpdf2>:
 80a35bc:	f04f 0c01 	mov.w	ip, #1
 80a35c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a35c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a35c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a35cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a35d0:	bf18      	it	ne
 80a35d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a35d6:	d01b      	beq.n	80a3610 <__cmpdf2+0x54>
 80a35d8:	b001      	add	sp, #4
 80a35da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a35de:	bf0c      	ite	eq
 80a35e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a35e4:	ea91 0f03 	teqne	r1, r3
 80a35e8:	bf02      	ittt	eq
 80a35ea:	ea90 0f02 	teqeq	r0, r2
 80a35ee:	2000      	moveq	r0, #0
 80a35f0:	4770      	bxeq	lr
 80a35f2:	f110 0f00 	cmn.w	r0, #0
 80a35f6:	ea91 0f03 	teq	r1, r3
 80a35fa:	bf58      	it	pl
 80a35fc:	4299      	cmppl	r1, r3
 80a35fe:	bf08      	it	eq
 80a3600:	4290      	cmpeq	r0, r2
 80a3602:	bf2c      	ite	cs
 80a3604:	17d8      	asrcs	r0, r3, #31
 80a3606:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a360a:	f040 0001 	orr.w	r0, r0, #1
 80a360e:	4770      	bx	lr
 80a3610:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3614:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3618:	d102      	bne.n	80a3620 <__cmpdf2+0x64>
 80a361a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a361e:	d107      	bne.n	80a3630 <__cmpdf2+0x74>
 80a3620:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3624:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3628:	d1d6      	bne.n	80a35d8 <__cmpdf2+0x1c>
 80a362a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a362e:	d0d3      	beq.n	80a35d8 <__cmpdf2+0x1c>
 80a3630:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3634:	4770      	bx	lr
 80a3636:	bf00      	nop

080a3638 <__aeabi_cdrcmple>:
 80a3638:	4684      	mov	ip, r0
 80a363a:	4610      	mov	r0, r2
 80a363c:	4662      	mov	r2, ip
 80a363e:	468c      	mov	ip, r1
 80a3640:	4619      	mov	r1, r3
 80a3642:	4663      	mov	r3, ip
 80a3644:	e000      	b.n	80a3648 <__aeabi_cdcmpeq>
 80a3646:	bf00      	nop

080a3648 <__aeabi_cdcmpeq>:
 80a3648:	b501      	push	{r0, lr}
 80a364a:	f7ff ffb7 	bl	80a35bc <__cmpdf2>
 80a364e:	2800      	cmp	r0, #0
 80a3650:	bf48      	it	mi
 80a3652:	f110 0f00 	cmnmi.w	r0, #0
 80a3656:	bd01      	pop	{r0, pc}

080a3658 <__aeabi_dcmpeq>:
 80a3658:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a365c:	f7ff fff4 	bl	80a3648 <__aeabi_cdcmpeq>
 80a3660:	bf0c      	ite	eq
 80a3662:	2001      	moveq	r0, #1
 80a3664:	2000      	movne	r0, #0
 80a3666:	f85d fb08 	ldr.w	pc, [sp], #8
 80a366a:	bf00      	nop

080a366c <__aeabi_dcmplt>:
 80a366c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3670:	f7ff ffea 	bl	80a3648 <__aeabi_cdcmpeq>
 80a3674:	bf34      	ite	cc
 80a3676:	2001      	movcc	r0, #1
 80a3678:	2000      	movcs	r0, #0
 80a367a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a367e:	bf00      	nop

080a3680 <__aeabi_dcmple>:
 80a3680:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3684:	f7ff ffe0 	bl	80a3648 <__aeabi_cdcmpeq>
 80a3688:	bf94      	ite	ls
 80a368a:	2001      	movls	r0, #1
 80a368c:	2000      	movhi	r0, #0
 80a368e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3692:	bf00      	nop

080a3694 <__aeabi_dcmpge>:
 80a3694:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3698:	f7ff ffce 	bl	80a3638 <__aeabi_cdrcmple>
 80a369c:	bf94      	ite	ls
 80a369e:	2001      	movls	r0, #1
 80a36a0:	2000      	movhi	r0, #0
 80a36a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a36a6:	bf00      	nop

080a36a8 <__aeabi_dcmpgt>:
 80a36a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a36ac:	f7ff ffc4 	bl	80a3638 <__aeabi_cdrcmple>
 80a36b0:	bf34      	ite	cc
 80a36b2:	2001      	movcc	r0, #1
 80a36b4:	2000      	movcs	r0, #0
 80a36b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a36ba:	bf00      	nop

080a36bc <__aeabi_dcmpun>:
 80a36bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a36c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a36c4:	d102      	bne.n	80a36cc <__aeabi_dcmpun+0x10>
 80a36c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a36ca:	d10a      	bne.n	80a36e2 <__aeabi_dcmpun+0x26>
 80a36cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a36d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a36d4:	d102      	bne.n	80a36dc <__aeabi_dcmpun+0x20>
 80a36d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a36da:	d102      	bne.n	80a36e2 <__aeabi_dcmpun+0x26>
 80a36dc:	f04f 0000 	mov.w	r0, #0
 80a36e0:	4770      	bx	lr
 80a36e2:	f04f 0001 	mov.w	r0, #1
 80a36e6:	4770      	bx	lr

080a36e8 <__aeabi_d2iz>:
 80a36e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a36ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a36f0:	d215      	bcs.n	80a371e <__aeabi_d2iz+0x36>
 80a36f2:	d511      	bpl.n	80a3718 <__aeabi_d2iz+0x30>
 80a36f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a36f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a36fc:	d912      	bls.n	80a3724 <__aeabi_d2iz+0x3c>
 80a36fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3702:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3706:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a370a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a370e:	fa23 f002 	lsr.w	r0, r3, r2
 80a3712:	bf18      	it	ne
 80a3714:	4240      	negne	r0, r0
 80a3716:	4770      	bx	lr
 80a3718:	f04f 0000 	mov.w	r0, #0
 80a371c:	4770      	bx	lr
 80a371e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3722:	d105      	bne.n	80a3730 <__aeabi_d2iz+0x48>
 80a3724:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a3728:	bf08      	it	eq
 80a372a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a372e:	4770      	bx	lr
 80a3730:	f04f 0000 	mov.w	r0, #0
 80a3734:	4770      	bx	lr
 80a3736:	bf00      	nop

080a3738 <__aeabi_d2uiz>:
 80a3738:	004a      	lsls	r2, r1, #1
 80a373a:	d211      	bcs.n	80a3760 <__aeabi_d2uiz+0x28>
 80a373c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3740:	d211      	bcs.n	80a3766 <__aeabi_d2uiz+0x2e>
 80a3742:	d50d      	bpl.n	80a3760 <__aeabi_d2uiz+0x28>
 80a3744:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3748:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a374c:	d40e      	bmi.n	80a376c <__aeabi_d2uiz+0x34>
 80a374e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3752:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3756:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a375a:	fa23 f002 	lsr.w	r0, r3, r2
 80a375e:	4770      	bx	lr
 80a3760:	f04f 0000 	mov.w	r0, #0
 80a3764:	4770      	bx	lr
 80a3766:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a376a:	d102      	bne.n	80a3772 <__aeabi_d2uiz+0x3a>
 80a376c:	f04f 30ff 	mov.w	r0, #4294967295
 80a3770:	4770      	bx	lr
 80a3772:	f04f 0000 	mov.w	r0, #0
 80a3776:	4770      	bx	lr

080a3778 <__aeabi_d2f>:
 80a3778:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a377c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a3780:	bf24      	itt	cs
 80a3782:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a3786:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a378a:	d90d      	bls.n	80a37a8 <__aeabi_d2f+0x30>
 80a378c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3790:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a3794:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a3798:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a379c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a37a0:	bf08      	it	eq
 80a37a2:	f020 0001 	biceq.w	r0, r0, #1
 80a37a6:	4770      	bx	lr
 80a37a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a37ac:	d121      	bne.n	80a37f2 <__aeabi_d2f+0x7a>
 80a37ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a37b2:	bfbc      	itt	lt
 80a37b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a37b8:	4770      	bxlt	lr
 80a37ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a37be:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a37c2:	f1c2 0218 	rsb	r2, r2, #24
 80a37c6:	f1c2 0c20 	rsb	ip, r2, #32
 80a37ca:	fa10 f30c 	lsls.w	r3, r0, ip
 80a37ce:	fa20 f002 	lsr.w	r0, r0, r2
 80a37d2:	bf18      	it	ne
 80a37d4:	f040 0001 	orrne.w	r0, r0, #1
 80a37d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a37dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a37e0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a37e4:	ea40 000c 	orr.w	r0, r0, ip
 80a37e8:	fa23 f302 	lsr.w	r3, r3, r2
 80a37ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a37f0:	e7cc      	b.n	80a378c <__aeabi_d2f+0x14>
 80a37f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a37f6:	d107      	bne.n	80a3808 <__aeabi_d2f+0x90>
 80a37f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a37fc:	bf1e      	ittt	ne
 80a37fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a3802:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a3806:	4770      	bxne	lr
 80a3808:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a380c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3810:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3814:	4770      	bx	lr
 80a3816:	bf00      	nop

080a3818 <__aeabi_frsub>:
 80a3818:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a381c:	e002      	b.n	80a3824 <__addsf3>
 80a381e:	bf00      	nop

080a3820 <__aeabi_fsub>:
 80a3820:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a3824 <__addsf3>:
 80a3824:	0042      	lsls	r2, r0, #1
 80a3826:	bf1f      	itttt	ne
 80a3828:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a382c:	ea92 0f03 	teqne	r2, r3
 80a3830:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a3834:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3838:	d06a      	beq.n	80a3910 <__addsf3+0xec>
 80a383a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a383e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a3842:	bfc1      	itttt	gt
 80a3844:	18d2      	addgt	r2, r2, r3
 80a3846:	4041      	eorgt	r1, r0
 80a3848:	4048      	eorgt	r0, r1
 80a384a:	4041      	eorgt	r1, r0
 80a384c:	bfb8      	it	lt
 80a384e:	425b      	neglt	r3, r3
 80a3850:	2b19      	cmp	r3, #25
 80a3852:	bf88      	it	hi
 80a3854:	4770      	bxhi	lr
 80a3856:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a385a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a385e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a3862:	bf18      	it	ne
 80a3864:	4240      	negne	r0, r0
 80a3866:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a386a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a386e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a3872:	bf18      	it	ne
 80a3874:	4249      	negne	r1, r1
 80a3876:	ea92 0f03 	teq	r2, r3
 80a387a:	d03f      	beq.n	80a38fc <__addsf3+0xd8>
 80a387c:	f1a2 0201 	sub.w	r2, r2, #1
 80a3880:	fa41 fc03 	asr.w	ip, r1, r3
 80a3884:	eb10 000c 	adds.w	r0, r0, ip
 80a3888:	f1c3 0320 	rsb	r3, r3, #32
 80a388c:	fa01 f103 	lsl.w	r1, r1, r3
 80a3890:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3894:	d502      	bpl.n	80a389c <__addsf3+0x78>
 80a3896:	4249      	negs	r1, r1
 80a3898:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a389c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a38a0:	d313      	bcc.n	80a38ca <__addsf3+0xa6>
 80a38a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a38a6:	d306      	bcc.n	80a38b6 <__addsf3+0x92>
 80a38a8:	0840      	lsrs	r0, r0, #1
 80a38aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80a38ae:	f102 0201 	add.w	r2, r2, #1
 80a38b2:	2afe      	cmp	r2, #254	; 0xfe
 80a38b4:	d251      	bcs.n	80a395a <__addsf3+0x136>
 80a38b6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a38ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a38be:	bf08      	it	eq
 80a38c0:	f020 0001 	biceq.w	r0, r0, #1
 80a38c4:	ea40 0003 	orr.w	r0, r0, r3
 80a38c8:	4770      	bx	lr
 80a38ca:	0049      	lsls	r1, r1, #1
 80a38cc:	eb40 0000 	adc.w	r0, r0, r0
 80a38d0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a38d4:	f1a2 0201 	sub.w	r2, r2, #1
 80a38d8:	d1ed      	bne.n	80a38b6 <__addsf3+0x92>
 80a38da:	fab0 fc80 	clz	ip, r0
 80a38de:	f1ac 0c08 	sub.w	ip, ip, #8
 80a38e2:	ebb2 020c 	subs.w	r2, r2, ip
 80a38e6:	fa00 f00c 	lsl.w	r0, r0, ip
 80a38ea:	bfaa      	itet	ge
 80a38ec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a38f0:	4252      	neglt	r2, r2
 80a38f2:	4318      	orrge	r0, r3
 80a38f4:	bfbc      	itt	lt
 80a38f6:	40d0      	lsrlt	r0, r2
 80a38f8:	4318      	orrlt	r0, r3
 80a38fa:	4770      	bx	lr
 80a38fc:	f092 0f00 	teq	r2, #0
 80a3900:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a3904:	bf06      	itte	eq
 80a3906:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a390a:	3201      	addeq	r2, #1
 80a390c:	3b01      	subne	r3, #1
 80a390e:	e7b5      	b.n	80a387c <__addsf3+0x58>
 80a3910:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3914:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3918:	bf18      	it	ne
 80a391a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a391e:	d021      	beq.n	80a3964 <__addsf3+0x140>
 80a3920:	ea92 0f03 	teq	r2, r3
 80a3924:	d004      	beq.n	80a3930 <__addsf3+0x10c>
 80a3926:	f092 0f00 	teq	r2, #0
 80a392a:	bf08      	it	eq
 80a392c:	4608      	moveq	r0, r1
 80a392e:	4770      	bx	lr
 80a3930:	ea90 0f01 	teq	r0, r1
 80a3934:	bf1c      	itt	ne
 80a3936:	2000      	movne	r0, #0
 80a3938:	4770      	bxne	lr
 80a393a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a393e:	d104      	bne.n	80a394a <__addsf3+0x126>
 80a3940:	0040      	lsls	r0, r0, #1
 80a3942:	bf28      	it	cs
 80a3944:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a3948:	4770      	bx	lr
 80a394a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a394e:	bf3c      	itt	cc
 80a3950:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a3954:	4770      	bxcc	lr
 80a3956:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a395a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a395e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3962:	4770      	bx	lr
 80a3964:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a3968:	bf16      	itet	ne
 80a396a:	4608      	movne	r0, r1
 80a396c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a3970:	4601      	movne	r1, r0
 80a3972:	0242      	lsls	r2, r0, #9
 80a3974:	bf06      	itte	eq
 80a3976:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a397a:	ea90 0f01 	teqeq	r0, r1
 80a397e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a3982:	4770      	bx	lr

080a3984 <__aeabi_ui2f>:
 80a3984:	f04f 0300 	mov.w	r3, #0
 80a3988:	e004      	b.n	80a3994 <__aeabi_i2f+0x8>
 80a398a:	bf00      	nop

080a398c <__aeabi_i2f>:
 80a398c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a3990:	bf48      	it	mi
 80a3992:	4240      	negmi	r0, r0
 80a3994:	ea5f 0c00 	movs.w	ip, r0
 80a3998:	bf08      	it	eq
 80a399a:	4770      	bxeq	lr
 80a399c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a39a0:	4601      	mov	r1, r0
 80a39a2:	f04f 0000 	mov.w	r0, #0
 80a39a6:	e01c      	b.n	80a39e2 <__aeabi_l2f+0x2a>

080a39a8 <__aeabi_ul2f>:
 80a39a8:	ea50 0201 	orrs.w	r2, r0, r1
 80a39ac:	bf08      	it	eq
 80a39ae:	4770      	bxeq	lr
 80a39b0:	f04f 0300 	mov.w	r3, #0
 80a39b4:	e00a      	b.n	80a39cc <__aeabi_l2f+0x14>
 80a39b6:	bf00      	nop

080a39b8 <__aeabi_l2f>:
 80a39b8:	ea50 0201 	orrs.w	r2, r0, r1
 80a39bc:	bf08      	it	eq
 80a39be:	4770      	bxeq	lr
 80a39c0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a39c4:	d502      	bpl.n	80a39cc <__aeabi_l2f+0x14>
 80a39c6:	4240      	negs	r0, r0
 80a39c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a39cc:	ea5f 0c01 	movs.w	ip, r1
 80a39d0:	bf02      	ittt	eq
 80a39d2:	4684      	moveq	ip, r0
 80a39d4:	4601      	moveq	r1, r0
 80a39d6:	2000      	moveq	r0, #0
 80a39d8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a39dc:	bf08      	it	eq
 80a39de:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a39e2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a39e6:	fabc f28c 	clz	r2, ip
 80a39ea:	3a08      	subs	r2, #8
 80a39ec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a39f0:	db10      	blt.n	80a3a14 <__aeabi_l2f+0x5c>
 80a39f2:	fa01 fc02 	lsl.w	ip, r1, r2
 80a39f6:	4463      	add	r3, ip
 80a39f8:	fa00 fc02 	lsl.w	ip, r0, r2
 80a39fc:	f1c2 0220 	rsb	r2, r2, #32
 80a3a00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3a04:	fa20 f202 	lsr.w	r2, r0, r2
 80a3a08:	eb43 0002 	adc.w	r0, r3, r2
 80a3a0c:	bf08      	it	eq
 80a3a0e:	f020 0001 	biceq.w	r0, r0, #1
 80a3a12:	4770      	bx	lr
 80a3a14:	f102 0220 	add.w	r2, r2, #32
 80a3a18:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3a1c:	f1c2 0220 	rsb	r2, r2, #32
 80a3a20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a3a24:	fa21 f202 	lsr.w	r2, r1, r2
 80a3a28:	eb43 0002 	adc.w	r0, r3, r2
 80a3a2c:	bf08      	it	eq
 80a3a2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3a32:	4770      	bx	lr

080a3a34 <__aeabi_fmul>:
 80a3a34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3a38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3a3c:	bf1e      	ittt	ne
 80a3a3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a3a42:	ea92 0f0c 	teqne	r2, ip
 80a3a46:	ea93 0f0c 	teqne	r3, ip
 80a3a4a:	d06f      	beq.n	80a3b2c <__aeabi_fmul+0xf8>
 80a3a4c:	441a      	add	r2, r3
 80a3a4e:	ea80 0c01 	eor.w	ip, r0, r1
 80a3a52:	0240      	lsls	r0, r0, #9
 80a3a54:	bf18      	it	ne
 80a3a56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a3a5a:	d01e      	beq.n	80a3a9a <__aeabi_fmul+0x66>
 80a3a5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a3a60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a3a64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a3a68:	fba0 3101 	umull	r3, r1, r0, r1
 80a3a6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3a70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a3a74:	bf3e      	ittt	cc
 80a3a76:	0049      	lslcc	r1, r1, #1
 80a3a78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a3a7c:	005b      	lslcc	r3, r3, #1
 80a3a7e:	ea40 0001 	orr.w	r0, r0, r1
 80a3a82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a3a86:	2afd      	cmp	r2, #253	; 0xfd
 80a3a88:	d81d      	bhi.n	80a3ac6 <__aeabi_fmul+0x92>
 80a3a8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a3a8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3a92:	bf08      	it	eq
 80a3a94:	f020 0001 	biceq.w	r0, r0, #1
 80a3a98:	4770      	bx	lr
 80a3a9a:	f090 0f00 	teq	r0, #0
 80a3a9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3aa2:	bf08      	it	eq
 80a3aa4:	0249      	lsleq	r1, r1, #9
 80a3aa6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3aaa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a3aae:	3a7f      	subs	r2, #127	; 0x7f
 80a3ab0:	bfc2      	ittt	gt
 80a3ab2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3ab6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3aba:	4770      	bxgt	lr
 80a3abc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3ac0:	f04f 0300 	mov.w	r3, #0
 80a3ac4:	3a01      	subs	r2, #1
 80a3ac6:	dc5d      	bgt.n	80a3b84 <__aeabi_fmul+0x150>
 80a3ac8:	f112 0f19 	cmn.w	r2, #25
 80a3acc:	bfdc      	itt	le
 80a3ace:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a3ad2:	4770      	bxle	lr
 80a3ad4:	f1c2 0200 	rsb	r2, r2, #0
 80a3ad8:	0041      	lsls	r1, r0, #1
 80a3ada:	fa21 f102 	lsr.w	r1, r1, r2
 80a3ade:	f1c2 0220 	rsb	r2, r2, #32
 80a3ae2:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3ae6:	ea5f 0031 	movs.w	r0, r1, rrx
 80a3aea:	f140 0000 	adc.w	r0, r0, #0
 80a3aee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a3af2:	bf08      	it	eq
 80a3af4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3af8:	4770      	bx	lr
 80a3afa:	f092 0f00 	teq	r2, #0
 80a3afe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3b02:	bf02      	ittt	eq
 80a3b04:	0040      	lsleq	r0, r0, #1
 80a3b06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a3b0a:	3a01      	subeq	r2, #1
 80a3b0c:	d0f9      	beq.n	80a3b02 <__aeabi_fmul+0xce>
 80a3b0e:	ea40 000c 	orr.w	r0, r0, ip
 80a3b12:	f093 0f00 	teq	r3, #0
 80a3b16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3b1a:	bf02      	ittt	eq
 80a3b1c:	0049      	lsleq	r1, r1, #1
 80a3b1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3b22:	3b01      	subeq	r3, #1
 80a3b24:	d0f9      	beq.n	80a3b1a <__aeabi_fmul+0xe6>
 80a3b26:	ea41 010c 	orr.w	r1, r1, ip
 80a3b2a:	e78f      	b.n	80a3a4c <__aeabi_fmul+0x18>
 80a3b2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3b30:	ea92 0f0c 	teq	r2, ip
 80a3b34:	bf18      	it	ne
 80a3b36:	ea93 0f0c 	teqne	r3, ip
 80a3b3a:	d00a      	beq.n	80a3b52 <__aeabi_fmul+0x11e>
 80a3b3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3b40:	bf18      	it	ne
 80a3b42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3b46:	d1d8      	bne.n	80a3afa <__aeabi_fmul+0xc6>
 80a3b48:	ea80 0001 	eor.w	r0, r0, r1
 80a3b4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3b50:	4770      	bx	lr
 80a3b52:	f090 0f00 	teq	r0, #0
 80a3b56:	bf17      	itett	ne
 80a3b58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a3b5c:	4608      	moveq	r0, r1
 80a3b5e:	f091 0f00 	teqne	r1, #0
 80a3b62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a3b66:	d014      	beq.n	80a3b92 <__aeabi_fmul+0x15e>
 80a3b68:	ea92 0f0c 	teq	r2, ip
 80a3b6c:	d101      	bne.n	80a3b72 <__aeabi_fmul+0x13e>
 80a3b6e:	0242      	lsls	r2, r0, #9
 80a3b70:	d10f      	bne.n	80a3b92 <__aeabi_fmul+0x15e>
 80a3b72:	ea93 0f0c 	teq	r3, ip
 80a3b76:	d103      	bne.n	80a3b80 <__aeabi_fmul+0x14c>
 80a3b78:	024b      	lsls	r3, r1, #9
 80a3b7a:	bf18      	it	ne
 80a3b7c:	4608      	movne	r0, r1
 80a3b7e:	d108      	bne.n	80a3b92 <__aeabi_fmul+0x15e>
 80a3b80:	ea80 0001 	eor.w	r0, r0, r1
 80a3b84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3b88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3b8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3b90:	4770      	bx	lr
 80a3b92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3b96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a3b9a:	4770      	bx	lr

080a3b9c <__aeabi_fdiv>:
 80a3b9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3ba0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3ba4:	bf1e      	ittt	ne
 80a3ba6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a3baa:	ea92 0f0c 	teqne	r2, ip
 80a3bae:	ea93 0f0c 	teqne	r3, ip
 80a3bb2:	d069      	beq.n	80a3c88 <__aeabi_fdiv+0xec>
 80a3bb4:	eba2 0203 	sub.w	r2, r2, r3
 80a3bb8:	ea80 0c01 	eor.w	ip, r0, r1
 80a3bbc:	0249      	lsls	r1, r1, #9
 80a3bbe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a3bc2:	d037      	beq.n	80a3c34 <__aeabi_fdiv+0x98>
 80a3bc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a3bc8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a3bcc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a3bd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3bd4:	428b      	cmp	r3, r1
 80a3bd6:	bf38      	it	cc
 80a3bd8:	005b      	lslcc	r3, r3, #1
 80a3bda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a3bde:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a3be2:	428b      	cmp	r3, r1
 80a3be4:	bf24      	itt	cs
 80a3be6:	1a5b      	subcs	r3, r3, r1
 80a3be8:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3bec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a3bf0:	bf24      	itt	cs
 80a3bf2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a3bf6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3bfa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a3bfe:	bf24      	itt	cs
 80a3c00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a3c04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3c08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a3c0c:	bf24      	itt	cs
 80a3c0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a3c12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3c16:	011b      	lsls	r3, r3, #4
 80a3c18:	bf18      	it	ne
 80a3c1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a3c1e:	d1e0      	bne.n	80a3be2 <__aeabi_fdiv+0x46>
 80a3c20:	2afd      	cmp	r2, #253	; 0xfd
 80a3c22:	f63f af50 	bhi.w	80a3ac6 <__aeabi_fmul+0x92>
 80a3c26:	428b      	cmp	r3, r1
 80a3c28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3c2c:	bf08      	it	eq
 80a3c2e:	f020 0001 	biceq.w	r0, r0, #1
 80a3c32:	4770      	bx	lr
 80a3c34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3c38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3c3c:	327f      	adds	r2, #127	; 0x7f
 80a3c3e:	bfc2      	ittt	gt
 80a3c40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3c44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3c48:	4770      	bxgt	lr
 80a3c4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3c4e:	f04f 0300 	mov.w	r3, #0
 80a3c52:	3a01      	subs	r2, #1
 80a3c54:	e737      	b.n	80a3ac6 <__aeabi_fmul+0x92>
 80a3c56:	f092 0f00 	teq	r2, #0
 80a3c5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3c5e:	bf02      	ittt	eq
 80a3c60:	0040      	lsleq	r0, r0, #1
 80a3c62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a3c66:	3a01      	subeq	r2, #1
 80a3c68:	d0f9      	beq.n	80a3c5e <__aeabi_fdiv+0xc2>
 80a3c6a:	ea40 000c 	orr.w	r0, r0, ip
 80a3c6e:	f093 0f00 	teq	r3, #0
 80a3c72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3c76:	bf02      	ittt	eq
 80a3c78:	0049      	lsleq	r1, r1, #1
 80a3c7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3c7e:	3b01      	subeq	r3, #1
 80a3c80:	d0f9      	beq.n	80a3c76 <__aeabi_fdiv+0xda>
 80a3c82:	ea41 010c 	orr.w	r1, r1, ip
 80a3c86:	e795      	b.n	80a3bb4 <__aeabi_fdiv+0x18>
 80a3c88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3c8c:	ea92 0f0c 	teq	r2, ip
 80a3c90:	d108      	bne.n	80a3ca4 <__aeabi_fdiv+0x108>
 80a3c92:	0242      	lsls	r2, r0, #9
 80a3c94:	f47f af7d 	bne.w	80a3b92 <__aeabi_fmul+0x15e>
 80a3c98:	ea93 0f0c 	teq	r3, ip
 80a3c9c:	f47f af70 	bne.w	80a3b80 <__aeabi_fmul+0x14c>
 80a3ca0:	4608      	mov	r0, r1
 80a3ca2:	e776      	b.n	80a3b92 <__aeabi_fmul+0x15e>
 80a3ca4:	ea93 0f0c 	teq	r3, ip
 80a3ca8:	d104      	bne.n	80a3cb4 <__aeabi_fdiv+0x118>
 80a3caa:	024b      	lsls	r3, r1, #9
 80a3cac:	f43f af4c 	beq.w	80a3b48 <__aeabi_fmul+0x114>
 80a3cb0:	4608      	mov	r0, r1
 80a3cb2:	e76e      	b.n	80a3b92 <__aeabi_fmul+0x15e>
 80a3cb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3cb8:	bf18      	it	ne
 80a3cba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3cbe:	d1ca      	bne.n	80a3c56 <__aeabi_fdiv+0xba>
 80a3cc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a3cc4:	f47f af5c 	bne.w	80a3b80 <__aeabi_fmul+0x14c>
 80a3cc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a3ccc:	f47f af3c 	bne.w	80a3b48 <__aeabi_fmul+0x114>
 80a3cd0:	e75f      	b.n	80a3b92 <__aeabi_fmul+0x15e>
 80a3cd2:	bf00      	nop

080a3cd4 <__gesf2>:
 80a3cd4:	f04f 3cff 	mov.w	ip, #4294967295
 80a3cd8:	e006      	b.n	80a3ce8 <__cmpsf2+0x4>
 80a3cda:	bf00      	nop

080a3cdc <__lesf2>:
 80a3cdc:	f04f 0c01 	mov.w	ip, #1
 80a3ce0:	e002      	b.n	80a3ce8 <__cmpsf2+0x4>
 80a3ce2:	bf00      	nop

080a3ce4 <__cmpsf2>:
 80a3ce4:	f04f 0c01 	mov.w	ip, #1
 80a3ce8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a3cec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a3cf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3cf8:	bf18      	it	ne
 80a3cfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3cfe:	d011      	beq.n	80a3d24 <__cmpsf2+0x40>
 80a3d00:	b001      	add	sp, #4
 80a3d02:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a3d06:	bf18      	it	ne
 80a3d08:	ea90 0f01 	teqne	r0, r1
 80a3d0c:	bf58      	it	pl
 80a3d0e:	ebb2 0003 	subspl.w	r0, r2, r3
 80a3d12:	bf88      	it	hi
 80a3d14:	17c8      	asrhi	r0, r1, #31
 80a3d16:	bf38      	it	cc
 80a3d18:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a3d1c:	bf18      	it	ne
 80a3d1e:	f040 0001 	orrne.w	r0, r0, #1
 80a3d22:	4770      	bx	lr
 80a3d24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3d28:	d102      	bne.n	80a3d30 <__cmpsf2+0x4c>
 80a3d2a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a3d2e:	d105      	bne.n	80a3d3c <__cmpsf2+0x58>
 80a3d30:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a3d34:	d1e4      	bne.n	80a3d00 <__cmpsf2+0x1c>
 80a3d36:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a3d3a:	d0e1      	beq.n	80a3d00 <__cmpsf2+0x1c>
 80a3d3c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3d40:	4770      	bx	lr
 80a3d42:	bf00      	nop

080a3d44 <__aeabi_cfrcmple>:
 80a3d44:	4684      	mov	ip, r0
 80a3d46:	4608      	mov	r0, r1
 80a3d48:	4661      	mov	r1, ip
 80a3d4a:	e7ff      	b.n	80a3d4c <__aeabi_cfcmpeq>

080a3d4c <__aeabi_cfcmpeq>:
 80a3d4c:	b50f      	push	{r0, r1, r2, r3, lr}
 80a3d4e:	f7ff ffc9 	bl	80a3ce4 <__cmpsf2>
 80a3d52:	2800      	cmp	r0, #0
 80a3d54:	bf48      	it	mi
 80a3d56:	f110 0f00 	cmnmi.w	r0, #0
 80a3d5a:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a3d5c <__aeabi_fcmpeq>:
 80a3d5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3d60:	f7ff fff4 	bl	80a3d4c <__aeabi_cfcmpeq>
 80a3d64:	bf0c      	ite	eq
 80a3d66:	2001      	moveq	r0, #1
 80a3d68:	2000      	movne	r0, #0
 80a3d6a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3d6e:	bf00      	nop

080a3d70 <__aeabi_fcmplt>:
 80a3d70:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3d74:	f7ff ffea 	bl	80a3d4c <__aeabi_cfcmpeq>
 80a3d78:	bf34      	ite	cc
 80a3d7a:	2001      	movcc	r0, #1
 80a3d7c:	2000      	movcs	r0, #0
 80a3d7e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3d82:	bf00      	nop

080a3d84 <__aeabi_fcmple>:
 80a3d84:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3d88:	f7ff ffe0 	bl	80a3d4c <__aeabi_cfcmpeq>
 80a3d8c:	bf94      	ite	ls
 80a3d8e:	2001      	movls	r0, #1
 80a3d90:	2000      	movhi	r0, #0
 80a3d92:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3d96:	bf00      	nop

080a3d98 <__aeabi_fcmpge>:
 80a3d98:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3d9c:	f7ff ffd2 	bl	80a3d44 <__aeabi_cfrcmple>
 80a3da0:	bf94      	ite	ls
 80a3da2:	2001      	movls	r0, #1
 80a3da4:	2000      	movhi	r0, #0
 80a3da6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3daa:	bf00      	nop

080a3dac <__aeabi_fcmpgt>:
 80a3dac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3db0:	f7ff ffc8 	bl	80a3d44 <__aeabi_cfrcmple>
 80a3db4:	bf34      	ite	cc
 80a3db6:	2001      	movcc	r0, #1
 80a3db8:	2000      	movcs	r0, #0
 80a3dba:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3dbe:	bf00      	nop

080a3dc0 <__aeabi_f2iz>:
 80a3dc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a3dc4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a3dc8:	d30f      	bcc.n	80a3dea <__aeabi_f2iz+0x2a>
 80a3dca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a3dce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a3dd2:	d90d      	bls.n	80a3df0 <__aeabi_f2iz+0x30>
 80a3dd4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a3dd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3ddc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a3de0:	fa23 f002 	lsr.w	r0, r3, r2
 80a3de4:	bf18      	it	ne
 80a3de6:	4240      	negne	r0, r0
 80a3de8:	4770      	bx	lr
 80a3dea:	f04f 0000 	mov.w	r0, #0
 80a3dee:	4770      	bx	lr
 80a3df0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a3df4:	d101      	bne.n	80a3dfa <__aeabi_f2iz+0x3a>
 80a3df6:	0242      	lsls	r2, r0, #9
 80a3df8:	d105      	bne.n	80a3e06 <__aeabi_f2iz+0x46>
 80a3dfa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a3dfe:	bf08      	it	eq
 80a3e00:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3e04:	4770      	bx	lr
 80a3e06:	f04f 0000 	mov.w	r0, #0
 80a3e0a:	4770      	bx	lr

080a3e0c <__aeabi_f2uiz>:
 80a3e0c:	0042      	lsls	r2, r0, #1
 80a3e0e:	d20e      	bcs.n	80a3e2e <__aeabi_f2uiz+0x22>
 80a3e10:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a3e14:	d30b      	bcc.n	80a3e2e <__aeabi_f2uiz+0x22>
 80a3e16:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a3e1a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a3e1e:	d409      	bmi.n	80a3e34 <__aeabi_f2uiz+0x28>
 80a3e20:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a3e24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3e28:	fa23 f002 	lsr.w	r0, r3, r2
 80a3e2c:	4770      	bx	lr
 80a3e2e:	f04f 0000 	mov.w	r0, #0
 80a3e32:	4770      	bx	lr
 80a3e34:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a3e38:	d101      	bne.n	80a3e3e <__aeabi_f2uiz+0x32>
 80a3e3a:	0242      	lsls	r2, r0, #9
 80a3e3c:	d102      	bne.n	80a3e44 <__aeabi_f2uiz+0x38>
 80a3e3e:	f04f 30ff 	mov.w	r0, #4294967295
 80a3e42:	4770      	bx	lr
 80a3e44:	f04f 0000 	mov.w	r0, #0
 80a3e48:	4770      	bx	lr
 80a3e4a:	bf00      	nop

080a3e4c <atof>:
 80a3e4c:	2100      	movs	r1, #0
 80a3e4e:	f000 bef3 	b.w	80a4c38 <strtod>

080a3e52 <atoi>:
 80a3e52:	220a      	movs	r2, #10
 80a3e54:	2100      	movs	r1, #0
 80a3e56:	f000 bf7d 	b.w	80a4d54 <strtol>

080a3e5a <atol>:
 80a3e5a:	220a      	movs	r2, #10
 80a3e5c:	2100      	movs	r1, #0
 80a3e5e:	f000 bf79 	b.w	80a4d54 <strtol>
	...

080a3e64 <__cxa_atexit>:
 80a3e64:	b510      	push	{r4, lr}
 80a3e66:	4c05      	ldr	r4, [pc, #20]	; (80a3e7c <__cxa_atexit+0x18>)
 80a3e68:	4613      	mov	r3, r2
 80a3e6a:	b12c      	cbz	r4, 80a3e78 <__cxa_atexit+0x14>
 80a3e6c:	460a      	mov	r2, r1
 80a3e6e:	4601      	mov	r1, r0
 80a3e70:	2002      	movs	r0, #2
 80a3e72:	f3af 8000 	nop.w
 80a3e76:	bd10      	pop	{r4, pc}
 80a3e78:	4620      	mov	r0, r4
 80a3e7a:	bd10      	pop	{r4, pc}
 80a3e7c:	00000000 	.word	0x00000000

080a3e80 <_localeconv_r>:
 80a3e80:	4800      	ldr	r0, [pc, #0]	; (80a3e84 <_localeconv_r+0x4>)
 80a3e82:	4770      	bx	lr
 80a3e84:	20000080 	.word	0x20000080

080a3e88 <memcpy>:
 80a3e88:	b510      	push	{r4, lr}
 80a3e8a:	1e43      	subs	r3, r0, #1
 80a3e8c:	440a      	add	r2, r1
 80a3e8e:	4291      	cmp	r1, r2
 80a3e90:	d004      	beq.n	80a3e9c <memcpy+0x14>
 80a3e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a3e96:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a3e9a:	e7f8      	b.n	80a3e8e <memcpy+0x6>
 80a3e9c:	bd10      	pop	{r4, pc}

080a3e9e <memset>:
 80a3e9e:	4603      	mov	r3, r0
 80a3ea0:	4402      	add	r2, r0
 80a3ea2:	4293      	cmp	r3, r2
 80a3ea4:	d002      	beq.n	80a3eac <memset+0xe>
 80a3ea6:	f803 1b01 	strb.w	r1, [r3], #1
 80a3eaa:	e7fa      	b.n	80a3ea2 <memset+0x4>
 80a3eac:	4770      	bx	lr
	...

080a3eb0 <srand>:
 80a3eb0:	b538      	push	{r3, r4, r5, lr}
 80a3eb2:	4b12      	ldr	r3, [pc, #72]	; (80a3efc <srand+0x4c>)
 80a3eb4:	4605      	mov	r5, r0
 80a3eb6:	681c      	ldr	r4, [r3, #0]
 80a3eb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3eba:	b9d3      	cbnz	r3, 80a3ef2 <srand+0x42>
 80a3ebc:	2018      	movs	r0, #24
 80a3ebe:	f7fd fbb5 	bl	80a162c <malloc>
 80a3ec2:	f243 330e 	movw	r3, #13070	; 0x330e
 80a3ec6:	63a0      	str	r0, [r4, #56]	; 0x38
 80a3ec8:	8003      	strh	r3, [r0, #0]
 80a3eca:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a3ece:	8043      	strh	r3, [r0, #2]
 80a3ed0:	f241 2334 	movw	r3, #4660	; 0x1234
 80a3ed4:	8083      	strh	r3, [r0, #4]
 80a3ed6:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a3eda:	80c3      	strh	r3, [r0, #6]
 80a3edc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a3ee0:	8103      	strh	r3, [r0, #8]
 80a3ee2:	2305      	movs	r3, #5
 80a3ee4:	8143      	strh	r3, [r0, #10]
 80a3ee6:	230b      	movs	r3, #11
 80a3ee8:	8183      	strh	r3, [r0, #12]
 80a3eea:	2201      	movs	r2, #1
 80a3eec:	2300      	movs	r3, #0
 80a3eee:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a3ef2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3ef4:	2200      	movs	r2, #0
 80a3ef6:	611d      	str	r5, [r3, #16]
 80a3ef8:	615a      	str	r2, [r3, #20]
 80a3efa:	bd38      	pop	{r3, r4, r5, pc}
 80a3efc:	2000007c 	.word	0x2000007c

080a3f00 <strchr>:
 80a3f00:	b2c9      	uxtb	r1, r1
 80a3f02:	4603      	mov	r3, r0
 80a3f04:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a3f08:	b11a      	cbz	r2, 80a3f12 <strchr+0x12>
 80a3f0a:	4291      	cmp	r1, r2
 80a3f0c:	d1f9      	bne.n	80a3f02 <strchr+0x2>
 80a3f0e:	4618      	mov	r0, r3
 80a3f10:	4770      	bx	lr
 80a3f12:	2900      	cmp	r1, #0
 80a3f14:	bf0c      	ite	eq
 80a3f16:	4618      	moveq	r0, r3
 80a3f18:	2000      	movne	r0, #0
 80a3f1a:	4770      	bx	lr

080a3f1c <strcpy>:
 80a3f1c:	4603      	mov	r3, r0
 80a3f1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a3f22:	f803 2b01 	strb.w	r2, [r3], #1
 80a3f26:	2a00      	cmp	r2, #0
 80a3f28:	d1f9      	bne.n	80a3f1e <strcpy+0x2>
 80a3f2a:	4770      	bx	lr

080a3f2c <strdup>:
 80a3f2c:	4b02      	ldr	r3, [pc, #8]	; (80a3f38 <strdup+0xc>)
 80a3f2e:	4601      	mov	r1, r0
 80a3f30:	6818      	ldr	r0, [r3, #0]
 80a3f32:	f000 b803 	b.w	80a3f3c <_strdup_r>
 80a3f36:	bf00      	nop
 80a3f38:	2000007c 	.word	0x2000007c

080a3f3c <_strdup_r>:
 80a3f3c:	b570      	push	{r4, r5, r6, lr}
 80a3f3e:	4606      	mov	r6, r0
 80a3f40:	4608      	mov	r0, r1
 80a3f42:	460c      	mov	r4, r1
 80a3f44:	f000 f80d 	bl	80a3f62 <strlen>
 80a3f48:	1c45      	adds	r5, r0, #1
 80a3f4a:	4629      	mov	r1, r5
 80a3f4c:	4630      	mov	r0, r6
 80a3f4e:	f7fd fb95 	bl	80a167c <_malloc_r>
 80a3f52:	4606      	mov	r6, r0
 80a3f54:	b118      	cbz	r0, 80a3f5e <_strdup_r+0x22>
 80a3f56:	462a      	mov	r2, r5
 80a3f58:	4621      	mov	r1, r4
 80a3f5a:	f7ff ff95 	bl	80a3e88 <memcpy>
 80a3f5e:	4630      	mov	r0, r6
 80a3f60:	bd70      	pop	{r4, r5, r6, pc}

080a3f62 <strlen>:
 80a3f62:	4603      	mov	r3, r0
 80a3f64:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3f68:	2a00      	cmp	r2, #0
 80a3f6a:	d1fb      	bne.n	80a3f64 <strlen+0x2>
 80a3f6c:	1a18      	subs	r0, r3, r0
 80a3f6e:	3801      	subs	r0, #1
 80a3f70:	4770      	bx	lr

080a3f72 <strncmp>:
 80a3f72:	b530      	push	{r4, r5, lr}
 80a3f74:	b182      	cbz	r2, 80a3f98 <strncmp+0x26>
 80a3f76:	1e45      	subs	r5, r0, #1
 80a3f78:	3901      	subs	r1, #1
 80a3f7a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a3f7e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a3f82:	42a3      	cmp	r3, r4
 80a3f84:	d106      	bne.n	80a3f94 <strncmp+0x22>
 80a3f86:	43ec      	mvns	r4, r5
 80a3f88:	4414      	add	r4, r2
 80a3f8a:	42e0      	cmn	r0, r4
 80a3f8c:	d001      	beq.n	80a3f92 <strncmp+0x20>
 80a3f8e:	2b00      	cmp	r3, #0
 80a3f90:	d1f3      	bne.n	80a3f7a <strncmp+0x8>
 80a3f92:	461c      	mov	r4, r3
 80a3f94:	1b18      	subs	r0, r3, r4
 80a3f96:	bd30      	pop	{r4, r5, pc}
 80a3f98:	4610      	mov	r0, r2
 80a3f9a:	bd30      	pop	{r4, r5, pc}

080a3f9c <strncpy>:
 80a3f9c:	4603      	mov	r3, r0
 80a3f9e:	b510      	push	{r4, lr}
 80a3fa0:	b142      	cbz	r2, 80a3fb4 <strncpy+0x18>
 80a3fa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a3fa6:	3a01      	subs	r2, #1
 80a3fa8:	f803 4b01 	strb.w	r4, [r3], #1
 80a3fac:	2c00      	cmp	r4, #0
 80a3fae:	d1f7      	bne.n	80a3fa0 <strncpy+0x4>
 80a3fb0:	441a      	add	r2, r3
 80a3fb2:	e000      	b.n	80a3fb6 <strncpy+0x1a>
 80a3fb4:	bd10      	pop	{r4, pc}
 80a3fb6:	4293      	cmp	r3, r2
 80a3fb8:	d002      	beq.n	80a3fc0 <strncpy+0x24>
 80a3fba:	f803 4b01 	strb.w	r4, [r3], #1
 80a3fbe:	e7fa      	b.n	80a3fb6 <strncpy+0x1a>
 80a3fc0:	bd10      	pop	{r4, pc}

080a3fc2 <strstr>:
 80a3fc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3fc4:	7803      	ldrb	r3, [r0, #0]
 80a3fc6:	b963      	cbnz	r3, 80a3fe2 <strstr+0x20>
 80a3fc8:	780b      	ldrb	r3, [r1, #0]
 80a3fca:	2b00      	cmp	r3, #0
 80a3fcc:	bf18      	it	ne
 80a3fce:	2000      	movne	r0, #0
 80a3fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3fd2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80a3fd6:	b162      	cbz	r2, 80a3ff2 <strstr+0x30>
 80a3fd8:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 80a3fdc:	4630      	mov	r0, r6
 80a3fde:	4297      	cmp	r7, r2
 80a3fe0:	d0f7      	beq.n	80a3fd2 <strstr+0x10>
 80a3fe2:	4603      	mov	r3, r0
 80a3fe4:	1c46      	adds	r6, r0, #1
 80a3fe6:	7800      	ldrb	r0, [r0, #0]
 80a3fe8:	b110      	cbz	r0, 80a3ff0 <strstr+0x2e>
 80a3fea:	1e4d      	subs	r5, r1, #1
 80a3fec:	1e5c      	subs	r4, r3, #1
 80a3fee:	e7f0      	b.n	80a3fd2 <strstr+0x10>
 80a3ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3ff2:	4618      	mov	r0, r3
 80a3ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a3ff6 <sulp>:
 80a3ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3ffa:	460f      	mov	r7, r1
 80a3ffc:	4690      	mov	r8, r2
 80a3ffe:	f001 fc95 	bl	80a592c <__ulp>
 80a4002:	4604      	mov	r4, r0
 80a4004:	460d      	mov	r5, r1
 80a4006:	f1b8 0f00 	cmp.w	r8, #0
 80a400a:	d011      	beq.n	80a4030 <sulp+0x3a>
 80a400c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80a4010:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a4014:	2b00      	cmp	r3, #0
 80a4016:	dd0b      	ble.n	80a4030 <sulp+0x3a>
 80a4018:	051b      	lsls	r3, r3, #20
 80a401a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80a401e:	2400      	movs	r4, #0
 80a4020:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80a4024:	4622      	mov	r2, r4
 80a4026:	462b      	mov	r3, r5
 80a4028:	f7ff f8ae 	bl	80a3188 <__aeabi_dmul>
 80a402c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4030:	4620      	mov	r0, r4
 80a4032:	4629      	mov	r1, r5
 80a4034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a4038 <_strtod_r>:
 80a4038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a403c:	4682      	mov	sl, r0
 80a403e:	460c      	mov	r4, r1
 80a4040:	b09d      	sub	sp, #116	; 0x74
 80a4042:	2300      	movs	r3, #0
 80a4044:	9213      	str	r2, [sp, #76]	; 0x4c
 80a4046:	9318      	str	r3, [sp, #96]	; 0x60
 80a4048:	f04f 0800 	mov.w	r8, #0
 80a404c:	f04f 0900 	mov.w	r9, #0
 80a4050:	9117      	str	r1, [sp, #92]	; 0x5c
 80a4052:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a4054:	781a      	ldrb	r2, [r3, #0]
 80a4056:	2a0d      	cmp	r2, #13
 80a4058:	d805      	bhi.n	80a4066 <_strtod_r+0x2e>
 80a405a:	2a09      	cmp	r2, #9
 80a405c:	d213      	bcs.n	80a4086 <_strtod_r+0x4e>
 80a405e:	2a00      	cmp	r2, #0
 80a4060:	f000 81ad 	beq.w	80a43be <_strtod_r+0x386>
 80a4064:	e012      	b.n	80a408c <_strtod_r+0x54>
 80a4066:	2a2b      	cmp	r2, #43	; 0x2b
 80a4068:	d004      	beq.n	80a4074 <_strtod_r+0x3c>
 80a406a:	2a2d      	cmp	r2, #45	; 0x2d
 80a406c:	d004      	beq.n	80a4078 <_strtod_r+0x40>
 80a406e:	2a20      	cmp	r2, #32
 80a4070:	d10c      	bne.n	80a408c <_strtod_r+0x54>
 80a4072:	e008      	b.n	80a4086 <_strtod_r+0x4e>
 80a4074:	2200      	movs	r2, #0
 80a4076:	e000      	b.n	80a407a <_strtod_r+0x42>
 80a4078:	2201      	movs	r2, #1
 80a407a:	920c      	str	r2, [sp, #48]	; 0x30
 80a407c:	1c5a      	adds	r2, r3, #1
 80a407e:	9217      	str	r2, [sp, #92]	; 0x5c
 80a4080:	785b      	ldrb	r3, [r3, #1]
 80a4082:	b92b      	cbnz	r3, 80a4090 <_strtod_r+0x58>
 80a4084:	e19b      	b.n	80a43be <_strtod_r+0x386>
 80a4086:	3301      	adds	r3, #1
 80a4088:	9317      	str	r3, [sp, #92]	; 0x5c
 80a408a:	e7e2      	b.n	80a4052 <_strtod_r+0x1a>
 80a408c:	2300      	movs	r3, #0
 80a408e:	930c      	str	r3, [sp, #48]	; 0x30
 80a4090:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80a4092:	782b      	ldrb	r3, [r5, #0]
 80a4094:	2b30      	cmp	r3, #48	; 0x30
 80a4096:	d15c      	bne.n	80a4152 <_strtod_r+0x11a>
 80a4098:	786b      	ldrb	r3, [r5, #1]
 80a409a:	2b58      	cmp	r3, #88	; 0x58
 80a409c:	d001      	beq.n	80a40a2 <_strtod_r+0x6a>
 80a409e:	2b78      	cmp	r3, #120	; 0x78
 80a40a0:	d14c      	bne.n	80a413c <_strtod_r+0x104>
 80a40a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a40a4:	4aa8      	ldr	r2, [pc, #672]	; (80a4348 <_strtod_r+0x310>)
 80a40a6:	9301      	str	r3, [sp, #4]
 80a40a8:	ab18      	add	r3, sp, #96	; 0x60
 80a40aa:	9300      	str	r3, [sp, #0]
 80a40ac:	a917      	add	r1, sp, #92	; 0x5c
 80a40ae:	ab19      	add	r3, sp, #100	; 0x64
 80a40b0:	4650      	mov	r0, sl
 80a40b2:	f000 fea4 	bl	80a4dfe <__gethex>
 80a40b6:	f010 0607 	ands.w	r6, r0, #7
 80a40ba:	4604      	mov	r4, r0
 80a40bc:	f000 8585 	beq.w	80a4bca <_strtod_r+0xb92>
 80a40c0:	2e06      	cmp	r6, #6
 80a40c2:	d105      	bne.n	80a40d0 <_strtod_r+0x98>
 80a40c4:	3501      	adds	r5, #1
 80a40c6:	2300      	movs	r3, #0
 80a40c8:	9517      	str	r5, [sp, #92]	; 0x5c
 80a40ca:	930c      	str	r3, [sp, #48]	; 0x30
 80a40cc:	f000 bd7d 	b.w	80a4bca <_strtod_r+0xb92>
 80a40d0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80a40d2:	b13a      	cbz	r2, 80a40e4 <_strtod_r+0xac>
 80a40d4:	2135      	movs	r1, #53	; 0x35
 80a40d6:	a81a      	add	r0, sp, #104	; 0x68
 80a40d8:	f001 fd0f 	bl	80a5afa <__copybits>
 80a40dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a40de:	4650      	mov	r0, sl
 80a40e0:	f001 f994 	bl	80a540c <_Bfree>
 80a40e4:	2e06      	cmp	r6, #6
 80a40e6:	d822      	bhi.n	80a412e <_strtod_r+0xf6>
 80a40e8:	e8df f006 	tbb	[pc, r6]
 80a40ec:	18080d04 	.word	0x18080d04
 80a40f0:	0d1d      	.short	0x0d1d
 80a40f2:	04          	.byte	0x04
 80a40f3:	00          	.byte	0x00
 80a40f4:	f04f 0900 	mov.w	r9, #0
 80a40f8:	46c8      	mov	r8, r9
 80a40fa:	e018      	b.n	80a412e <_strtod_r+0xf6>
 80a40fc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a4100:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80a4104:	e013      	b.n	80a412e <_strtod_r+0xf6>
 80a4106:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a4108:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80a410a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80a410e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80a4112:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a4116:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80a411a:	e008      	b.n	80a412e <_strtod_r+0xf6>
 80a411c:	f8df 922c 	ldr.w	r9, [pc, #556]	; 80a434c <_strtod_r+0x314>
 80a4120:	f04f 0800 	mov.w	r8, #0
 80a4124:	e003      	b.n	80a412e <_strtod_r+0xf6>
 80a4126:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80a412a:	f04f 38ff 	mov.w	r8, #4294967295
 80a412e:	0721      	lsls	r1, r4, #28
 80a4130:	f140 854b 	bpl.w	80a4bca <_strtod_r+0xb92>
 80a4134:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80a4138:	f000 bd47 	b.w	80a4bca <_strtod_r+0xb92>
 80a413c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a413e:	1c5a      	adds	r2, r3, #1
 80a4140:	9217      	str	r2, [sp, #92]	; 0x5c
 80a4142:	785b      	ldrb	r3, [r3, #1]
 80a4144:	2b30      	cmp	r3, #48	; 0x30
 80a4146:	d0f9      	beq.n	80a413c <_strtod_r+0x104>
 80a4148:	2b00      	cmp	r3, #0
 80a414a:	f000 853e 	beq.w	80a4bca <_strtod_r+0xb92>
 80a414e:	2301      	movs	r3, #1
 80a4150:	e000      	b.n	80a4154 <_strtod_r+0x11c>
 80a4152:	2300      	movs	r3, #0
 80a4154:	9305      	str	r3, [sp, #20]
 80a4156:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a4158:	220a      	movs	r2, #10
 80a415a:	9306      	str	r3, [sp, #24]
 80a415c:	2300      	movs	r3, #0
 80a415e:	469b      	mov	fp, r3
 80a4160:	9302      	str	r3, [sp, #8]
 80a4162:	9304      	str	r3, [sp, #16]
 80a4164:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80a4166:	782e      	ldrb	r6, [r5, #0]
 80a4168:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80a416c:	b2d9      	uxtb	r1, r3
 80a416e:	2909      	cmp	r1, #9
 80a4170:	d811      	bhi.n	80a4196 <_strtod_r+0x15e>
 80a4172:	f1bb 0f08 	cmp.w	fp, #8
 80a4176:	bfd5      	itete	le
 80a4178:	9904      	ldrle	r1, [sp, #16]
 80a417a:	9902      	ldrgt	r1, [sp, #8]
 80a417c:	fb02 3301 	mlale	r3, r2, r1, r3
 80a4180:	fb02 3301 	mlagt	r3, r2, r1, r3
 80a4184:	f105 0501 	add.w	r5, r5, #1
 80a4188:	bfd4      	ite	le
 80a418a:	9304      	strle	r3, [sp, #16]
 80a418c:	9302      	strgt	r3, [sp, #8]
 80a418e:	f10b 0b01 	add.w	fp, fp, #1
 80a4192:	9517      	str	r5, [sp, #92]	; 0x5c
 80a4194:	e7e6      	b.n	80a4164 <_strtod_r+0x12c>
 80a4196:	4650      	mov	r0, sl
 80a4198:	f7ff fe72 	bl	80a3e80 <_localeconv_r>
 80a419c:	6807      	ldr	r7, [r0, #0]
 80a419e:	4650      	mov	r0, sl
 80a41a0:	f7ff fe6e 	bl	80a3e80 <_localeconv_r>
 80a41a4:	6800      	ldr	r0, [r0, #0]
 80a41a6:	f7ff fedc 	bl	80a3f62 <strlen>
 80a41aa:	4639      	mov	r1, r7
 80a41ac:	4602      	mov	r2, r0
 80a41ae:	4628      	mov	r0, r5
 80a41b0:	f7ff fedf 	bl	80a3f72 <strncmp>
 80a41b4:	4607      	mov	r7, r0
 80a41b6:	b128      	cbz	r0, 80a41c4 <_strtod_r+0x18c>
 80a41b8:	2000      	movs	r0, #0
 80a41ba:	4633      	mov	r3, r6
 80a41bc:	465d      	mov	r5, fp
 80a41be:	4602      	mov	r2, r0
 80a41c0:	4601      	mov	r1, r0
 80a41c2:	e05a      	b.n	80a427a <_strtod_r+0x242>
 80a41c4:	4650      	mov	r0, sl
 80a41c6:	f7ff fe5b 	bl	80a3e80 <_localeconv_r>
 80a41ca:	6800      	ldr	r0, [r0, #0]
 80a41cc:	f7ff fec9 	bl	80a3f62 <strlen>
 80a41d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a41d2:	181a      	adds	r2, r3, r0
 80a41d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80a41d6:	5c1b      	ldrb	r3, [r3, r0]
 80a41d8:	f1bb 0f00 	cmp.w	fp, #0
 80a41dc:	d145      	bne.n	80a426a <_strtod_r+0x232>
 80a41de:	4658      	mov	r0, fp
 80a41e0:	2b30      	cmp	r3, #48	; 0x30
 80a41e2:	d105      	bne.n	80a41f0 <_strtod_r+0x1b8>
 80a41e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a41e6:	3001      	adds	r0, #1
 80a41e8:	1c5a      	adds	r2, r3, #1
 80a41ea:	9217      	str	r2, [sp, #92]	; 0x5c
 80a41ec:	785b      	ldrb	r3, [r3, #1]
 80a41ee:	e7f7      	b.n	80a41e0 <_strtod_r+0x1a8>
 80a41f0:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80a41f4:	2a08      	cmp	r2, #8
 80a41f6:	d846      	bhi.n	80a4286 <_strtod_r+0x24e>
 80a41f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80a41fa:	9206      	str	r2, [sp, #24]
 80a41fc:	4602      	mov	r2, r0
 80a41fe:	2000      	movs	r0, #0
 80a4200:	4605      	mov	r5, r0
 80a4202:	3b30      	subs	r3, #48	; 0x30
 80a4204:	f100 0101 	add.w	r1, r0, #1
 80a4208:	d029      	beq.n	80a425e <_strtod_r+0x226>
 80a420a:	440a      	add	r2, r1
 80a420c:	4629      	mov	r1, r5
 80a420e:	eb05 0c00 	add.w	ip, r5, r0
 80a4212:	260a      	movs	r6, #10
 80a4214:	4561      	cmp	r1, ip
 80a4216:	d00f      	beq.n	80a4238 <_strtod_r+0x200>
 80a4218:	3101      	adds	r1, #1
 80a421a:	f101 3eff 	add.w	lr, r1, #4294967295
 80a421e:	f1be 0f08 	cmp.w	lr, #8
 80a4222:	dc03      	bgt.n	80a422c <_strtod_r+0x1f4>
 80a4224:	9f04      	ldr	r7, [sp, #16]
 80a4226:	4377      	muls	r7, r6
 80a4228:	9704      	str	r7, [sp, #16]
 80a422a:	e7f3      	b.n	80a4214 <_strtod_r+0x1dc>
 80a422c:	2910      	cmp	r1, #16
 80a422e:	bfde      	ittt	le
 80a4230:	9f02      	ldrle	r7, [sp, #8]
 80a4232:	4377      	mulle	r7, r6
 80a4234:	9702      	strle	r7, [sp, #8]
 80a4236:	e7ed      	b.n	80a4214 <_strtod_r+0x1dc>
 80a4238:	4428      	add	r0, r5
 80a423a:	2808      	cmp	r0, #8
 80a423c:	f100 0501 	add.w	r5, r0, #1
 80a4240:	dc05      	bgt.n	80a424e <_strtod_r+0x216>
 80a4242:	9804      	ldr	r0, [sp, #16]
 80a4244:	210a      	movs	r1, #10
 80a4246:	fb01 3300 	mla	r3, r1, r0, r3
 80a424a:	9304      	str	r3, [sp, #16]
 80a424c:	e006      	b.n	80a425c <_strtod_r+0x224>
 80a424e:	2d10      	cmp	r5, #16
 80a4250:	bfdf      	itttt	le
 80a4252:	9802      	ldrle	r0, [sp, #8]
 80a4254:	210a      	movle	r1, #10
 80a4256:	fb01 3300 	mlale	r3, r1, r0, r3
 80a425a:	9302      	strle	r3, [sp, #8]
 80a425c:	2100      	movs	r1, #0
 80a425e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a4260:	1c58      	adds	r0, r3, #1
 80a4262:	9017      	str	r0, [sp, #92]	; 0x5c
 80a4264:	785b      	ldrb	r3, [r3, #1]
 80a4266:	4608      	mov	r0, r1
 80a4268:	e002      	b.n	80a4270 <_strtod_r+0x238>
 80a426a:	465d      	mov	r5, fp
 80a426c:	4638      	mov	r0, r7
 80a426e:	463a      	mov	r2, r7
 80a4270:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80a4274:	2909      	cmp	r1, #9
 80a4276:	d9c4      	bls.n	80a4202 <_strtod_r+0x1ca>
 80a4278:	2101      	movs	r1, #1
 80a427a:	2b65      	cmp	r3, #101	; 0x65
 80a427c:	d001      	beq.n	80a4282 <_strtod_r+0x24a>
 80a427e:	2b45      	cmp	r3, #69	; 0x45
 80a4280:	d14f      	bne.n	80a4322 <_strtod_r+0x2ea>
 80a4282:	b96d      	cbnz	r5, 80a42a0 <_strtod_r+0x268>
 80a4284:	e004      	b.n	80a4290 <_strtod_r+0x258>
 80a4286:	2b65      	cmp	r3, #101	; 0x65
 80a4288:	f040 84ad 	bne.w	80a4be6 <_strtod_r+0xbae>
 80a428c:	2200      	movs	r2, #0
 80a428e:	2101      	movs	r1, #1
 80a4290:	b928      	cbnz	r0, 80a429e <_strtod_r+0x266>
 80a4292:	9b05      	ldr	r3, [sp, #20]
 80a4294:	2b00      	cmp	r3, #0
 80a4296:	f000 8092 	beq.w	80a43be <_strtod_r+0x386>
 80a429a:	4605      	mov	r5, r0
 80a429c:	e000      	b.n	80a42a0 <_strtod_r+0x268>
 80a429e:	2500      	movs	r5, #0
 80a42a0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80a42a2:	1c63      	adds	r3, r4, #1
 80a42a4:	9317      	str	r3, [sp, #92]	; 0x5c
 80a42a6:	7863      	ldrb	r3, [r4, #1]
 80a42a8:	2b2b      	cmp	r3, #43	; 0x2b
 80a42aa:	d006      	beq.n	80a42ba <_strtod_r+0x282>
 80a42ac:	2b2d      	cmp	r3, #45	; 0x2d
 80a42ae:	d002      	beq.n	80a42b6 <_strtod_r+0x27e>
 80a42b0:	2600      	movs	r6, #0
 80a42b2:	9603      	str	r6, [sp, #12]
 80a42b4:	e006      	b.n	80a42c4 <_strtod_r+0x28c>
 80a42b6:	2301      	movs	r3, #1
 80a42b8:	e000      	b.n	80a42bc <_strtod_r+0x284>
 80a42ba:	2300      	movs	r3, #0
 80a42bc:	9303      	str	r3, [sp, #12]
 80a42be:	1ca3      	adds	r3, r4, #2
 80a42c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80a42c2:	78a3      	ldrb	r3, [r4, #2]
 80a42c4:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80a42c8:	2e09      	cmp	r6, #9
 80a42ca:	d829      	bhi.n	80a4320 <_strtod_r+0x2e8>
 80a42cc:	2b30      	cmp	r3, #48	; 0x30
 80a42ce:	d104      	bne.n	80a42da <_strtod_r+0x2a2>
 80a42d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a42d2:	1c5e      	adds	r6, r3, #1
 80a42d4:	9617      	str	r6, [sp, #92]	; 0x5c
 80a42d6:	785b      	ldrb	r3, [r3, #1]
 80a42d8:	e7f8      	b.n	80a42cc <_strtod_r+0x294>
 80a42da:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 80a42de:	2e08      	cmp	r6, #8
 80a42e0:	d81f      	bhi.n	80a4322 <_strtod_r+0x2ea>
 80a42e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80a42e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a42e8:	461f      	mov	r7, r3
 80a42ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a42ec:	1c5e      	adds	r6, r3, #1
 80a42ee:	9617      	str	r6, [sp, #92]	; 0x5c
 80a42f0:	785b      	ldrb	r3, [r3, #1]
 80a42f2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80a42f6:	f1bc 0f09 	cmp.w	ip, #9
 80a42fa:	d805      	bhi.n	80a4308 <_strtod_r+0x2d0>
 80a42fc:	260a      	movs	r6, #10
 80a42fe:	fb06 3e0e 	mla	lr, r6, lr, r3
 80a4302:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80a4306:	e7f0      	b.n	80a42ea <_strtod_r+0x2b2>
 80a4308:	1bf6      	subs	r6, r6, r7
 80a430a:	2e08      	cmp	r6, #8
 80a430c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80a4310:	dc02      	bgt.n	80a4318 <_strtod_r+0x2e0>
 80a4312:	4576      	cmp	r6, lr
 80a4314:	bfa8      	it	ge
 80a4316:	4676      	movge	r6, lr
 80a4318:	9f03      	ldr	r7, [sp, #12]
 80a431a:	b11f      	cbz	r7, 80a4324 <_strtod_r+0x2ec>
 80a431c:	4276      	negs	r6, r6
 80a431e:	e001      	b.n	80a4324 <_strtod_r+0x2ec>
 80a4320:	9417      	str	r4, [sp, #92]	; 0x5c
 80a4322:	2600      	movs	r6, #0
 80a4324:	2d00      	cmp	r5, #0
 80a4326:	d152      	bne.n	80a43ce <_strtod_r+0x396>
 80a4328:	2800      	cmp	r0, #0
 80a432a:	f040 844e 	bne.w	80a4bca <_strtod_r+0xb92>
 80a432e:	9a05      	ldr	r2, [sp, #20]
 80a4330:	2a00      	cmp	r2, #0
 80a4332:	f040 844a 	bne.w	80a4bca <_strtod_r+0xb92>
 80a4336:	2900      	cmp	r1, #0
 80a4338:	d141      	bne.n	80a43be <_strtod_r+0x386>
 80a433a:	2b4e      	cmp	r3, #78	; 0x4e
 80a433c:	d020      	beq.n	80a4380 <_strtod_r+0x348>
 80a433e:	dc07      	bgt.n	80a4350 <_strtod_r+0x318>
 80a4340:	2b49      	cmp	r3, #73	; 0x49
 80a4342:	d00a      	beq.n	80a435a <_strtod_r+0x322>
 80a4344:	e03b      	b.n	80a43be <_strtod_r+0x386>
 80a4346:	bf00      	nop
 80a4348:	080a6134 	.word	0x080a6134
 80a434c:	7ff00000 	.word	0x7ff00000
 80a4350:	2b69      	cmp	r3, #105	; 0x69
 80a4352:	d002      	beq.n	80a435a <_strtod_r+0x322>
 80a4354:	2b6e      	cmp	r3, #110	; 0x6e
 80a4356:	d013      	beq.n	80a4380 <_strtod_r+0x348>
 80a4358:	e031      	b.n	80a43be <_strtod_r+0x386>
 80a435a:	49aa      	ldr	r1, [pc, #680]	; (80a4604 <_strtod_r+0x5cc>)
 80a435c:	a817      	add	r0, sp, #92	; 0x5c
 80a435e:	f000 ff7f 	bl	80a5260 <__match>
 80a4362:	b360      	cbz	r0, 80a43be <_strtod_r+0x386>
 80a4364:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a4366:	49a8      	ldr	r1, [pc, #672]	; (80a4608 <_strtod_r+0x5d0>)
 80a4368:	3b01      	subs	r3, #1
 80a436a:	a817      	add	r0, sp, #92	; 0x5c
 80a436c:	9317      	str	r3, [sp, #92]	; 0x5c
 80a436e:	f000 ff77 	bl	80a5260 <__match>
 80a4372:	b910      	cbnz	r0, 80a437a <_strtod_r+0x342>
 80a4374:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a4376:	3301      	adds	r3, #1
 80a4378:	9317      	str	r3, [sp, #92]	; 0x5c
 80a437a:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 80a4624 <_strtod_r+0x5ec>
 80a437e:	e01a      	b.n	80a43b6 <_strtod_r+0x37e>
 80a4380:	49a2      	ldr	r1, [pc, #648]	; (80a460c <_strtod_r+0x5d4>)
 80a4382:	a817      	add	r0, sp, #92	; 0x5c
 80a4384:	f000 ff6c 	bl	80a5260 <__match>
 80a4388:	b1c8      	cbz	r0, 80a43be <_strtod_r+0x386>
 80a438a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a438c:	781b      	ldrb	r3, [r3, #0]
 80a438e:	2b28      	cmp	r3, #40	; 0x28
 80a4390:	d10f      	bne.n	80a43b2 <_strtod_r+0x37a>
 80a4392:	aa1a      	add	r2, sp, #104	; 0x68
 80a4394:	499e      	ldr	r1, [pc, #632]	; (80a4610 <_strtod_r+0x5d8>)
 80a4396:	a817      	add	r0, sp, #92	; 0x5c
 80a4398:	f000 ff75 	bl	80a5286 <__hexnan>
 80a439c:	2805      	cmp	r0, #5
 80a439e:	d108      	bne.n	80a43b2 <_strtod_r+0x37a>
 80a43a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a43a2:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a43a6:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80a43aa:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80a43ae:	f000 bc0c 	b.w	80a4bca <_strtod_r+0xb92>
 80a43b2:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80a4628 <_strtod_r+0x5f0>
 80a43b6:	f04f 0800 	mov.w	r8, #0
 80a43ba:	f000 bc06 	b.w	80a4bca <_strtod_r+0xb92>
 80a43be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a43c0:	9417      	str	r4, [sp, #92]	; 0x5c
 80a43c2:	2b00      	cmp	r3, #0
 80a43c4:	f000 840c 	beq.w	80a4be0 <_strtod_r+0xba8>
 80a43c8:	2300      	movs	r3, #0
 80a43ca:	930c      	str	r3, [sp, #48]	; 0x30
 80a43cc:	e3ff      	b.n	80a4bce <_strtod_r+0xb96>
 80a43ce:	462c      	mov	r4, r5
 80a43d0:	f1bb 0f00 	cmp.w	fp, #0
 80a43d4:	bf08      	it	eq
 80a43d6:	46ab      	moveq	fp, r5
 80a43d8:	9804      	ldr	r0, [sp, #16]
 80a43da:	2d10      	cmp	r5, #16
 80a43dc:	bfa8      	it	ge
 80a43de:	2410      	movge	r4, #16
 80a43e0:	1ab7      	subs	r7, r6, r2
 80a43e2:	f7fe fe5b 	bl	80a309c <__aeabi_ui2d>
 80a43e6:	2c09      	cmp	r4, #9
 80a43e8:	4680      	mov	r8, r0
 80a43ea:	4689      	mov	r9, r1
 80a43ec:	dd13      	ble.n	80a4416 <_strtod_r+0x3de>
 80a43ee:	4b89      	ldr	r3, [pc, #548]	; (80a4614 <_strtod_r+0x5dc>)
 80a43f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80a43f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80a43f8:	f7fe fec6 	bl	80a3188 <__aeabi_dmul>
 80a43fc:	4680      	mov	r8, r0
 80a43fe:	9802      	ldr	r0, [sp, #8]
 80a4400:	4689      	mov	r9, r1
 80a4402:	f7fe fe4b 	bl	80a309c <__aeabi_ui2d>
 80a4406:	4602      	mov	r2, r0
 80a4408:	460b      	mov	r3, r1
 80a440a:	4640      	mov	r0, r8
 80a440c:	4649      	mov	r1, r9
 80a440e:	f7fe fd09 	bl	80a2e24 <__adddf3>
 80a4412:	4680      	mov	r8, r0
 80a4414:	4689      	mov	r9, r1
 80a4416:	2d0f      	cmp	r5, #15
 80a4418:	dc33      	bgt.n	80a4482 <_strtod_r+0x44a>
 80a441a:	2f00      	cmp	r7, #0
 80a441c:	f000 83d5 	beq.w	80a4bca <_strtod_r+0xb92>
 80a4420:	dd22      	ble.n	80a4468 <_strtod_r+0x430>
 80a4422:	2f16      	cmp	r7, #22
 80a4424:	dc07      	bgt.n	80a4436 <_strtod_r+0x3fe>
 80a4426:	4d7b      	ldr	r5, [pc, #492]	; (80a4614 <_strtod_r+0x5dc>)
 80a4428:	4642      	mov	r2, r8
 80a442a:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 80a442e:	464b      	mov	r3, r9
 80a4430:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a4434:	e013      	b.n	80a445e <_strtod_r+0x426>
 80a4436:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80a443a:	429f      	cmp	r7, r3
 80a443c:	dc21      	bgt.n	80a4482 <_strtod_r+0x44a>
 80a443e:	4c75      	ldr	r4, [pc, #468]	; (80a4614 <_strtod_r+0x5dc>)
 80a4440:	f1c5 050f 	rsb	r5, r5, #15
 80a4444:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80a4448:	1b7d      	subs	r5, r7, r5
 80a444a:	4642      	mov	r2, r8
 80a444c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a4450:	464b      	mov	r3, r9
 80a4452:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80a4456:	f7fe fe97 	bl	80a3188 <__aeabi_dmul>
 80a445a:	e9d4 2300 	ldrd	r2, r3, [r4]
 80a445e:	f7fe fe93 	bl	80a3188 <__aeabi_dmul>
 80a4462:	4680      	mov	r8, r0
 80a4464:	4689      	mov	r9, r1
 80a4466:	e3b0      	b.n	80a4bca <_strtod_r+0xb92>
 80a4468:	f117 0f16 	cmn.w	r7, #22
 80a446c:	db09      	blt.n	80a4482 <_strtod_r+0x44a>
 80a446e:	4d69      	ldr	r5, [pc, #420]	; (80a4614 <_strtod_r+0x5dc>)
 80a4470:	4640      	mov	r0, r8
 80a4472:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 80a4476:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a447a:	4649      	mov	r1, r9
 80a447c:	f7fe ffae 	bl	80a33dc <__aeabi_ddiv>
 80a4480:	e7ef      	b.n	80a4462 <_strtod_r+0x42a>
 80a4482:	1b2c      	subs	r4, r5, r4
 80a4484:	443c      	add	r4, r7
 80a4486:	2c00      	cmp	r4, #0
 80a4488:	dd5d      	ble.n	80a4546 <_strtod_r+0x50e>
 80a448a:	f014 010f 	ands.w	r1, r4, #15
 80a448e:	d00a      	beq.n	80a44a6 <_strtod_r+0x46e>
 80a4490:	4b60      	ldr	r3, [pc, #384]	; (80a4614 <_strtod_r+0x5dc>)
 80a4492:	4642      	mov	r2, r8
 80a4494:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80a4498:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a449c:	464b      	mov	r3, r9
 80a449e:	f7fe fe73 	bl	80a3188 <__aeabi_dmul>
 80a44a2:	4680      	mov	r8, r0
 80a44a4:	4689      	mov	r9, r1
 80a44a6:	f034 040f 	bics.w	r4, r4, #15
 80a44aa:	f000 80c1 	beq.w	80a4630 <_strtod_r+0x5f8>
 80a44ae:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 80a44b2:	dd0f      	ble.n	80a44d4 <_strtod_r+0x49c>
 80a44b4:	f04f 0b00 	mov.w	fp, #0
 80a44b8:	f8cd b008 	str.w	fp, [sp, #8]
 80a44bc:	f8cd b014 	str.w	fp, [sp, #20]
 80a44c0:	f8cd b010 	str.w	fp, [sp, #16]
 80a44c4:	2322      	movs	r3, #34	; 0x22
 80a44c6:	f8ca 3000 	str.w	r3, [sl]
 80a44ca:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80a4624 <_strtod_r+0x5ec>
 80a44ce:	f04f 0800 	mov.w	r8, #0
 80a44d2:	e189      	b.n	80a47e8 <_strtod_r+0x7b0>
 80a44d4:	4640      	mov	r0, r8
 80a44d6:	4649      	mov	r1, r9
 80a44d8:	2300      	movs	r3, #0
 80a44da:	4e4f      	ldr	r6, [pc, #316]	; (80a4618 <_strtod_r+0x5e0>)
 80a44dc:	1124      	asrs	r4, r4, #4
 80a44de:	9302      	str	r3, [sp, #8]
 80a44e0:	2c01      	cmp	r4, #1
 80a44e2:	dd0c      	ble.n	80a44fe <_strtod_r+0x4c6>
 80a44e4:	07e2      	lsls	r2, r4, #31
 80a44e6:	d504      	bpl.n	80a44f2 <_strtod_r+0x4ba>
 80a44e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a44ec:	f7fe fe4c 	bl	80a3188 <__aeabi_dmul>
 80a44f0:	2301      	movs	r3, #1
 80a44f2:	9a02      	ldr	r2, [sp, #8]
 80a44f4:	1064      	asrs	r4, r4, #1
 80a44f6:	3201      	adds	r2, #1
 80a44f8:	9202      	str	r2, [sp, #8]
 80a44fa:	3608      	adds	r6, #8
 80a44fc:	e7f0      	b.n	80a44e0 <_strtod_r+0x4a8>
 80a44fe:	b10b      	cbz	r3, 80a4504 <_strtod_r+0x4cc>
 80a4500:	4680      	mov	r8, r0
 80a4502:	4689      	mov	r9, r1
 80a4504:	4b44      	ldr	r3, [pc, #272]	; (80a4618 <_strtod_r+0x5e0>)
 80a4506:	9a02      	ldr	r2, [sp, #8]
 80a4508:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a450c:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 80a4510:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a4514:	4642      	mov	r2, r8
 80a4516:	464b      	mov	r3, r9
 80a4518:	f7fe fe36 	bl	80a3188 <__aeabi_dmul>
 80a451c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a4520:	4689      	mov	r9, r1
 80a4522:	460a      	mov	r2, r1
 80a4524:	0d1b      	lsrs	r3, r3, #20
 80a4526:	493d      	ldr	r1, [pc, #244]	; (80a461c <_strtod_r+0x5e4>)
 80a4528:	051b      	lsls	r3, r3, #20
 80a452a:	428b      	cmp	r3, r1
 80a452c:	4680      	mov	r8, r0
 80a452e:	d8c1      	bhi.n	80a44b4 <_strtod_r+0x47c>
 80a4530:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80a4534:	428b      	cmp	r3, r1
 80a4536:	bf86      	itte	hi
 80a4538:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 80a462c <_strtod_r+0x5f4>
 80a453c:	f04f 38ff 	movhi.w	r8, #4294967295
 80a4540:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80a4544:	e074      	b.n	80a4630 <_strtod_r+0x5f8>
 80a4546:	d073      	beq.n	80a4630 <_strtod_r+0x5f8>
 80a4548:	4264      	negs	r4, r4
 80a454a:	f014 020f 	ands.w	r2, r4, #15
 80a454e:	d00a      	beq.n	80a4566 <_strtod_r+0x52e>
 80a4550:	4b30      	ldr	r3, [pc, #192]	; (80a4614 <_strtod_r+0x5dc>)
 80a4552:	4640      	mov	r0, r8
 80a4554:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a4558:	4649      	mov	r1, r9
 80a455a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a455e:	f7fe ff3d 	bl	80a33dc <__aeabi_ddiv>
 80a4562:	4680      	mov	r8, r0
 80a4564:	4689      	mov	r9, r1
 80a4566:	1124      	asrs	r4, r4, #4
 80a4568:	d062      	beq.n	80a4630 <_strtod_r+0x5f8>
 80a456a:	2c1f      	cmp	r4, #31
 80a456c:	dd08      	ble.n	80a4580 <_strtod_r+0x548>
 80a456e:	f04f 0b00 	mov.w	fp, #0
 80a4572:	f8cd b008 	str.w	fp, [sp, #8]
 80a4576:	f8cd b014 	str.w	fp, [sp, #20]
 80a457a:	f8cd b010 	str.w	fp, [sp, #16]
 80a457e:	e12c      	b.n	80a47da <_strtod_r+0x7a2>
 80a4580:	4640      	mov	r0, r8
 80a4582:	4649      	mov	r1, r9
 80a4584:	f014 0f10 	tst.w	r4, #16
 80a4588:	bf0c      	ite	eq
 80a458a:	2300      	moveq	r3, #0
 80a458c:	236a      	movne	r3, #106	; 0x6a
 80a458e:	4e24      	ldr	r6, [pc, #144]	; (80a4620 <_strtod_r+0x5e8>)
 80a4590:	9303      	str	r3, [sp, #12]
 80a4592:	2300      	movs	r3, #0
 80a4594:	2c00      	cmp	r4, #0
 80a4596:	dd09      	ble.n	80a45ac <_strtod_r+0x574>
 80a4598:	07e2      	lsls	r2, r4, #31
 80a459a:	d504      	bpl.n	80a45a6 <_strtod_r+0x56e>
 80a459c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a45a0:	f7fe fdf2 	bl	80a3188 <__aeabi_dmul>
 80a45a4:	2301      	movs	r3, #1
 80a45a6:	1064      	asrs	r4, r4, #1
 80a45a8:	3608      	adds	r6, #8
 80a45aa:	e7f3      	b.n	80a4594 <_strtod_r+0x55c>
 80a45ac:	b10b      	cbz	r3, 80a45b2 <_strtod_r+0x57a>
 80a45ae:	4680      	mov	r8, r0
 80a45b0:	4689      	mov	r9, r1
 80a45b2:	9b03      	ldr	r3, [sp, #12]
 80a45b4:	b1eb      	cbz	r3, 80a45f2 <_strtod_r+0x5ba>
 80a45b6:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80a45ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a45be:	2b00      	cmp	r3, #0
 80a45c0:	4649      	mov	r1, r9
 80a45c2:	dd16      	ble.n	80a45f2 <_strtod_r+0x5ba>
 80a45c4:	2b1f      	cmp	r3, #31
 80a45c6:	dd0e      	ble.n	80a45e6 <_strtod_r+0x5ae>
 80a45c8:	2b34      	cmp	r3, #52	; 0x34
 80a45ca:	bfde      	ittt	le
 80a45cc:	3b20      	suble	r3, #32
 80a45ce:	f04f 32ff 	movle.w	r2, #4294967295
 80a45d2:	fa02 f303 	lslle.w	r3, r2, r3
 80a45d6:	f04f 0800 	mov.w	r8, #0
 80a45da:	bfcc      	ite	gt
 80a45dc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80a45e0:	ea03 0901 	andle.w	r9, r3, r1
 80a45e4:	e005      	b.n	80a45f2 <_strtod_r+0x5ba>
 80a45e6:	f04f 32ff 	mov.w	r2, #4294967295
 80a45ea:	fa02 f303 	lsl.w	r3, r2, r3
 80a45ee:	ea03 0808 	and.w	r8, r3, r8
 80a45f2:	2200      	movs	r2, #0
 80a45f4:	2300      	movs	r3, #0
 80a45f6:	4640      	mov	r0, r8
 80a45f8:	4649      	mov	r1, r9
 80a45fa:	f7ff f82d 	bl	80a3658 <__aeabi_dcmpeq>
 80a45fe:	2800      	cmp	r0, #0
 80a4600:	d1b5      	bne.n	80a456e <_strtod_r+0x536>
 80a4602:	e017      	b.n	80a4634 <_strtod_r+0x5fc>
 80a4604:	080a6148 	.word	0x080a6148
 80a4608:	080a614b 	.word	0x080a614b
 80a460c:	080a6151 	.word	0x080a6151
 80a4610:	080a6154 	.word	0x080a6154
 80a4614:	080a6190 	.word	0x080a6190
 80a4618:	080a6258 	.word	0x080a6258
 80a461c:	7ca00000 	.word	0x7ca00000
 80a4620:	080a6168 	.word	0x080a6168
 80a4624:	7ff00000 	.word	0x7ff00000
 80a4628:	fff80000 	.word	0xfff80000
 80a462c:	7fefffff 	.word	0x7fefffff
 80a4630:	2300      	movs	r3, #0
 80a4632:	9303      	str	r3, [sp, #12]
 80a4634:	9b04      	ldr	r3, [sp, #16]
 80a4636:	465a      	mov	r2, fp
 80a4638:	9300      	str	r3, [sp, #0]
 80a463a:	9906      	ldr	r1, [sp, #24]
 80a463c:	462b      	mov	r3, r5
 80a463e:	4650      	mov	r0, sl
 80a4640:	f000 ff36 	bl	80a54b0 <__s2b>
 80a4644:	9005      	str	r0, [sp, #20]
 80a4646:	2800      	cmp	r0, #0
 80a4648:	f43f af34 	beq.w	80a44b4 <_strtod_r+0x47c>
 80a464c:	2f00      	cmp	r7, #0
 80a464e:	f1c7 0300 	rsb	r3, r7, #0
 80a4652:	bfa8      	it	ge
 80a4654:	2300      	movge	r3, #0
 80a4656:	930d      	str	r3, [sp, #52]	; 0x34
 80a4658:	f04f 0b00 	mov.w	fp, #0
 80a465c:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 80a4660:	9312      	str	r3, [sp, #72]	; 0x48
 80a4662:	f8cd b008 	str.w	fp, [sp, #8]
 80a4666:	9b05      	ldr	r3, [sp, #20]
 80a4668:	4650      	mov	r0, sl
 80a466a:	6859      	ldr	r1, [r3, #4]
 80a466c:	f000 fe99 	bl	80a53a2 <_Balloc>
 80a4670:	9004      	str	r0, [sp, #16]
 80a4672:	2800      	cmp	r0, #0
 80a4674:	f43f af26 	beq.w	80a44c4 <_strtod_r+0x48c>
 80a4678:	9b05      	ldr	r3, [sp, #20]
 80a467a:	300c      	adds	r0, #12
 80a467c:	691a      	ldr	r2, [r3, #16]
 80a467e:	f103 010c 	add.w	r1, r3, #12
 80a4682:	3202      	adds	r2, #2
 80a4684:	0092      	lsls	r2, r2, #2
 80a4686:	f7ff fbff 	bl	80a3e88 <memcpy>
 80a468a:	ab1a      	add	r3, sp, #104	; 0x68
 80a468c:	9301      	str	r3, [sp, #4]
 80a468e:	ab19      	add	r3, sp, #100	; 0x64
 80a4690:	9300      	str	r3, [sp, #0]
 80a4692:	4642      	mov	r2, r8
 80a4694:	464b      	mov	r3, r9
 80a4696:	4650      	mov	r0, sl
 80a4698:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80a469c:	f001 f9b7 	bl	80a5a0e <__d2b>
 80a46a0:	9018      	str	r0, [sp, #96]	; 0x60
 80a46a2:	2800      	cmp	r0, #0
 80a46a4:	f43f af0e 	beq.w	80a44c4 <_strtod_r+0x48c>
 80a46a8:	2101      	movs	r1, #1
 80a46aa:	4650      	mov	r0, sl
 80a46ac:	f000 ff8b 	bl	80a55c6 <__i2b>
 80a46b0:	9002      	str	r0, [sp, #8]
 80a46b2:	2800      	cmp	r0, #0
 80a46b4:	f43f af06 	beq.w	80a44c4 <_strtod_r+0x48c>
 80a46b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a46ba:	9903      	ldr	r1, [sp, #12]
 80a46bc:	2b00      	cmp	r3, #0
 80a46be:	bfac      	ite	ge
 80a46c0:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 80a46c2:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80a46c4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80a46c6:	bfac      	ite	ge
 80a46c8:	18d6      	addge	r6, r2, r3
 80a46ca:	1ad2      	sublt	r2, r2, r3
 80a46cc:	eba3 0301 	sub.w	r3, r3, r1
 80a46d0:	4423      	add	r3, r4
 80a46d2:	49b1      	ldr	r1, [pc, #708]	; (80a4998 <_strtod_r+0x960>)
 80a46d4:	f103 33ff 	add.w	r3, r3, #4294967295
 80a46d8:	bfac      	ite	ge
 80a46da:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 80a46dc:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 80a46de:	428b      	cmp	r3, r1
 80a46e0:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 80a46e4:	f280 8085 	bge.w	80a47f2 <_strtod_r+0x7ba>
 80a46e8:	1ac9      	subs	r1, r1, r3
 80a46ea:	291f      	cmp	r1, #31
 80a46ec:	bfc8      	it	gt
 80a46ee:	4dab      	ldrgt	r5, [pc, #684]	; (80a499c <_strtod_r+0x964>)
 80a46f0:	f04f 0701 	mov.w	r7, #1
 80a46f4:	bfd4      	ite	le
 80a46f6:	fa07 f301 	lslle.w	r3, r7, r1
 80a46fa:	1aed      	subgt	r5, r5, r3
 80a46fc:	eba4 0401 	sub.w	r4, r4, r1
 80a4700:	bfd9      	ittee	le
 80a4702:	9307      	strle	r3, [sp, #28]
 80a4704:	2500      	movle	r5, #0
 80a4706:	fa07 f505 	lslgt.w	r5, r7, r5
 80a470a:	9707      	strgt	r7, [sp, #28]
 80a470c:	1937      	adds	r7, r6, r4
 80a470e:	9b03      	ldr	r3, [sp, #12]
 80a4710:	42be      	cmp	r6, r7
 80a4712:	4414      	add	r4, r2
 80a4714:	441c      	add	r4, r3
 80a4716:	4633      	mov	r3, r6
 80a4718:	bfa8      	it	ge
 80a471a:	463b      	movge	r3, r7
 80a471c:	42a3      	cmp	r3, r4
 80a471e:	bfa8      	it	ge
 80a4720:	4623      	movge	r3, r4
 80a4722:	2b00      	cmp	r3, #0
 80a4724:	bfc2      	ittt	gt
 80a4726:	1aff      	subgt	r7, r7, r3
 80a4728:	1ae4      	subgt	r4, r4, r3
 80a472a:	1af6      	subgt	r6, r6, r3
 80a472c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a472e:	2b00      	cmp	r3, #0
 80a4730:	d163      	bne.n	80a47fa <_strtod_r+0x7c2>
 80a4732:	2f00      	cmp	r7, #0
 80a4734:	dc7a      	bgt.n	80a482c <_strtod_r+0x7f4>
 80a4736:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80a4738:	2b00      	cmp	r3, #0
 80a473a:	f040 8081 	bne.w	80a4840 <_strtod_r+0x808>
 80a473e:	2c00      	cmp	r4, #0
 80a4740:	f300 8088 	bgt.w	80a4854 <_strtod_r+0x81c>
 80a4744:	2e00      	cmp	r6, #0
 80a4746:	f300 808f 	bgt.w	80a4868 <_strtod_r+0x830>
 80a474a:	9a04      	ldr	r2, [sp, #16]
 80a474c:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a474e:	4650      	mov	r0, sl
 80a4750:	f001 f88d 	bl	80a586e <__mdiff>
 80a4754:	4683      	mov	fp, r0
 80a4756:	2800      	cmp	r0, #0
 80a4758:	f43f aeb4 	beq.w	80a44c4 <_strtod_r+0x48c>
 80a475c:	68c3      	ldr	r3, [r0, #12]
 80a475e:	2400      	movs	r4, #0
 80a4760:	60c4      	str	r4, [r0, #12]
 80a4762:	9902      	ldr	r1, [sp, #8]
 80a4764:	9306      	str	r3, [sp, #24]
 80a4766:	f001 f866 	bl	80a5836 <__mcmp>
 80a476a:	42a0      	cmp	r0, r4
 80a476c:	f280 808b 	bge.w	80a4886 <_strtod_r+0x84e>
 80a4770:	9b06      	ldr	r3, [sp, #24]
 80a4772:	2b00      	cmp	r3, #0
 80a4774:	f040 8202 	bne.w	80a4b7c <_strtod_r+0xb44>
 80a4778:	f1b8 0f00 	cmp.w	r8, #0
 80a477c:	f040 81fe 	bne.w	80a4b7c <_strtod_r+0xb44>
 80a4780:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a4784:	2b00      	cmp	r3, #0
 80a4786:	f040 81f9 	bne.w	80a4b7c <_strtod_r+0xb44>
 80a478a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a478e:	0d1b      	lsrs	r3, r3, #20
 80a4790:	051b      	lsls	r3, r3, #20
 80a4792:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a4796:	f240 81f1 	bls.w	80a4b7c <_strtod_r+0xb44>
 80a479a:	f8db 3014 	ldr.w	r3, [fp, #20]
 80a479e:	2b00      	cmp	r3, #0
 80a47a0:	d06c      	beq.n	80a487c <_strtod_r+0x844>
 80a47a2:	4659      	mov	r1, fp
 80a47a4:	2201      	movs	r2, #1
 80a47a6:	4650      	mov	r0, sl
 80a47a8:	f000 fff4 	bl	80a5794 <__lshift>
 80a47ac:	9902      	ldr	r1, [sp, #8]
 80a47ae:	4683      	mov	fp, r0
 80a47b0:	f001 f841 	bl	80a5836 <__mcmp>
 80a47b4:	2800      	cmp	r0, #0
 80a47b6:	f340 81e1 	ble.w	80a4b7c <_strtod_r+0xb44>
 80a47ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a47be:	9a03      	ldr	r2, [sp, #12]
 80a47c0:	0d1b      	lsrs	r3, r3, #20
 80a47c2:	051b      	lsls	r3, r3, #20
 80a47c4:	2a00      	cmp	r2, #0
 80a47c6:	f000 808d 	beq.w	80a48e4 <_strtod_r+0x8ac>
 80a47ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a47ce:	f300 8089 	bgt.w	80a48e4 <_strtod_r+0x8ac>
 80a47d2:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 80a47d6:	f300 81d3 	bgt.w	80a4b80 <_strtod_r+0xb48>
 80a47da:	2322      	movs	r3, #34	; 0x22
 80a47dc:	f04f 0800 	mov.w	r8, #0
 80a47e0:	f04f 0900 	mov.w	r9, #0
 80a47e4:	f8ca 3000 	str.w	r3, [sl]
 80a47e8:	9b05      	ldr	r3, [sp, #20]
 80a47ea:	2b00      	cmp	r3, #0
 80a47ec:	f040 81d9 	bne.w	80a4ba2 <_strtod_r+0xb6a>
 80a47f0:	e1eb      	b.n	80a4bca <_strtod_r+0xb92>
 80a47f2:	2301      	movs	r3, #1
 80a47f4:	2500      	movs	r5, #0
 80a47f6:	9307      	str	r3, [sp, #28]
 80a47f8:	e788      	b.n	80a470c <_strtod_r+0x6d4>
 80a47fa:	461a      	mov	r2, r3
 80a47fc:	9902      	ldr	r1, [sp, #8]
 80a47fe:	4650      	mov	r0, sl
 80a4800:	f000 ff7a 	bl	80a56f8 <__pow5mult>
 80a4804:	9002      	str	r0, [sp, #8]
 80a4806:	2800      	cmp	r0, #0
 80a4808:	f43f ae5c 	beq.w	80a44c4 <_strtod_r+0x48c>
 80a480c:	4601      	mov	r1, r0
 80a480e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80a4810:	4650      	mov	r0, sl
 80a4812:	f000 fee1 	bl	80a55d8 <__multiply>
 80a4816:	9006      	str	r0, [sp, #24]
 80a4818:	2800      	cmp	r0, #0
 80a481a:	f43f ae53 	beq.w	80a44c4 <_strtod_r+0x48c>
 80a481e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a4820:	4650      	mov	r0, sl
 80a4822:	f000 fdf3 	bl	80a540c <_Bfree>
 80a4826:	9b06      	ldr	r3, [sp, #24]
 80a4828:	9318      	str	r3, [sp, #96]	; 0x60
 80a482a:	e782      	b.n	80a4732 <_strtod_r+0x6fa>
 80a482c:	463a      	mov	r2, r7
 80a482e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a4830:	4650      	mov	r0, sl
 80a4832:	f000 ffaf 	bl	80a5794 <__lshift>
 80a4836:	9018      	str	r0, [sp, #96]	; 0x60
 80a4838:	2800      	cmp	r0, #0
 80a483a:	f47f af7c 	bne.w	80a4736 <_strtod_r+0x6fe>
 80a483e:	e641      	b.n	80a44c4 <_strtod_r+0x48c>
 80a4840:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80a4842:	9904      	ldr	r1, [sp, #16]
 80a4844:	4650      	mov	r0, sl
 80a4846:	f000 ff57 	bl	80a56f8 <__pow5mult>
 80a484a:	9004      	str	r0, [sp, #16]
 80a484c:	2800      	cmp	r0, #0
 80a484e:	f47f af76 	bne.w	80a473e <_strtod_r+0x706>
 80a4852:	e637      	b.n	80a44c4 <_strtod_r+0x48c>
 80a4854:	4622      	mov	r2, r4
 80a4856:	9904      	ldr	r1, [sp, #16]
 80a4858:	4650      	mov	r0, sl
 80a485a:	f000 ff9b 	bl	80a5794 <__lshift>
 80a485e:	9004      	str	r0, [sp, #16]
 80a4860:	2800      	cmp	r0, #0
 80a4862:	f47f af6f 	bne.w	80a4744 <_strtod_r+0x70c>
 80a4866:	e62d      	b.n	80a44c4 <_strtod_r+0x48c>
 80a4868:	4632      	mov	r2, r6
 80a486a:	9902      	ldr	r1, [sp, #8]
 80a486c:	4650      	mov	r0, sl
 80a486e:	f000 ff91 	bl	80a5794 <__lshift>
 80a4872:	9002      	str	r0, [sp, #8]
 80a4874:	2800      	cmp	r0, #0
 80a4876:	f47f af68 	bne.w	80a474a <_strtod_r+0x712>
 80a487a:	e623      	b.n	80a44c4 <_strtod_r+0x48c>
 80a487c:	f8db 3010 	ldr.w	r3, [fp, #16]
 80a4880:	2b01      	cmp	r3, #1
 80a4882:	dc8e      	bgt.n	80a47a2 <_strtod_r+0x76a>
 80a4884:	e17a      	b.n	80a4b7c <_strtod_r+0xb44>
 80a4886:	d161      	bne.n	80a494c <_strtod_r+0x914>
 80a4888:	9a06      	ldr	r2, [sp, #24]
 80a488a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a488e:	b322      	cbz	r2, 80a48da <_strtod_r+0x8a2>
 80a4890:	4943      	ldr	r1, [pc, #268]	; (80a49a0 <_strtod_r+0x968>)
 80a4892:	464a      	mov	r2, r9
 80a4894:	428b      	cmp	r3, r1
 80a4896:	d12e      	bne.n	80a48f6 <_strtod_r+0x8be>
 80a4898:	9b03      	ldr	r3, [sp, #12]
 80a489a:	4641      	mov	r1, r8
 80a489c:	b163      	cbz	r3, 80a48b8 <_strtod_r+0x880>
 80a489e:	4b41      	ldr	r3, [pc, #260]	; (80a49a4 <_strtod_r+0x96c>)
 80a48a0:	4013      	ands	r3, r2
 80a48a2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a48a6:	d807      	bhi.n	80a48b8 <_strtod_r+0x880>
 80a48a8:	0d1b      	lsrs	r3, r3, #20
 80a48aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a48ae:	f04f 30ff 	mov.w	r0, #4294967295
 80a48b2:	fa00 f303 	lsl.w	r3, r0, r3
 80a48b6:	e001      	b.n	80a48bc <_strtod_r+0x884>
 80a48b8:	f04f 33ff 	mov.w	r3, #4294967295
 80a48bc:	428b      	cmp	r3, r1
 80a48be:	d11a      	bne.n	80a48f6 <_strtod_r+0x8be>
 80a48c0:	4939      	ldr	r1, [pc, #228]	; (80a49a8 <_strtod_r+0x970>)
 80a48c2:	428a      	cmp	r2, r1
 80a48c4:	d102      	bne.n	80a48cc <_strtod_r+0x894>
 80a48c6:	3301      	adds	r3, #1
 80a48c8:	f43f adfc 	beq.w	80a44c4 <_strtod_r+0x48c>
 80a48cc:	4b35      	ldr	r3, [pc, #212]	; (80a49a4 <_strtod_r+0x96c>)
 80a48ce:	f04f 0800 	mov.w	r8, #0
 80a48d2:	4013      	ands	r3, r2
 80a48d4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80a48d8:	e150      	b.n	80a4b7c <_strtod_r+0xb44>
 80a48da:	b963      	cbnz	r3, 80a48f6 <_strtod_r+0x8be>
 80a48dc:	f1b8 0f00 	cmp.w	r8, #0
 80a48e0:	d109      	bne.n	80a48f6 <_strtod_r+0x8be>
 80a48e2:	e76a      	b.n	80a47ba <_strtod_r+0x782>
 80a48e4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80a48e8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80a48ec:	f04f 38ff 	mov.w	r8, #4294967295
 80a48f0:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80a48f4:	e142      	b.n	80a4b7c <_strtod_r+0xb44>
 80a48f6:	b115      	cbz	r5, 80a48fe <_strtod_r+0x8c6>
 80a48f8:	ea15 0f09 	tst.w	r5, r9
 80a48fc:	e002      	b.n	80a4904 <_strtod_r+0x8cc>
 80a48fe:	9b07      	ldr	r3, [sp, #28]
 80a4900:	ea13 0f08 	tst.w	r3, r8
 80a4904:	f000 813a 	beq.w	80a4b7c <_strtod_r+0xb44>
 80a4908:	9b06      	ldr	r3, [sp, #24]
 80a490a:	9a03      	ldr	r2, [sp, #12]
 80a490c:	4640      	mov	r0, r8
 80a490e:	4649      	mov	r1, r9
 80a4910:	b153      	cbz	r3, 80a4928 <_strtod_r+0x8f0>
 80a4912:	f7ff fb70 	bl	80a3ff6 <sulp>
 80a4916:	4602      	mov	r2, r0
 80a4918:	460b      	mov	r3, r1
 80a491a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a491e:	f7fe fa81 	bl	80a2e24 <__adddf3>
 80a4922:	4680      	mov	r8, r0
 80a4924:	4689      	mov	r9, r1
 80a4926:	e129      	b.n	80a4b7c <_strtod_r+0xb44>
 80a4928:	f7ff fb65 	bl	80a3ff6 <sulp>
 80a492c:	4602      	mov	r2, r0
 80a492e:	460b      	mov	r3, r1
 80a4930:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a4934:	f7fe fa74 	bl	80a2e20 <__aeabi_dsub>
 80a4938:	2200      	movs	r2, #0
 80a493a:	2300      	movs	r3, #0
 80a493c:	4680      	mov	r8, r0
 80a493e:	4689      	mov	r9, r1
 80a4940:	f7fe fe8a 	bl	80a3658 <__aeabi_dcmpeq>
 80a4944:	2800      	cmp	r0, #0
 80a4946:	f47f af48 	bne.w	80a47da <_strtod_r+0x7a2>
 80a494a:	e117      	b.n	80a4b7c <_strtod_r+0xb44>
 80a494c:	9902      	ldr	r1, [sp, #8]
 80a494e:	4658      	mov	r0, fp
 80a4950:	f001 f8ab 	bl	80a5aaa <__ratio>
 80a4954:	2200      	movs	r2, #0
 80a4956:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a495a:	4606      	mov	r6, r0
 80a495c:	460f      	mov	r7, r1
 80a495e:	f7fe fe8f 	bl	80a3680 <__aeabi_dcmple>
 80a4962:	2800      	cmp	r0, #0
 80a4964:	d03f      	beq.n	80a49e6 <_strtod_r+0x9ae>
 80a4966:	9b06      	ldr	r3, [sp, #24]
 80a4968:	b113      	cbz	r3, 80a4970 <_strtod_r+0x938>
 80a496a:	2600      	movs	r6, #0
 80a496c:	4f0f      	ldr	r7, [pc, #60]	; (80a49ac <_strtod_r+0x974>)
 80a496e:	e010      	b.n	80a4992 <_strtod_r+0x95a>
 80a4970:	f1b8 0f00 	cmp.w	r8, #0
 80a4974:	d103      	bne.n	80a497e <_strtod_r+0x946>
 80a4976:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a497a:	b93b      	cbnz	r3, 80a498c <_strtod_r+0x954>
 80a497c:	e01a      	b.n	80a49b4 <_strtod_r+0x97c>
 80a497e:	f1b8 0f01 	cmp.w	r8, #1
 80a4982:	d103      	bne.n	80a498c <_strtod_r+0x954>
 80a4984:	f1b9 0f00 	cmp.w	r9, #0
 80a4988:	f43f af27 	beq.w	80a47da <_strtod_r+0x7a2>
 80a498c:	4f08      	ldr	r7, [pc, #32]	; (80a49b0 <_strtod_r+0x978>)
 80a498e:	2600      	movs	r6, #0
 80a4990:	2400      	movs	r4, #0
 80a4992:	4d06      	ldr	r5, [pc, #24]	; (80a49ac <_strtod_r+0x974>)
 80a4994:	e03c      	b.n	80a4a10 <_strtod_r+0x9d8>
 80a4996:	bf00      	nop
 80a4998:	fffffc02 	.word	0xfffffc02
 80a499c:	fffffbe2 	.word	0xfffffbe2
 80a49a0:	000fffff 	.word	0x000fffff
 80a49a4:	7ff00000 	.word	0x7ff00000
 80a49a8:	7fefffff 	.word	0x7fefffff
 80a49ac:	3ff00000 	.word	0x3ff00000
 80a49b0:	bff00000 	.word	0xbff00000
 80a49b4:	2200      	movs	r2, #0
 80a49b6:	4b9a      	ldr	r3, [pc, #616]	; (80a4c20 <_strtod_r+0xbe8>)
 80a49b8:	4630      	mov	r0, r6
 80a49ba:	4639      	mov	r1, r7
 80a49bc:	f7fe fe56 	bl	80a366c <__aeabi_dcmplt>
 80a49c0:	b940      	cbnz	r0, 80a49d4 <_strtod_r+0x99c>
 80a49c2:	2200      	movs	r2, #0
 80a49c4:	4b97      	ldr	r3, [pc, #604]	; (80a4c24 <_strtod_r+0xbec>)
 80a49c6:	4630      	mov	r0, r6
 80a49c8:	4639      	mov	r1, r7
 80a49ca:	f7fe fbdd 	bl	80a3188 <__aeabi_dmul>
 80a49ce:	4604      	mov	r4, r0
 80a49d0:	460d      	mov	r5, r1
 80a49d2:	e001      	b.n	80a49d8 <_strtod_r+0x9a0>
 80a49d4:	9c06      	ldr	r4, [sp, #24]
 80a49d6:	4d93      	ldr	r5, [pc, #588]	; (80a4c24 <_strtod_r+0xbec>)
 80a49d8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80a49dc:	9414      	str	r4, [sp, #80]	; 0x50
 80a49de:	9315      	str	r3, [sp, #84]	; 0x54
 80a49e0:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 80a49e4:	e014      	b.n	80a4a10 <_strtod_r+0x9d8>
 80a49e6:	4b8f      	ldr	r3, [pc, #572]	; (80a4c24 <_strtod_r+0xbec>)
 80a49e8:	2200      	movs	r2, #0
 80a49ea:	4630      	mov	r0, r6
 80a49ec:	4639      	mov	r1, r7
 80a49ee:	f7fe fbcb 	bl	80a3188 <__aeabi_dmul>
 80a49f2:	9b06      	ldr	r3, [sp, #24]
 80a49f4:	4604      	mov	r4, r0
 80a49f6:	460d      	mov	r5, r1
 80a49f8:	b923      	cbnz	r3, 80a4a04 <_strtod_r+0x9cc>
 80a49fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a49fe:	900e      	str	r0, [sp, #56]	; 0x38
 80a4a00:	930f      	str	r3, [sp, #60]	; 0x3c
 80a4a02:	e003      	b.n	80a4a0c <_strtod_r+0x9d4>
 80a4a04:	4602      	mov	r2, r0
 80a4a06:	460b      	mov	r3, r1
 80a4a08:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80a4a0c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 80a4a10:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a4a14:	0d1b      	lsrs	r3, r3, #20
 80a4a16:	051b      	lsls	r3, r3, #20
 80a4a18:	9307      	str	r3, [sp, #28]
 80a4a1a:	9a07      	ldr	r2, [sp, #28]
 80a4a1c:	4b82      	ldr	r3, [pc, #520]	; (80a4c28 <_strtod_r+0xbf0>)
 80a4a1e:	429a      	cmp	r2, r3
 80a4a20:	d12b      	bne.n	80a4a7a <_strtod_r+0xa42>
 80a4a22:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a4a26:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a4a2a:	4640      	mov	r0, r8
 80a4a2c:	4649      	mov	r1, r9
 80a4a2e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a4a32:	f000 ff7b 	bl	80a592c <__ulp>
 80a4a36:	4602      	mov	r2, r0
 80a4a38:	460b      	mov	r3, r1
 80a4a3a:	4630      	mov	r0, r6
 80a4a3c:	4639      	mov	r1, r7
 80a4a3e:	f7fe fba3 	bl	80a3188 <__aeabi_dmul>
 80a4a42:	4642      	mov	r2, r8
 80a4a44:	464b      	mov	r3, r9
 80a4a46:	f7fe f9ed 	bl	80a2e24 <__adddf3>
 80a4a4a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a4a4e:	0d1b      	lsrs	r3, r3, #20
 80a4a50:	4a76      	ldr	r2, [pc, #472]	; (80a4c2c <_strtod_r+0xbf4>)
 80a4a52:	051b      	lsls	r3, r3, #20
 80a4a54:	4293      	cmp	r3, r2
 80a4a56:	4680      	mov	r8, r0
 80a4a58:	d90c      	bls.n	80a4a74 <_strtod_r+0xa3c>
 80a4a5a:	4b75      	ldr	r3, [pc, #468]	; (80a4c30 <_strtod_r+0xbf8>)
 80a4a5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a4a5e:	429a      	cmp	r2, r3
 80a4a60:	d103      	bne.n	80a4a6a <_strtod_r+0xa32>
 80a4a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a4a64:	3301      	adds	r3, #1
 80a4a66:	f43f ad2d 	beq.w	80a44c4 <_strtod_r+0x48c>
 80a4a6a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80a4c30 <_strtod_r+0xbf8>
 80a4a6e:	f04f 38ff 	mov.w	r8, #4294967295
 80a4a72:	e072      	b.n	80a4b5a <_strtod_r+0xb22>
 80a4a74:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80a4a78:	e039      	b.n	80a4aee <_strtod_r+0xab6>
 80a4a7a:	9b03      	ldr	r3, [sp, #12]
 80a4a7c:	b33b      	cbz	r3, 80a4ace <_strtod_r+0xa96>
 80a4a7e:	9b07      	ldr	r3, [sp, #28]
 80a4a80:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a4a84:	d823      	bhi.n	80a4ace <_strtod_r+0xa96>
 80a4a86:	a35e      	add	r3, pc, #376	; (adr r3, 80a4c00 <_strtod_r+0xbc8>)
 80a4a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4a8c:	4620      	mov	r0, r4
 80a4a8e:	4629      	mov	r1, r5
 80a4a90:	f7fe fdf6 	bl	80a3680 <__aeabi_dcmple>
 80a4a94:	b1b8      	cbz	r0, 80a4ac6 <_strtod_r+0xa8e>
 80a4a96:	4629      	mov	r1, r5
 80a4a98:	4620      	mov	r0, r4
 80a4a9a:	f7fe fe4d 	bl	80a3738 <__aeabi_d2uiz>
 80a4a9e:	2800      	cmp	r0, #0
 80a4aa0:	bf08      	it	eq
 80a4aa2:	2001      	moveq	r0, #1
 80a4aa4:	f7fe fafa 	bl	80a309c <__aeabi_ui2d>
 80a4aa8:	9b06      	ldr	r3, [sp, #24]
 80a4aaa:	4604      	mov	r4, r0
 80a4aac:	460d      	mov	r5, r1
 80a4aae:	b923      	cbnz	r3, 80a4aba <_strtod_r+0xa82>
 80a4ab0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a4ab4:	9010      	str	r0, [sp, #64]	; 0x40
 80a4ab6:	9311      	str	r3, [sp, #68]	; 0x44
 80a4ab8:	e003      	b.n	80a4ac2 <_strtod_r+0xa8a>
 80a4aba:	4602      	mov	r2, r0
 80a4abc:	460b      	mov	r3, r1
 80a4abe:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80a4ac2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80a4ac6:	9a07      	ldr	r2, [sp, #28]
 80a4ac8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80a4acc:	1a9f      	subs	r7, r3, r2
 80a4ace:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a4ad2:	f000 ff2b 	bl	80a592c <__ulp>
 80a4ad6:	4602      	mov	r2, r0
 80a4ad8:	460b      	mov	r3, r1
 80a4ada:	4630      	mov	r0, r6
 80a4adc:	4639      	mov	r1, r7
 80a4ade:	f7fe fb53 	bl	80a3188 <__aeabi_dmul>
 80a4ae2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a4ae6:	f7fe f99d 	bl	80a2e24 <__adddf3>
 80a4aea:	4680      	mov	r8, r0
 80a4aec:	4689      	mov	r9, r1
 80a4aee:	9b03      	ldr	r3, [sp, #12]
 80a4af0:	bb9b      	cbnz	r3, 80a4b5a <_strtod_r+0xb22>
 80a4af2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a4af6:	0d1b      	lsrs	r3, r3, #20
 80a4af8:	9a07      	ldr	r2, [sp, #28]
 80a4afa:	051b      	lsls	r3, r3, #20
 80a4afc:	429a      	cmp	r2, r3
 80a4afe:	464e      	mov	r6, r9
 80a4b00:	d12b      	bne.n	80a4b5a <_strtod_r+0xb22>
 80a4b02:	4629      	mov	r1, r5
 80a4b04:	4620      	mov	r0, r4
 80a4b06:	f7fe fdef 	bl	80a36e8 <__aeabi_d2iz>
 80a4b0a:	f7fe fad7 	bl	80a30bc <__aeabi_i2d>
 80a4b0e:	460b      	mov	r3, r1
 80a4b10:	4602      	mov	r2, r0
 80a4b12:	4629      	mov	r1, r5
 80a4b14:	4620      	mov	r0, r4
 80a4b16:	f7fe f983 	bl	80a2e20 <__aeabi_dsub>
 80a4b1a:	9b06      	ldr	r3, [sp, #24]
 80a4b1c:	4604      	mov	r4, r0
 80a4b1e:	460d      	mov	r5, r1
 80a4b20:	b92b      	cbnz	r3, 80a4b2e <_strtod_r+0xaf6>
 80a4b22:	f1b8 0f00 	cmp.w	r8, #0
 80a4b26:	d102      	bne.n	80a4b2e <_strtod_r+0xaf6>
 80a4b28:	f3c9 0613 	ubfx	r6, r9, #0, #20
 80a4b2c:	b17e      	cbz	r6, 80a4b4e <_strtod_r+0xb16>
 80a4b2e:	a336      	add	r3, pc, #216	; (adr r3, 80a4c08 <_strtod_r+0xbd0>)
 80a4b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b34:	4620      	mov	r0, r4
 80a4b36:	4629      	mov	r1, r5
 80a4b38:	f7fe fd98 	bl	80a366c <__aeabi_dcmplt>
 80a4b3c:	bb88      	cbnz	r0, 80a4ba2 <_strtod_r+0xb6a>
 80a4b3e:	a334      	add	r3, pc, #208	; (adr r3, 80a4c10 <_strtod_r+0xbd8>)
 80a4b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b44:	4620      	mov	r0, r4
 80a4b46:	4629      	mov	r1, r5
 80a4b48:	f7fe fdae 	bl	80a36a8 <__aeabi_dcmpgt>
 80a4b4c:	e004      	b.n	80a4b58 <_strtod_r+0xb20>
 80a4b4e:	a332      	add	r3, pc, #200	; (adr r3, 80a4c18 <_strtod_r+0xbe0>)
 80a4b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b54:	f7fe fd8a 	bl	80a366c <__aeabi_dcmplt>
 80a4b58:	bb18      	cbnz	r0, 80a4ba2 <_strtod_r+0xb6a>
 80a4b5a:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a4b5c:	4650      	mov	r0, sl
 80a4b5e:	f000 fc55 	bl	80a540c <_Bfree>
 80a4b62:	9904      	ldr	r1, [sp, #16]
 80a4b64:	4650      	mov	r0, sl
 80a4b66:	f000 fc51 	bl	80a540c <_Bfree>
 80a4b6a:	9902      	ldr	r1, [sp, #8]
 80a4b6c:	4650      	mov	r0, sl
 80a4b6e:	f000 fc4d 	bl	80a540c <_Bfree>
 80a4b72:	4659      	mov	r1, fp
 80a4b74:	4650      	mov	r0, sl
 80a4b76:	f000 fc49 	bl	80a540c <_Bfree>
 80a4b7a:	e574      	b.n	80a4666 <_strtod_r+0x62e>
 80a4b7c:	9b03      	ldr	r3, [sp, #12]
 80a4b7e:	b183      	cbz	r3, 80a4ba2 <_strtod_r+0xb6a>
 80a4b80:	4b2c      	ldr	r3, [pc, #176]	; (80a4c34 <_strtod_r+0xbfc>)
 80a4b82:	4640      	mov	r0, r8
 80a4b84:	930b      	str	r3, [sp, #44]	; 0x2c
 80a4b86:	2300      	movs	r3, #0
 80a4b88:	930a      	str	r3, [sp, #40]	; 0x28
 80a4b8a:	4649      	mov	r1, r9
 80a4b8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a4b90:	f7fe fafa 	bl	80a3188 <__aeabi_dmul>
 80a4b94:	4680      	mov	r8, r0
 80a4b96:	4689      	mov	r9, r1
 80a4b98:	b919      	cbnz	r1, 80a4ba2 <_strtod_r+0xb6a>
 80a4b9a:	b910      	cbnz	r0, 80a4ba2 <_strtod_r+0xb6a>
 80a4b9c:	2322      	movs	r3, #34	; 0x22
 80a4b9e:	f8ca 3000 	str.w	r3, [sl]
 80a4ba2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a4ba4:	4650      	mov	r0, sl
 80a4ba6:	f000 fc31 	bl	80a540c <_Bfree>
 80a4baa:	9904      	ldr	r1, [sp, #16]
 80a4bac:	4650      	mov	r0, sl
 80a4bae:	f000 fc2d 	bl	80a540c <_Bfree>
 80a4bb2:	9902      	ldr	r1, [sp, #8]
 80a4bb4:	4650      	mov	r0, sl
 80a4bb6:	f000 fc29 	bl	80a540c <_Bfree>
 80a4bba:	9905      	ldr	r1, [sp, #20]
 80a4bbc:	4650      	mov	r0, sl
 80a4bbe:	f000 fc25 	bl	80a540c <_Bfree>
 80a4bc2:	4659      	mov	r1, fp
 80a4bc4:	4650      	mov	r0, sl
 80a4bc6:	f000 fc21 	bl	80a540c <_Bfree>
 80a4bca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a4bcc:	b113      	cbz	r3, 80a4bd4 <_strtod_r+0xb9c>
 80a4bce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a4bd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80a4bd2:	6013      	str	r3, [r2, #0]
 80a4bd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a4bd6:	b11b      	cbz	r3, 80a4be0 <_strtod_r+0xba8>
 80a4bd8:	4642      	mov	r2, r8
 80a4bda:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80a4bde:	e007      	b.n	80a4bf0 <_strtod_r+0xbb8>
 80a4be0:	4642      	mov	r2, r8
 80a4be2:	464b      	mov	r3, r9
 80a4be4:	e004      	b.n	80a4bf0 <_strtod_r+0xbb8>
 80a4be6:	2500      	movs	r5, #0
 80a4be8:	462a      	mov	r2, r5
 80a4bea:	2101      	movs	r1, #1
 80a4bec:	f7ff bb47 	b.w	80a427e <_strtod_r+0x246>
 80a4bf0:	4610      	mov	r0, r2
 80a4bf2:	4619      	mov	r1, r3
 80a4bf4:	b01d      	add	sp, #116	; 0x74
 80a4bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4bfa:	bf00      	nop
 80a4bfc:	f3af 8000 	nop.w
 80a4c00:	ffc00000 	.word	0xffc00000
 80a4c04:	41dfffff 	.word	0x41dfffff
 80a4c08:	94a03595 	.word	0x94a03595
 80a4c0c:	3fdfffff 	.word	0x3fdfffff
 80a4c10:	35afe535 	.word	0x35afe535
 80a4c14:	3fe00000 	.word	0x3fe00000
 80a4c18:	94a03595 	.word	0x94a03595
 80a4c1c:	3fcfffff 	.word	0x3fcfffff
 80a4c20:	3ff00000 	.word	0x3ff00000
 80a4c24:	3fe00000 	.word	0x3fe00000
 80a4c28:	7fe00000 	.word	0x7fe00000
 80a4c2c:	7c9fffff 	.word	0x7c9fffff
 80a4c30:	7fefffff 	.word	0x7fefffff
 80a4c34:	39500000 	.word	0x39500000

080a4c38 <strtod>:
 80a4c38:	4b02      	ldr	r3, [pc, #8]	; (80a4c44 <strtod+0xc>)
 80a4c3a:	460a      	mov	r2, r1
 80a4c3c:	4601      	mov	r1, r0
 80a4c3e:	6818      	ldr	r0, [r3, #0]
 80a4c40:	f7ff b9fa 	b.w	80a4038 <_strtod_r>
 80a4c44:	2000007c 	.word	0x2000007c

080a4c48 <_strtol_r>:
 80a4c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4c4c:	460f      	mov	r7, r1
 80a4c4e:	4680      	mov	r8, r0
 80a4c50:	483f      	ldr	r0, [pc, #252]	; (80a4d50 <_strtol_r+0x108>)
 80a4c52:	f8d0 9000 	ldr.w	r9, [r0]
 80a4c56:	463d      	mov	r5, r7
 80a4c58:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a4c5c:	eb09 0004 	add.w	r0, r9, r4
 80a4c60:	7840      	ldrb	r0, [r0, #1]
 80a4c62:	f000 0008 	and.w	r0, r0, #8
 80a4c66:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a4c6a:	b108      	cbz	r0, 80a4c70 <_strtol_r+0x28>
 80a4c6c:	462f      	mov	r7, r5
 80a4c6e:	e7f2      	b.n	80a4c56 <_strtol_r+0xe>
 80a4c70:	2c2d      	cmp	r4, #45	; 0x2d
 80a4c72:	d103      	bne.n	80a4c7c <_strtol_r+0x34>
 80a4c74:	1cbd      	adds	r5, r7, #2
 80a4c76:	787c      	ldrb	r4, [r7, #1]
 80a4c78:	2601      	movs	r6, #1
 80a4c7a:	e003      	b.n	80a4c84 <_strtol_r+0x3c>
 80a4c7c:	2c2b      	cmp	r4, #43	; 0x2b
 80a4c7e:	bf04      	itt	eq
 80a4c80:	787c      	ldrbeq	r4, [r7, #1]
 80a4c82:	1cbd      	addeq	r5, r7, #2
 80a4c84:	b113      	cbz	r3, 80a4c8c <_strtol_r+0x44>
 80a4c86:	2b10      	cmp	r3, #16
 80a4c88:	d10a      	bne.n	80a4ca0 <_strtol_r+0x58>
 80a4c8a:	e05b      	b.n	80a4d44 <_strtol_r+0xfc>
 80a4c8c:	2c30      	cmp	r4, #48	; 0x30
 80a4c8e:	d157      	bne.n	80a4d40 <_strtol_r+0xf8>
 80a4c90:	7828      	ldrb	r0, [r5, #0]
 80a4c92:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a4c96:	2858      	cmp	r0, #88	; 0x58
 80a4c98:	d14d      	bne.n	80a4d36 <_strtol_r+0xee>
 80a4c9a:	786c      	ldrb	r4, [r5, #1]
 80a4c9c:	2310      	movs	r3, #16
 80a4c9e:	3502      	adds	r5, #2
 80a4ca0:	2e00      	cmp	r6, #0
 80a4ca2:	bf14      	ite	ne
 80a4ca4:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a4ca8:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a4cac:	fbbc faf3 	udiv	sl, ip, r3
 80a4cb0:	2700      	movs	r7, #0
 80a4cb2:	4638      	mov	r0, r7
 80a4cb4:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a4cb8:	eb09 0e04 	add.w	lr, r9, r4
 80a4cbc:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a4cc0:	f01e 0f04 	tst.w	lr, #4
 80a4cc4:	d001      	beq.n	80a4cca <_strtol_r+0x82>
 80a4cc6:	3c30      	subs	r4, #48	; 0x30
 80a4cc8:	e00b      	b.n	80a4ce2 <_strtol_r+0x9a>
 80a4cca:	f01e 0e03 	ands.w	lr, lr, #3
 80a4cce:	d01b      	beq.n	80a4d08 <_strtol_r+0xc0>
 80a4cd0:	f1be 0f01 	cmp.w	lr, #1
 80a4cd4:	bf0c      	ite	eq
 80a4cd6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a4cda:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a4cde:	ebce 0404 	rsb	r4, lr, r4
 80a4ce2:	42a3      	cmp	r3, r4
 80a4ce4:	dd10      	ble.n	80a4d08 <_strtol_r+0xc0>
 80a4ce6:	f1b7 3fff 	cmp.w	r7, #4294967295
 80a4cea:	d00a      	beq.n	80a4d02 <_strtol_r+0xba>
 80a4cec:	4550      	cmp	r0, sl
 80a4cee:	d806      	bhi.n	80a4cfe <_strtol_r+0xb6>
 80a4cf0:	d101      	bne.n	80a4cf6 <_strtol_r+0xae>
 80a4cf2:	4564      	cmp	r4, ip
 80a4cf4:	dc03      	bgt.n	80a4cfe <_strtol_r+0xb6>
 80a4cf6:	fb03 4000 	mla	r0, r3, r0, r4
 80a4cfa:	2701      	movs	r7, #1
 80a4cfc:	e001      	b.n	80a4d02 <_strtol_r+0xba>
 80a4cfe:	f04f 37ff 	mov.w	r7, #4294967295
 80a4d02:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a4d06:	e7d7      	b.n	80a4cb8 <_strtol_r+0x70>
 80a4d08:	1c7b      	adds	r3, r7, #1
 80a4d0a:	d10c      	bne.n	80a4d26 <_strtol_r+0xde>
 80a4d0c:	2e00      	cmp	r6, #0
 80a4d0e:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a4d12:	bf14      	ite	ne
 80a4d14:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a4d18:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a4d1c:	f8c8 3000 	str.w	r3, [r8]
 80a4d20:	b92a      	cbnz	r2, 80a4d2e <_strtol_r+0xe6>
 80a4d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4d26:	b106      	cbz	r6, 80a4d2a <_strtol_r+0xe2>
 80a4d28:	4240      	negs	r0, r0
 80a4d2a:	b172      	cbz	r2, 80a4d4a <_strtol_r+0x102>
 80a4d2c:	b107      	cbz	r7, 80a4d30 <_strtol_r+0xe8>
 80a4d2e:	1e69      	subs	r1, r5, #1
 80a4d30:	6011      	str	r1, [r2, #0]
 80a4d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4d36:	2430      	movs	r4, #48	; 0x30
 80a4d38:	2b00      	cmp	r3, #0
 80a4d3a:	d1b1      	bne.n	80a4ca0 <_strtol_r+0x58>
 80a4d3c:	2308      	movs	r3, #8
 80a4d3e:	e7af      	b.n	80a4ca0 <_strtol_r+0x58>
 80a4d40:	230a      	movs	r3, #10
 80a4d42:	e7ad      	b.n	80a4ca0 <_strtol_r+0x58>
 80a4d44:	2c30      	cmp	r4, #48	; 0x30
 80a4d46:	d0a3      	beq.n	80a4c90 <_strtol_r+0x48>
 80a4d48:	e7aa      	b.n	80a4ca0 <_strtol_r+0x58>
 80a4d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4d4e:	bf00      	nop
 80a4d50:	20000018 	.word	0x20000018

080a4d54 <strtol>:
 80a4d54:	4613      	mov	r3, r2
 80a4d56:	460a      	mov	r2, r1
 80a4d58:	4601      	mov	r1, r0
 80a4d5a:	4802      	ldr	r0, [pc, #8]	; (80a4d64 <strtol+0x10>)
 80a4d5c:	6800      	ldr	r0, [r0, #0]
 80a4d5e:	f7ff bf73 	b.w	80a4c48 <_strtol_r>
 80a4d62:	bf00      	nop
 80a4d64:	2000007c 	.word	0x2000007c

080a4d68 <rshift>:
 80a4d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4d6a:	6906      	ldr	r6, [r0, #16]
 80a4d6c:	114b      	asrs	r3, r1, #5
 80a4d6e:	42b3      	cmp	r3, r6
 80a4d70:	f100 0514 	add.w	r5, r0, #20
 80a4d74:	da27      	bge.n	80a4dc6 <rshift+0x5e>
 80a4d76:	f011 011f 	ands.w	r1, r1, #31
 80a4d7a:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80a4d7e:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80a4d82:	d101      	bne.n	80a4d88 <rshift+0x20>
 80a4d84:	4629      	mov	r1, r5
 80a4d86:	e016      	b.n	80a4db6 <rshift+0x4e>
 80a4d88:	1d14      	adds	r4, r2, #4
 80a4d8a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80a4d8e:	462b      	mov	r3, r5
 80a4d90:	f1c1 0e20 	rsb	lr, r1, #32
 80a4d94:	40ca      	lsrs	r2, r1
 80a4d96:	42b4      	cmp	r4, r6
 80a4d98:	d209      	bcs.n	80a4dae <rshift+0x46>
 80a4d9a:	6827      	ldr	r7, [r4, #0]
 80a4d9c:	fa07 f70e 	lsl.w	r7, r7, lr
 80a4da0:	433a      	orrs	r2, r7
 80a4da2:	f843 2b04 	str.w	r2, [r3], #4
 80a4da6:	f854 2b04 	ldr.w	r2, [r4], #4
 80a4daa:	40ca      	lsrs	r2, r1
 80a4dac:	e7f3      	b.n	80a4d96 <rshift+0x2e>
 80a4dae:	601a      	str	r2, [r3, #0]
 80a4db0:	b152      	cbz	r2, 80a4dc8 <rshift+0x60>
 80a4db2:	3304      	adds	r3, #4
 80a4db4:	e008      	b.n	80a4dc8 <rshift+0x60>
 80a4db6:	42b2      	cmp	r2, r6
 80a4db8:	460b      	mov	r3, r1
 80a4dba:	d205      	bcs.n	80a4dc8 <rshift+0x60>
 80a4dbc:	f852 3b04 	ldr.w	r3, [r2], #4
 80a4dc0:	f841 3b04 	str.w	r3, [r1], #4
 80a4dc4:	e7f7      	b.n	80a4db6 <rshift+0x4e>
 80a4dc6:	462b      	mov	r3, r5
 80a4dc8:	1b5b      	subs	r3, r3, r5
 80a4dca:	109b      	asrs	r3, r3, #2
 80a4dcc:	6103      	str	r3, [r0, #16]
 80a4dce:	b903      	cbnz	r3, 80a4dd2 <rshift+0x6a>
 80a4dd0:	6143      	str	r3, [r0, #20]
 80a4dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a4dd4 <__hexdig_fun>:
 80a4dd4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a4dd8:	2b09      	cmp	r3, #9
 80a4dda:	d801      	bhi.n	80a4de0 <__hexdig_fun+0xc>
 80a4ddc:	3820      	subs	r0, #32
 80a4dde:	e00a      	b.n	80a4df6 <__hexdig_fun+0x22>
 80a4de0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80a4de4:	2b05      	cmp	r3, #5
 80a4de6:	d801      	bhi.n	80a4dec <__hexdig_fun+0x18>
 80a4de8:	3847      	subs	r0, #71	; 0x47
 80a4dea:	e004      	b.n	80a4df6 <__hexdig_fun+0x22>
 80a4dec:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80a4df0:	2b05      	cmp	r3, #5
 80a4df2:	d802      	bhi.n	80a4dfa <__hexdig_fun+0x26>
 80a4df4:	3827      	subs	r0, #39	; 0x27
 80a4df6:	b2c0      	uxtb	r0, r0
 80a4df8:	4770      	bx	lr
 80a4dfa:	2000      	movs	r0, #0
 80a4dfc:	4770      	bx	lr

080a4dfe <__gethex>:
 80a4dfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4e02:	b08b      	sub	sp, #44	; 0x2c
 80a4e04:	468a      	mov	sl, r1
 80a4e06:	4690      	mov	r8, r2
 80a4e08:	9306      	str	r3, [sp, #24]
 80a4e0a:	9002      	str	r0, [sp, #8]
 80a4e0c:	f7ff f838 	bl	80a3e80 <_localeconv_r>
 80a4e10:	6803      	ldr	r3, [r0, #0]
 80a4e12:	f04f 0b00 	mov.w	fp, #0
 80a4e16:	4618      	mov	r0, r3
 80a4e18:	9303      	str	r3, [sp, #12]
 80a4e1a:	f7ff f8a2 	bl	80a3f62 <strlen>
 80a4e1e:	9b03      	ldr	r3, [sp, #12]
 80a4e20:	9001      	str	r0, [sp, #4]
 80a4e22:	4403      	add	r3, r0
 80a4e24:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80a4e28:	9307      	str	r3, [sp, #28]
 80a4e2a:	f8da 3000 	ldr.w	r3, [sl]
 80a4e2e:	3302      	adds	r3, #2
 80a4e30:	461f      	mov	r7, r3
 80a4e32:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a4e36:	2830      	cmp	r0, #48	; 0x30
 80a4e38:	d102      	bne.n	80a4e40 <__gethex+0x42>
 80a4e3a:	f10b 0b01 	add.w	fp, fp, #1
 80a4e3e:	e7f7      	b.n	80a4e30 <__gethex+0x32>
 80a4e40:	f7ff ffc8 	bl	80a4dd4 <__hexdig_fun>
 80a4e44:	4604      	mov	r4, r0
 80a4e46:	b9e0      	cbnz	r0, 80a4e82 <__gethex+0x84>
 80a4e48:	9a01      	ldr	r2, [sp, #4]
 80a4e4a:	9903      	ldr	r1, [sp, #12]
 80a4e4c:	4638      	mov	r0, r7
 80a4e4e:	f7ff f890 	bl	80a3f72 <strncmp>
 80a4e52:	2800      	cmp	r0, #0
 80a4e54:	d134      	bne.n	80a4ec0 <__gethex+0xc2>
 80a4e56:	9b01      	ldr	r3, [sp, #4]
 80a4e58:	5cf8      	ldrb	r0, [r7, r3]
 80a4e5a:	18fe      	adds	r6, r7, r3
 80a4e5c:	f7ff ffba 	bl	80a4dd4 <__hexdig_fun>
 80a4e60:	b380      	cbz	r0, 80a4ec4 <__gethex+0xc6>
 80a4e62:	4633      	mov	r3, r6
 80a4e64:	7818      	ldrb	r0, [r3, #0]
 80a4e66:	461f      	mov	r7, r3
 80a4e68:	2830      	cmp	r0, #48	; 0x30
 80a4e6a:	f103 0301 	add.w	r3, r3, #1
 80a4e6e:	d0f9      	beq.n	80a4e64 <__gethex+0x66>
 80a4e70:	f7ff ffb0 	bl	80a4dd4 <__hexdig_fun>
 80a4e74:	fab0 f580 	clz	r5, r0
 80a4e78:	4634      	mov	r4, r6
 80a4e7a:	096d      	lsrs	r5, r5, #5
 80a4e7c:	f04f 0b01 	mov.w	fp, #1
 80a4e80:	e001      	b.n	80a4e86 <__gethex+0x88>
 80a4e82:	2500      	movs	r5, #0
 80a4e84:	462c      	mov	r4, r5
 80a4e86:	463a      	mov	r2, r7
 80a4e88:	4616      	mov	r6, r2
 80a4e8a:	7830      	ldrb	r0, [r6, #0]
 80a4e8c:	3201      	adds	r2, #1
 80a4e8e:	f7ff ffa1 	bl	80a4dd4 <__hexdig_fun>
 80a4e92:	2800      	cmp	r0, #0
 80a4e94:	d1f8      	bne.n	80a4e88 <__gethex+0x8a>
 80a4e96:	9a01      	ldr	r2, [sp, #4]
 80a4e98:	9903      	ldr	r1, [sp, #12]
 80a4e9a:	4630      	mov	r0, r6
 80a4e9c:	f7ff f869 	bl	80a3f72 <strncmp>
 80a4ea0:	b950      	cbnz	r0, 80a4eb8 <__gethex+0xba>
 80a4ea2:	b954      	cbnz	r4, 80a4eba <__gethex+0xbc>
 80a4ea4:	9b01      	ldr	r3, [sp, #4]
 80a4ea6:	18f4      	adds	r4, r6, r3
 80a4ea8:	4622      	mov	r2, r4
 80a4eaa:	4616      	mov	r6, r2
 80a4eac:	7830      	ldrb	r0, [r6, #0]
 80a4eae:	3201      	adds	r2, #1
 80a4eb0:	f7ff ff90 	bl	80a4dd4 <__hexdig_fun>
 80a4eb4:	2800      	cmp	r0, #0
 80a4eb6:	d1f8      	bne.n	80a4eaa <__gethex+0xac>
 80a4eb8:	b134      	cbz	r4, 80a4ec8 <__gethex+0xca>
 80a4eba:	1ba4      	subs	r4, r4, r6
 80a4ebc:	00a4      	lsls	r4, r4, #2
 80a4ebe:	e003      	b.n	80a4ec8 <__gethex+0xca>
 80a4ec0:	463e      	mov	r6, r7
 80a4ec2:	e000      	b.n	80a4ec6 <__gethex+0xc8>
 80a4ec4:	4604      	mov	r4, r0
 80a4ec6:	2501      	movs	r5, #1
 80a4ec8:	7833      	ldrb	r3, [r6, #0]
 80a4eca:	2b50      	cmp	r3, #80	; 0x50
 80a4ecc:	d001      	beq.n	80a4ed2 <__gethex+0xd4>
 80a4ece:	2b70      	cmp	r3, #112	; 0x70
 80a4ed0:	d12a      	bne.n	80a4f28 <__gethex+0x12a>
 80a4ed2:	7873      	ldrb	r3, [r6, #1]
 80a4ed4:	2b2b      	cmp	r3, #43	; 0x2b
 80a4ed6:	d008      	beq.n	80a4eea <__gethex+0xec>
 80a4ed8:	2b2d      	cmp	r3, #45	; 0x2d
 80a4eda:	d003      	beq.n	80a4ee4 <__gethex+0xe6>
 80a4edc:	1c71      	adds	r1, r6, #1
 80a4ede:	f04f 0900 	mov.w	r9, #0
 80a4ee2:	e005      	b.n	80a4ef0 <__gethex+0xf2>
 80a4ee4:	f04f 0901 	mov.w	r9, #1
 80a4ee8:	e001      	b.n	80a4eee <__gethex+0xf0>
 80a4eea:	f04f 0900 	mov.w	r9, #0
 80a4eee:	1cb1      	adds	r1, r6, #2
 80a4ef0:	7808      	ldrb	r0, [r1, #0]
 80a4ef2:	f7ff ff6f 	bl	80a4dd4 <__hexdig_fun>
 80a4ef6:	1e43      	subs	r3, r0, #1
 80a4ef8:	b2db      	uxtb	r3, r3
 80a4efa:	2b18      	cmp	r3, #24
 80a4efc:	d814      	bhi.n	80a4f28 <__gethex+0x12a>
 80a4efe:	f1a0 0210 	sub.w	r2, r0, #16
 80a4f02:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80a4f06:	f7ff ff65 	bl	80a4dd4 <__hexdig_fun>
 80a4f0a:	1e43      	subs	r3, r0, #1
 80a4f0c:	b2db      	uxtb	r3, r3
 80a4f0e:	2b18      	cmp	r3, #24
 80a4f10:	d804      	bhi.n	80a4f1c <__gethex+0x11e>
 80a4f12:	230a      	movs	r3, #10
 80a4f14:	fb03 0202 	mla	r2, r3, r2, r0
 80a4f18:	3a10      	subs	r2, #16
 80a4f1a:	e7f2      	b.n	80a4f02 <__gethex+0x104>
 80a4f1c:	f1b9 0f00 	cmp.w	r9, #0
 80a4f20:	d000      	beq.n	80a4f24 <__gethex+0x126>
 80a4f22:	4252      	negs	r2, r2
 80a4f24:	4414      	add	r4, r2
 80a4f26:	e000      	b.n	80a4f2a <__gethex+0x12c>
 80a4f28:	4631      	mov	r1, r6
 80a4f2a:	f8ca 1000 	str.w	r1, [sl]
 80a4f2e:	b12d      	cbz	r5, 80a4f3c <__gethex+0x13e>
 80a4f30:	f1bb 0f00 	cmp.w	fp, #0
 80a4f34:	bf14      	ite	ne
 80a4f36:	2000      	movne	r0, #0
 80a4f38:	2006      	moveq	r0, #6
 80a4f3a:	e17c      	b.n	80a5236 <__gethex+0x438>
 80a4f3c:	4629      	mov	r1, r5
 80a4f3e:	1bf3      	subs	r3, r6, r7
 80a4f40:	3b01      	subs	r3, #1
 80a4f42:	2b07      	cmp	r3, #7
 80a4f44:	dd02      	ble.n	80a4f4c <__gethex+0x14e>
 80a4f46:	3101      	adds	r1, #1
 80a4f48:	105b      	asrs	r3, r3, #1
 80a4f4a:	e7fa      	b.n	80a4f42 <__gethex+0x144>
 80a4f4c:	9802      	ldr	r0, [sp, #8]
 80a4f4e:	f000 fa28 	bl	80a53a2 <_Balloc>
 80a4f52:	f04f 0900 	mov.w	r9, #0
 80a4f56:	4605      	mov	r5, r0
 80a4f58:	46cb      	mov	fp, r9
 80a4f5a:	9b01      	ldr	r3, [sp, #4]
 80a4f5c:	f100 0a14 	add.w	sl, r0, #20
 80a4f60:	f1c3 0301 	rsb	r3, r3, #1
 80a4f64:	f8cd a010 	str.w	sl, [sp, #16]
 80a4f68:	9308      	str	r3, [sp, #32]
 80a4f6a:	42b7      	cmp	r7, r6
 80a4f6c:	d22f      	bcs.n	80a4fce <__gethex+0x1d0>
 80a4f6e:	1e73      	subs	r3, r6, #1
 80a4f70:	9305      	str	r3, [sp, #20]
 80a4f72:	9a07      	ldr	r2, [sp, #28]
 80a4f74:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80a4f78:	4293      	cmp	r3, r2
 80a4f7a:	d00b      	beq.n	80a4f94 <__gethex+0x196>
 80a4f7c:	f1bb 0f20 	cmp.w	fp, #32
 80a4f80:	d116      	bne.n	80a4fb0 <__gethex+0x1b2>
 80a4f82:	9b04      	ldr	r3, [sp, #16]
 80a4f84:	f8c3 9000 	str.w	r9, [r3]
 80a4f88:	3304      	adds	r3, #4
 80a4f8a:	f04f 0900 	mov.w	r9, #0
 80a4f8e:	9304      	str	r3, [sp, #16]
 80a4f90:	46cb      	mov	fp, r9
 80a4f92:	e00d      	b.n	80a4fb0 <__gethex+0x1b2>
 80a4f94:	9b05      	ldr	r3, [sp, #20]
 80a4f96:	9a08      	ldr	r2, [sp, #32]
 80a4f98:	4413      	add	r3, r2
 80a4f9a:	429f      	cmp	r7, r3
 80a4f9c:	d8ee      	bhi.n	80a4f7c <__gethex+0x17e>
 80a4f9e:	4618      	mov	r0, r3
 80a4fa0:	9a01      	ldr	r2, [sp, #4]
 80a4fa2:	9903      	ldr	r1, [sp, #12]
 80a4fa4:	9309      	str	r3, [sp, #36]	; 0x24
 80a4fa6:	f7fe ffe4 	bl	80a3f72 <strncmp>
 80a4faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a4fac:	b168      	cbz	r0, 80a4fca <__gethex+0x1cc>
 80a4fae:	e7e5      	b.n	80a4f7c <__gethex+0x17e>
 80a4fb0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80a4fb4:	f7ff ff0e 	bl	80a4dd4 <__hexdig_fun>
 80a4fb8:	f000 000f 	and.w	r0, r0, #15
 80a4fbc:	fa00 f00b 	lsl.w	r0, r0, fp
 80a4fc0:	9b05      	ldr	r3, [sp, #20]
 80a4fc2:	ea49 0900 	orr.w	r9, r9, r0
 80a4fc6:	f10b 0b04 	add.w	fp, fp, #4
 80a4fca:	461e      	mov	r6, r3
 80a4fcc:	e7cd      	b.n	80a4f6a <__gethex+0x16c>
 80a4fce:	9804      	ldr	r0, [sp, #16]
 80a4fd0:	f840 9b04 	str.w	r9, [r0], #4
 80a4fd4:	ebca 0000 	rsb	r0, sl, r0
 80a4fd8:	1080      	asrs	r0, r0, #2
 80a4fda:	6128      	str	r0, [r5, #16]
 80a4fdc:	0147      	lsls	r7, r0, #5
 80a4fde:	4648      	mov	r0, r9
 80a4fe0:	f000 faa4 	bl	80a552c <__hi0bits>
 80a4fe4:	f8d8 6000 	ldr.w	r6, [r8]
 80a4fe8:	1a38      	subs	r0, r7, r0
 80a4fea:	42b0      	cmp	r0, r6
 80a4fec:	dd26      	ble.n	80a503c <__gethex+0x23e>
 80a4fee:	1b87      	subs	r7, r0, r6
 80a4ff0:	4639      	mov	r1, r7
 80a4ff2:	4628      	mov	r0, r5
 80a4ff4:	f000 fd9b 	bl	80a5b2e <__any_on>
 80a4ff8:	b1c8      	cbz	r0, 80a502e <__gethex+0x230>
 80a4ffa:	1e7b      	subs	r3, r7, #1
 80a4ffc:	1159      	asrs	r1, r3, #5
 80a4ffe:	f003 021f 	and.w	r2, r3, #31
 80a5002:	f04f 0901 	mov.w	r9, #1
 80a5006:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80a500a:	fa09 f202 	lsl.w	r2, r9, r2
 80a500e:	420a      	tst	r2, r1
 80a5010:	d00e      	beq.n	80a5030 <__gethex+0x232>
 80a5012:	454b      	cmp	r3, r9
 80a5014:	dc02      	bgt.n	80a501c <__gethex+0x21e>
 80a5016:	f04f 0902 	mov.w	r9, #2
 80a501a:	e009      	b.n	80a5030 <__gethex+0x232>
 80a501c:	1eb9      	subs	r1, r7, #2
 80a501e:	4628      	mov	r0, r5
 80a5020:	f000 fd85 	bl	80a5b2e <__any_on>
 80a5024:	2800      	cmp	r0, #0
 80a5026:	d0f6      	beq.n	80a5016 <__gethex+0x218>
 80a5028:	f04f 0903 	mov.w	r9, #3
 80a502c:	e000      	b.n	80a5030 <__gethex+0x232>
 80a502e:	4681      	mov	r9, r0
 80a5030:	4639      	mov	r1, r7
 80a5032:	4628      	mov	r0, r5
 80a5034:	f7ff fe98 	bl	80a4d68 <rshift>
 80a5038:	443c      	add	r4, r7
 80a503a:	e00c      	b.n	80a5056 <__gethex+0x258>
 80a503c:	da09      	bge.n	80a5052 <__gethex+0x254>
 80a503e:	1a37      	subs	r7, r6, r0
 80a5040:	4629      	mov	r1, r5
 80a5042:	463a      	mov	r2, r7
 80a5044:	9802      	ldr	r0, [sp, #8]
 80a5046:	f000 fba5 	bl	80a5794 <__lshift>
 80a504a:	4605      	mov	r5, r0
 80a504c:	1be4      	subs	r4, r4, r7
 80a504e:	f100 0a14 	add.w	sl, r0, #20
 80a5052:	f04f 0900 	mov.w	r9, #0
 80a5056:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a505a:	429c      	cmp	r4, r3
 80a505c:	dd08      	ble.n	80a5070 <__gethex+0x272>
 80a505e:	9802      	ldr	r0, [sp, #8]
 80a5060:	4629      	mov	r1, r5
 80a5062:	f000 f9d3 	bl	80a540c <_Bfree>
 80a5066:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a5068:	2300      	movs	r3, #0
 80a506a:	6013      	str	r3, [r2, #0]
 80a506c:	20a3      	movs	r0, #163	; 0xa3
 80a506e:	e0e2      	b.n	80a5236 <__gethex+0x438>
 80a5070:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80a5074:	4284      	cmp	r4, r0
 80a5076:	da53      	bge.n	80a5120 <__gethex+0x322>
 80a5078:	1b04      	subs	r4, r0, r4
 80a507a:	42a6      	cmp	r6, r4
 80a507c:	dc2e      	bgt.n	80a50dc <__gethex+0x2de>
 80a507e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a5082:	2b02      	cmp	r3, #2
 80a5084:	d01a      	beq.n	80a50bc <__gethex+0x2be>
 80a5086:	2b03      	cmp	r3, #3
 80a5088:	d01c      	beq.n	80a50c4 <__gethex+0x2c6>
 80a508a:	2b01      	cmp	r3, #1
 80a508c:	d11d      	bne.n	80a50ca <__gethex+0x2cc>
 80a508e:	42a6      	cmp	r6, r4
 80a5090:	d11b      	bne.n	80a50ca <__gethex+0x2cc>
 80a5092:	2e01      	cmp	r6, #1
 80a5094:	dc0b      	bgt.n	80a50ae <__gethex+0x2b0>
 80a5096:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a509a:	9a06      	ldr	r2, [sp, #24]
 80a509c:	2062      	movs	r0, #98	; 0x62
 80a509e:	6013      	str	r3, [r2, #0]
 80a50a0:	2301      	movs	r3, #1
 80a50a2:	612b      	str	r3, [r5, #16]
 80a50a4:	f8ca 3000 	str.w	r3, [sl]
 80a50a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a50aa:	601d      	str	r5, [r3, #0]
 80a50ac:	e0c3      	b.n	80a5236 <__gethex+0x438>
 80a50ae:	1e71      	subs	r1, r6, #1
 80a50b0:	4628      	mov	r0, r5
 80a50b2:	f000 fd3c 	bl	80a5b2e <__any_on>
 80a50b6:	2800      	cmp	r0, #0
 80a50b8:	d1ed      	bne.n	80a5096 <__gethex+0x298>
 80a50ba:	e006      	b.n	80a50ca <__gethex+0x2cc>
 80a50bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a50be:	2b00      	cmp	r3, #0
 80a50c0:	d0e9      	beq.n	80a5096 <__gethex+0x298>
 80a50c2:	e002      	b.n	80a50ca <__gethex+0x2cc>
 80a50c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a50c6:	2b00      	cmp	r3, #0
 80a50c8:	d1e5      	bne.n	80a5096 <__gethex+0x298>
 80a50ca:	9802      	ldr	r0, [sp, #8]
 80a50cc:	4629      	mov	r1, r5
 80a50ce:	f000 f99d 	bl	80a540c <_Bfree>
 80a50d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a50d4:	2300      	movs	r3, #0
 80a50d6:	6013      	str	r3, [r2, #0]
 80a50d8:	2050      	movs	r0, #80	; 0x50
 80a50da:	e0ac      	b.n	80a5236 <__gethex+0x438>
 80a50dc:	1e67      	subs	r7, r4, #1
 80a50de:	f1b9 0f00 	cmp.w	r9, #0
 80a50e2:	d106      	bne.n	80a50f2 <__gethex+0x2f4>
 80a50e4:	b13f      	cbz	r7, 80a50f6 <__gethex+0x2f8>
 80a50e6:	4639      	mov	r1, r7
 80a50e8:	4628      	mov	r0, r5
 80a50ea:	f000 fd20 	bl	80a5b2e <__any_on>
 80a50ee:	4681      	mov	r9, r0
 80a50f0:	e001      	b.n	80a50f6 <__gethex+0x2f8>
 80a50f2:	f04f 0901 	mov.w	r9, #1
 80a50f6:	117a      	asrs	r2, r7, #5
 80a50f8:	2301      	movs	r3, #1
 80a50fa:	f007 071f 	and.w	r7, r7, #31
 80a50fe:	fa03 f707 	lsl.w	r7, r3, r7
 80a5102:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 80a5106:	4621      	mov	r1, r4
 80a5108:	421f      	tst	r7, r3
 80a510a:	4628      	mov	r0, r5
 80a510c:	bf18      	it	ne
 80a510e:	f049 0902 	orrne.w	r9, r9, #2
 80a5112:	1b36      	subs	r6, r6, r4
 80a5114:	f7ff fe28 	bl	80a4d68 <rshift>
 80a5118:	2702      	movs	r7, #2
 80a511a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80a511e:	e000      	b.n	80a5122 <__gethex+0x324>
 80a5120:	2701      	movs	r7, #1
 80a5122:	f1b9 0f00 	cmp.w	r9, #0
 80a5126:	f000 8081 	beq.w	80a522c <__gethex+0x42e>
 80a512a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a512e:	2b02      	cmp	r3, #2
 80a5130:	d00e      	beq.n	80a5150 <__gethex+0x352>
 80a5132:	2b03      	cmp	r3, #3
 80a5134:	d010      	beq.n	80a5158 <__gethex+0x35a>
 80a5136:	2b01      	cmp	r3, #1
 80a5138:	d176      	bne.n	80a5228 <__gethex+0x42a>
 80a513a:	f019 0f02 	tst.w	r9, #2
 80a513e:	d073      	beq.n	80a5228 <__gethex+0x42a>
 80a5140:	f8da 0000 	ldr.w	r0, [sl]
 80a5144:	ea49 0900 	orr.w	r9, r9, r0
 80a5148:	f019 0f01 	tst.w	r9, #1
 80a514c:	d107      	bne.n	80a515e <__gethex+0x360>
 80a514e:	e06b      	b.n	80a5228 <__gethex+0x42a>
 80a5150:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a5152:	f1c3 0301 	rsb	r3, r3, #1
 80a5156:	9315      	str	r3, [sp, #84]	; 0x54
 80a5158:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a515a:	2b00      	cmp	r3, #0
 80a515c:	d064      	beq.n	80a5228 <__gethex+0x42a>
 80a515e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80a5162:	f105 0314 	add.w	r3, r5, #20
 80a5166:	ea4f 098a 	mov.w	r9, sl, lsl #2
 80a516a:	eb03 0109 	add.w	r1, r3, r9
 80a516e:	2000      	movs	r0, #0
 80a5170:	681a      	ldr	r2, [r3, #0]
 80a5172:	f1b2 3fff 	cmp.w	r2, #4294967295
 80a5176:	d002      	beq.n	80a517e <__gethex+0x380>
 80a5178:	3201      	adds	r2, #1
 80a517a:	601a      	str	r2, [r3, #0]
 80a517c:	e020      	b.n	80a51c0 <__gethex+0x3c2>
 80a517e:	f843 0b04 	str.w	r0, [r3], #4
 80a5182:	4299      	cmp	r1, r3
 80a5184:	d8f4      	bhi.n	80a5170 <__gethex+0x372>
 80a5186:	68ab      	ldr	r3, [r5, #8]
 80a5188:	459a      	cmp	sl, r3
 80a518a:	db12      	blt.n	80a51b2 <__gethex+0x3b4>
 80a518c:	6869      	ldr	r1, [r5, #4]
 80a518e:	9802      	ldr	r0, [sp, #8]
 80a5190:	3101      	adds	r1, #1
 80a5192:	f000 f906 	bl	80a53a2 <_Balloc>
 80a5196:	4683      	mov	fp, r0
 80a5198:	692a      	ldr	r2, [r5, #16]
 80a519a:	f105 010c 	add.w	r1, r5, #12
 80a519e:	3202      	adds	r2, #2
 80a51a0:	0092      	lsls	r2, r2, #2
 80a51a2:	300c      	adds	r0, #12
 80a51a4:	f7fe fe70 	bl	80a3e88 <memcpy>
 80a51a8:	4629      	mov	r1, r5
 80a51aa:	9802      	ldr	r0, [sp, #8]
 80a51ac:	f000 f92e 	bl	80a540c <_Bfree>
 80a51b0:	465d      	mov	r5, fp
 80a51b2:	692b      	ldr	r3, [r5, #16]
 80a51b4:	1c5a      	adds	r2, r3, #1
 80a51b6:	612a      	str	r2, [r5, #16]
 80a51b8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80a51bc:	2201      	movs	r2, #1
 80a51be:	615a      	str	r2, [r3, #20]
 80a51c0:	2f02      	cmp	r7, #2
 80a51c2:	f105 0214 	add.w	r2, r5, #20
 80a51c6:	d111      	bne.n	80a51ec <__gethex+0x3ee>
 80a51c8:	f8d8 3000 	ldr.w	r3, [r8]
 80a51cc:	3b01      	subs	r3, #1
 80a51ce:	429e      	cmp	r6, r3
 80a51d0:	d127      	bne.n	80a5222 <__gethex+0x424>
 80a51d2:	1171      	asrs	r1, r6, #5
 80a51d4:	2301      	movs	r3, #1
 80a51d6:	f006 061f 	and.w	r6, r6, #31
 80a51da:	fa03 f606 	lsl.w	r6, r3, r6
 80a51de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80a51e2:	421e      	tst	r6, r3
 80a51e4:	bf0c      	ite	eq
 80a51e6:	2702      	moveq	r7, #2
 80a51e8:	2701      	movne	r7, #1
 80a51ea:	e01a      	b.n	80a5222 <__gethex+0x424>
 80a51ec:	692b      	ldr	r3, [r5, #16]
 80a51ee:	459a      	cmp	sl, r3
 80a51f0:	da0a      	bge.n	80a5208 <__gethex+0x40a>
 80a51f2:	2101      	movs	r1, #1
 80a51f4:	4628      	mov	r0, r5
 80a51f6:	f7ff fdb7 	bl	80a4d68 <rshift>
 80a51fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a51fe:	3401      	adds	r4, #1
 80a5200:	429c      	cmp	r4, r3
 80a5202:	f73f af2c 	bgt.w	80a505e <__gethex+0x260>
 80a5206:	e00b      	b.n	80a5220 <__gethex+0x422>
 80a5208:	f016 061f 	ands.w	r6, r6, #31
 80a520c:	d008      	beq.n	80a5220 <__gethex+0x422>
 80a520e:	4491      	add	r9, r2
 80a5210:	f859 0c04 	ldr.w	r0, [r9, #-4]
 80a5214:	f000 f98a 	bl	80a552c <__hi0bits>
 80a5218:	f1c6 0620 	rsb	r6, r6, #32
 80a521c:	42b0      	cmp	r0, r6
 80a521e:	dbe8      	blt.n	80a51f2 <__gethex+0x3f4>
 80a5220:	2701      	movs	r7, #1
 80a5222:	f047 0720 	orr.w	r7, r7, #32
 80a5226:	e001      	b.n	80a522c <__gethex+0x42e>
 80a5228:	f047 0710 	orr.w	r7, r7, #16
 80a522c:	4638      	mov	r0, r7
 80a522e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a5230:	601d      	str	r5, [r3, #0]
 80a5232:	9b06      	ldr	r3, [sp, #24]
 80a5234:	601c      	str	r4, [r3, #0]
 80a5236:	b00b      	add	sp, #44	; 0x2c
 80a5238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a523c <L_shift>:
 80a523c:	f1c2 0208 	rsb	r2, r2, #8
 80a5240:	0092      	lsls	r2, r2, #2
 80a5242:	b570      	push	{r4, r5, r6, lr}
 80a5244:	f1c2 0620 	rsb	r6, r2, #32
 80a5248:	6843      	ldr	r3, [r0, #4]
 80a524a:	6805      	ldr	r5, [r0, #0]
 80a524c:	fa03 f406 	lsl.w	r4, r3, r6
 80a5250:	432c      	orrs	r4, r5
 80a5252:	40d3      	lsrs	r3, r2
 80a5254:	6004      	str	r4, [r0, #0]
 80a5256:	f840 3f04 	str.w	r3, [r0, #4]!
 80a525a:	4288      	cmp	r0, r1
 80a525c:	d3f4      	bcc.n	80a5248 <L_shift+0xc>
 80a525e:	bd70      	pop	{r4, r5, r6, pc}

080a5260 <__match>:
 80a5260:	b530      	push	{r4, r5, lr}
 80a5262:	6803      	ldr	r3, [r0, #0]
 80a5264:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a5268:	3301      	adds	r3, #1
 80a526a:	b14c      	cbz	r4, 80a5280 <__match+0x20>
 80a526c:	781a      	ldrb	r2, [r3, #0]
 80a526e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80a5272:	2d19      	cmp	r5, #25
 80a5274:	bf98      	it	ls
 80a5276:	3220      	addls	r2, #32
 80a5278:	42a2      	cmp	r2, r4
 80a527a:	d0f3      	beq.n	80a5264 <__match+0x4>
 80a527c:	2000      	movs	r0, #0
 80a527e:	bd30      	pop	{r4, r5, pc}
 80a5280:	6003      	str	r3, [r0, #0]
 80a5282:	2001      	movs	r0, #1
 80a5284:	bd30      	pop	{r4, r5, pc}

080a5286 <__hexnan>:
 80a5286:	680b      	ldr	r3, [r1, #0]
 80a5288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a528c:	115e      	asrs	r6, r3, #5
 80a528e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80a5292:	f013 031f 	ands.w	r3, r3, #31
 80a5296:	bf18      	it	ne
 80a5298:	3604      	addne	r6, #4
 80a529a:	1f35      	subs	r5, r6, #4
 80a529c:	4617      	mov	r7, r2
 80a529e:	2200      	movs	r2, #0
 80a52a0:	4682      	mov	sl, r0
 80a52a2:	46a8      	mov	r8, r5
 80a52a4:	462c      	mov	r4, r5
 80a52a6:	4691      	mov	r9, r2
 80a52a8:	b085      	sub	sp, #20
 80a52aa:	f8d0 b000 	ldr.w	fp, [r0]
 80a52ae:	9301      	str	r3, [sp, #4]
 80a52b0:	f846 2c04 	str.w	r2, [r6, #-4]
 80a52b4:	9200      	str	r2, [sp, #0]
 80a52b6:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 80a52ba:	2900      	cmp	r1, #0
 80a52bc:	d03c      	beq.n	80a5338 <__hexnan+0xb2>
 80a52be:	4608      	mov	r0, r1
 80a52c0:	9203      	str	r2, [sp, #12]
 80a52c2:	9102      	str	r1, [sp, #8]
 80a52c4:	f7ff fd86 	bl	80a4dd4 <__hexdig_fun>
 80a52c8:	9a03      	ldr	r2, [sp, #12]
 80a52ca:	bb00      	cbnz	r0, 80a530e <__hexnan+0x88>
 80a52cc:	9902      	ldr	r1, [sp, #8]
 80a52ce:	2920      	cmp	r1, #32
 80a52d0:	d816      	bhi.n	80a5300 <__hexnan+0x7a>
 80a52d2:	9b00      	ldr	r3, [sp, #0]
 80a52d4:	4599      	cmp	r9, r3
 80a52d6:	ddee      	ble.n	80a52b6 <__hexnan+0x30>
 80a52d8:	4544      	cmp	r4, r8
 80a52da:	d205      	bcs.n	80a52e8 <__hexnan+0x62>
 80a52dc:	2a07      	cmp	r2, #7
 80a52de:	dc03      	bgt.n	80a52e8 <__hexnan+0x62>
 80a52e0:	4641      	mov	r1, r8
 80a52e2:	4620      	mov	r0, r4
 80a52e4:	f7ff ffaa 	bl	80a523c <L_shift>
 80a52e8:	42bc      	cmp	r4, r7
 80a52ea:	d923      	bls.n	80a5334 <__hexnan+0xae>
 80a52ec:	2300      	movs	r3, #0
 80a52ee:	f1a4 0804 	sub.w	r8, r4, #4
 80a52f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80a52f6:	f8cd 9000 	str.w	r9, [sp]
 80a52fa:	4644      	mov	r4, r8
 80a52fc:	461a      	mov	r2, r3
 80a52fe:	e7da      	b.n	80a52b6 <__hexnan+0x30>
 80a5300:	2929      	cmp	r1, #41	; 0x29
 80a5302:	d148      	bne.n	80a5396 <__hexnan+0x110>
 80a5304:	f10b 0301 	add.w	r3, fp, #1
 80a5308:	f8ca 3000 	str.w	r3, [sl]
 80a530c:	e014      	b.n	80a5338 <__hexnan+0xb2>
 80a530e:	3201      	adds	r2, #1
 80a5310:	2a08      	cmp	r2, #8
 80a5312:	f109 0901 	add.w	r9, r9, #1
 80a5316:	dd06      	ble.n	80a5326 <__hexnan+0xa0>
 80a5318:	42bc      	cmp	r4, r7
 80a531a:	d9cc      	bls.n	80a52b6 <__hexnan+0x30>
 80a531c:	2300      	movs	r3, #0
 80a531e:	f844 3c04 	str.w	r3, [r4, #-4]
 80a5322:	2201      	movs	r2, #1
 80a5324:	3c04      	subs	r4, #4
 80a5326:	6821      	ldr	r1, [r4, #0]
 80a5328:	f000 000f 	and.w	r0, r0, #15
 80a532c:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 80a5330:	6020      	str	r0, [r4, #0]
 80a5332:	e7c0      	b.n	80a52b6 <__hexnan+0x30>
 80a5334:	2208      	movs	r2, #8
 80a5336:	e7be      	b.n	80a52b6 <__hexnan+0x30>
 80a5338:	f1b9 0f00 	cmp.w	r9, #0
 80a533c:	d02b      	beq.n	80a5396 <__hexnan+0x110>
 80a533e:	4544      	cmp	r4, r8
 80a5340:	d205      	bcs.n	80a534e <__hexnan+0xc8>
 80a5342:	2a07      	cmp	r2, #7
 80a5344:	dc03      	bgt.n	80a534e <__hexnan+0xc8>
 80a5346:	4641      	mov	r1, r8
 80a5348:	4620      	mov	r0, r4
 80a534a:	f7ff ff77 	bl	80a523c <L_shift>
 80a534e:	42bc      	cmp	r4, r7
 80a5350:	d90c      	bls.n	80a536c <__hexnan+0xe6>
 80a5352:	463b      	mov	r3, r7
 80a5354:	f854 2b04 	ldr.w	r2, [r4], #4
 80a5358:	42a5      	cmp	r5, r4
 80a535a:	f843 2b04 	str.w	r2, [r3], #4
 80a535e:	d2f9      	bcs.n	80a5354 <__hexnan+0xce>
 80a5360:	2200      	movs	r2, #0
 80a5362:	f843 2b04 	str.w	r2, [r3], #4
 80a5366:	429d      	cmp	r5, r3
 80a5368:	d2fb      	bcs.n	80a5362 <__hexnan+0xdc>
 80a536a:	e00b      	b.n	80a5384 <__hexnan+0xfe>
 80a536c:	9b01      	ldr	r3, [sp, #4]
 80a536e:	b14b      	cbz	r3, 80a5384 <__hexnan+0xfe>
 80a5370:	f1c3 0220 	rsb	r2, r3, #32
 80a5374:	f04f 33ff 	mov.w	r3, #4294967295
 80a5378:	40d3      	lsrs	r3, r2
 80a537a:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80a537e:	4013      	ands	r3, r2
 80a5380:	f846 3c04 	str.w	r3, [r6, #-4]
 80a5384:	682b      	ldr	r3, [r5, #0]
 80a5386:	b943      	cbnz	r3, 80a539a <__hexnan+0x114>
 80a5388:	42bd      	cmp	r5, r7
 80a538a:	d102      	bne.n	80a5392 <__hexnan+0x10c>
 80a538c:	2301      	movs	r3, #1
 80a538e:	602b      	str	r3, [r5, #0]
 80a5390:	e003      	b.n	80a539a <__hexnan+0x114>
 80a5392:	3d04      	subs	r5, #4
 80a5394:	e7f6      	b.n	80a5384 <__hexnan+0xfe>
 80a5396:	2004      	movs	r0, #4
 80a5398:	e000      	b.n	80a539c <__hexnan+0x116>
 80a539a:	2005      	movs	r0, #5
 80a539c:	b005      	add	sp, #20
 80a539e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a53a2 <_Balloc>:
 80a53a2:	b570      	push	{r4, r5, r6, lr}
 80a53a4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80a53a6:	4604      	mov	r4, r0
 80a53a8:	460e      	mov	r6, r1
 80a53aa:	b93d      	cbnz	r5, 80a53bc <_Balloc+0x1a>
 80a53ac:	2010      	movs	r0, #16
 80a53ae:	f7fc f93d 	bl	80a162c <malloc>
 80a53b2:	6260      	str	r0, [r4, #36]	; 0x24
 80a53b4:	6045      	str	r5, [r0, #4]
 80a53b6:	6085      	str	r5, [r0, #8]
 80a53b8:	6005      	str	r5, [r0, #0]
 80a53ba:	60c5      	str	r5, [r0, #12]
 80a53bc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80a53be:	68eb      	ldr	r3, [r5, #12]
 80a53c0:	b143      	cbz	r3, 80a53d4 <_Balloc+0x32>
 80a53c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a53c4:	68db      	ldr	r3, [r3, #12]
 80a53c6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80a53ca:	b178      	cbz	r0, 80a53ec <_Balloc+0x4a>
 80a53cc:	6802      	ldr	r2, [r0, #0]
 80a53ce:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80a53d2:	e017      	b.n	80a5404 <_Balloc+0x62>
 80a53d4:	2221      	movs	r2, #33	; 0x21
 80a53d6:	2104      	movs	r1, #4
 80a53d8:	4620      	mov	r0, r4
 80a53da:	f000 fbca 	bl	80a5b72 <_calloc_r>
 80a53de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a53e0:	60e8      	str	r0, [r5, #12]
 80a53e2:	68db      	ldr	r3, [r3, #12]
 80a53e4:	2b00      	cmp	r3, #0
 80a53e6:	d1ec      	bne.n	80a53c2 <_Balloc+0x20>
 80a53e8:	2000      	movs	r0, #0
 80a53ea:	bd70      	pop	{r4, r5, r6, pc}
 80a53ec:	2101      	movs	r1, #1
 80a53ee:	fa01 f506 	lsl.w	r5, r1, r6
 80a53f2:	1d6a      	adds	r2, r5, #5
 80a53f4:	0092      	lsls	r2, r2, #2
 80a53f6:	4620      	mov	r0, r4
 80a53f8:	f000 fbbb 	bl	80a5b72 <_calloc_r>
 80a53fc:	2800      	cmp	r0, #0
 80a53fe:	d0f3      	beq.n	80a53e8 <_Balloc+0x46>
 80a5400:	6046      	str	r6, [r0, #4]
 80a5402:	6085      	str	r5, [r0, #8]
 80a5404:	2300      	movs	r3, #0
 80a5406:	6103      	str	r3, [r0, #16]
 80a5408:	60c3      	str	r3, [r0, #12]
 80a540a:	bd70      	pop	{r4, r5, r6, pc}

080a540c <_Bfree>:
 80a540c:	b570      	push	{r4, r5, r6, lr}
 80a540e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80a5410:	4606      	mov	r6, r0
 80a5412:	460d      	mov	r5, r1
 80a5414:	b93c      	cbnz	r4, 80a5426 <_Bfree+0x1a>
 80a5416:	2010      	movs	r0, #16
 80a5418:	f7fc f908 	bl	80a162c <malloc>
 80a541c:	6270      	str	r0, [r6, #36]	; 0x24
 80a541e:	6044      	str	r4, [r0, #4]
 80a5420:	6084      	str	r4, [r0, #8]
 80a5422:	6004      	str	r4, [r0, #0]
 80a5424:	60c4      	str	r4, [r0, #12]
 80a5426:	b13d      	cbz	r5, 80a5438 <_Bfree+0x2c>
 80a5428:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80a542a:	686a      	ldr	r2, [r5, #4]
 80a542c:	68db      	ldr	r3, [r3, #12]
 80a542e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80a5432:	6029      	str	r1, [r5, #0]
 80a5434:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80a5438:	bd70      	pop	{r4, r5, r6, pc}

080a543a <__multadd>:
 80a543a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a543e:	4606      	mov	r6, r0
 80a5440:	460c      	mov	r4, r1
 80a5442:	690d      	ldr	r5, [r1, #16]
 80a5444:	461f      	mov	r7, r3
 80a5446:	f101 0e14 	add.w	lr, r1, #20
 80a544a:	2300      	movs	r3, #0
 80a544c:	f8de 0000 	ldr.w	r0, [lr]
 80a5450:	3301      	adds	r3, #1
 80a5452:	b281      	uxth	r1, r0
 80a5454:	fb02 7101 	mla	r1, r2, r1, r7
 80a5458:	0c00      	lsrs	r0, r0, #16
 80a545a:	0c0f      	lsrs	r7, r1, #16
 80a545c:	fb02 7000 	mla	r0, r2, r0, r7
 80a5460:	b289      	uxth	r1, r1
 80a5462:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80a5466:	429d      	cmp	r5, r3
 80a5468:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80a546c:	f84e 1b04 	str.w	r1, [lr], #4
 80a5470:	dcec      	bgt.n	80a544c <__multadd+0x12>
 80a5472:	b1d7      	cbz	r7, 80a54aa <__multadd+0x70>
 80a5474:	68a3      	ldr	r3, [r4, #8]
 80a5476:	429d      	cmp	r5, r3
 80a5478:	db12      	blt.n	80a54a0 <__multadd+0x66>
 80a547a:	6861      	ldr	r1, [r4, #4]
 80a547c:	4630      	mov	r0, r6
 80a547e:	3101      	adds	r1, #1
 80a5480:	f7ff ff8f 	bl	80a53a2 <_Balloc>
 80a5484:	4680      	mov	r8, r0
 80a5486:	6922      	ldr	r2, [r4, #16]
 80a5488:	f104 010c 	add.w	r1, r4, #12
 80a548c:	3202      	adds	r2, #2
 80a548e:	0092      	lsls	r2, r2, #2
 80a5490:	300c      	adds	r0, #12
 80a5492:	f7fe fcf9 	bl	80a3e88 <memcpy>
 80a5496:	4621      	mov	r1, r4
 80a5498:	4630      	mov	r0, r6
 80a549a:	f7ff ffb7 	bl	80a540c <_Bfree>
 80a549e:	4644      	mov	r4, r8
 80a54a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80a54a4:	3501      	adds	r5, #1
 80a54a6:	615f      	str	r7, [r3, #20]
 80a54a8:	6125      	str	r5, [r4, #16]
 80a54aa:	4620      	mov	r0, r4
 80a54ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a54b0 <__s2b>:
 80a54b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a54b4:	4606      	mov	r6, r0
 80a54b6:	4615      	mov	r5, r2
 80a54b8:	461f      	mov	r7, r3
 80a54ba:	2209      	movs	r2, #9
 80a54bc:	3308      	adds	r3, #8
 80a54be:	460c      	mov	r4, r1
 80a54c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80a54c4:	2100      	movs	r1, #0
 80a54c6:	2201      	movs	r2, #1
 80a54c8:	429a      	cmp	r2, r3
 80a54ca:	da02      	bge.n	80a54d2 <__s2b+0x22>
 80a54cc:	0052      	lsls	r2, r2, #1
 80a54ce:	3101      	adds	r1, #1
 80a54d0:	e7fa      	b.n	80a54c8 <__s2b+0x18>
 80a54d2:	4630      	mov	r0, r6
 80a54d4:	f7ff ff65 	bl	80a53a2 <_Balloc>
 80a54d8:	9b08      	ldr	r3, [sp, #32]
 80a54da:	2d09      	cmp	r5, #9
 80a54dc:	6143      	str	r3, [r0, #20]
 80a54de:	f04f 0301 	mov.w	r3, #1
 80a54e2:	6103      	str	r3, [r0, #16]
 80a54e4:	dd11      	ble.n	80a550a <__s2b+0x5a>
 80a54e6:	f104 0809 	add.w	r8, r4, #9
 80a54ea:	46c1      	mov	r9, r8
 80a54ec:	442c      	add	r4, r5
 80a54ee:	f819 3b01 	ldrb.w	r3, [r9], #1
 80a54f2:	4601      	mov	r1, r0
 80a54f4:	3b30      	subs	r3, #48	; 0x30
 80a54f6:	220a      	movs	r2, #10
 80a54f8:	4630      	mov	r0, r6
 80a54fa:	f7ff ff9e 	bl	80a543a <__multadd>
 80a54fe:	45a1      	cmp	r9, r4
 80a5500:	d1f5      	bne.n	80a54ee <__s2b+0x3e>
 80a5502:	eb08 0405 	add.w	r4, r8, r5
 80a5506:	3c08      	subs	r4, #8
 80a5508:	e001      	b.n	80a550e <__s2b+0x5e>
 80a550a:	340a      	adds	r4, #10
 80a550c:	2509      	movs	r5, #9
 80a550e:	1b2d      	subs	r5, r5, r4
 80a5510:	1963      	adds	r3, r4, r5
 80a5512:	429f      	cmp	r7, r3
 80a5514:	dd08      	ble.n	80a5528 <__s2b+0x78>
 80a5516:	f814 3b01 	ldrb.w	r3, [r4], #1
 80a551a:	4601      	mov	r1, r0
 80a551c:	3b30      	subs	r3, #48	; 0x30
 80a551e:	220a      	movs	r2, #10
 80a5520:	4630      	mov	r0, r6
 80a5522:	f7ff ff8a 	bl	80a543a <__multadd>
 80a5526:	e7f3      	b.n	80a5510 <__s2b+0x60>
 80a5528:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a552c <__hi0bits>:
 80a552c:	0c03      	lsrs	r3, r0, #16
 80a552e:	041b      	lsls	r3, r3, #16
 80a5530:	b913      	cbnz	r3, 80a5538 <__hi0bits+0xc>
 80a5532:	0400      	lsls	r0, r0, #16
 80a5534:	2310      	movs	r3, #16
 80a5536:	e000      	b.n	80a553a <__hi0bits+0xe>
 80a5538:	2300      	movs	r3, #0
 80a553a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80a553e:	bf04      	itt	eq
 80a5540:	0200      	lsleq	r0, r0, #8
 80a5542:	3308      	addeq	r3, #8
 80a5544:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80a5548:	bf04      	itt	eq
 80a554a:	0100      	lsleq	r0, r0, #4
 80a554c:	3304      	addeq	r3, #4
 80a554e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80a5552:	bf04      	itt	eq
 80a5554:	0080      	lsleq	r0, r0, #2
 80a5556:	3302      	addeq	r3, #2
 80a5558:	2800      	cmp	r0, #0
 80a555a:	db03      	blt.n	80a5564 <__hi0bits+0x38>
 80a555c:	0042      	lsls	r2, r0, #1
 80a555e:	d503      	bpl.n	80a5568 <__hi0bits+0x3c>
 80a5560:	1c58      	adds	r0, r3, #1
 80a5562:	4770      	bx	lr
 80a5564:	4618      	mov	r0, r3
 80a5566:	4770      	bx	lr
 80a5568:	2020      	movs	r0, #32
 80a556a:	4770      	bx	lr

080a556c <__lo0bits>:
 80a556c:	6803      	ldr	r3, [r0, #0]
 80a556e:	f013 0207 	ands.w	r2, r3, #7
 80a5572:	d00b      	beq.n	80a558c <__lo0bits+0x20>
 80a5574:	07d9      	lsls	r1, r3, #31
 80a5576:	d422      	bmi.n	80a55be <__lo0bits+0x52>
 80a5578:	079a      	lsls	r2, r3, #30
 80a557a:	bf4b      	itete	mi
 80a557c:	085b      	lsrmi	r3, r3, #1
 80a557e:	089b      	lsrpl	r3, r3, #2
 80a5580:	6003      	strmi	r3, [r0, #0]
 80a5582:	6003      	strpl	r3, [r0, #0]
 80a5584:	bf4c      	ite	mi
 80a5586:	2001      	movmi	r0, #1
 80a5588:	2002      	movpl	r0, #2
 80a558a:	4770      	bx	lr
 80a558c:	b299      	uxth	r1, r3
 80a558e:	b909      	cbnz	r1, 80a5594 <__lo0bits+0x28>
 80a5590:	0c1b      	lsrs	r3, r3, #16
 80a5592:	2210      	movs	r2, #16
 80a5594:	f013 0fff 	tst.w	r3, #255	; 0xff
 80a5598:	bf04      	itt	eq
 80a559a:	0a1b      	lsreq	r3, r3, #8
 80a559c:	3208      	addeq	r2, #8
 80a559e:	0719      	lsls	r1, r3, #28
 80a55a0:	bf04      	itt	eq
 80a55a2:	091b      	lsreq	r3, r3, #4
 80a55a4:	3204      	addeq	r2, #4
 80a55a6:	0799      	lsls	r1, r3, #30
 80a55a8:	bf04      	itt	eq
 80a55aa:	089b      	lsreq	r3, r3, #2
 80a55ac:	3202      	addeq	r2, #2
 80a55ae:	07d9      	lsls	r1, r3, #31
 80a55b0:	d402      	bmi.n	80a55b8 <__lo0bits+0x4c>
 80a55b2:	085b      	lsrs	r3, r3, #1
 80a55b4:	d005      	beq.n	80a55c2 <__lo0bits+0x56>
 80a55b6:	3201      	adds	r2, #1
 80a55b8:	6003      	str	r3, [r0, #0]
 80a55ba:	4610      	mov	r0, r2
 80a55bc:	4770      	bx	lr
 80a55be:	2000      	movs	r0, #0
 80a55c0:	4770      	bx	lr
 80a55c2:	2020      	movs	r0, #32
 80a55c4:	4770      	bx	lr

080a55c6 <__i2b>:
 80a55c6:	b510      	push	{r4, lr}
 80a55c8:	460c      	mov	r4, r1
 80a55ca:	2101      	movs	r1, #1
 80a55cc:	f7ff fee9 	bl	80a53a2 <_Balloc>
 80a55d0:	2201      	movs	r2, #1
 80a55d2:	6144      	str	r4, [r0, #20]
 80a55d4:	6102      	str	r2, [r0, #16]
 80a55d6:	bd10      	pop	{r4, pc}

080a55d8 <__multiply>:
 80a55d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a55dc:	4614      	mov	r4, r2
 80a55de:	690a      	ldr	r2, [r1, #16]
 80a55e0:	6923      	ldr	r3, [r4, #16]
 80a55e2:	4688      	mov	r8, r1
 80a55e4:	429a      	cmp	r2, r3
 80a55e6:	bfbe      	ittt	lt
 80a55e8:	460b      	movlt	r3, r1
 80a55ea:	46a0      	movlt	r8, r4
 80a55ec:	461c      	movlt	r4, r3
 80a55ee:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80a55f2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80a55f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a55fa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80a55fe:	eb07 0609 	add.w	r6, r7, r9
 80a5602:	429e      	cmp	r6, r3
 80a5604:	bfc8      	it	gt
 80a5606:	3101      	addgt	r1, #1
 80a5608:	f7ff fecb 	bl	80a53a2 <_Balloc>
 80a560c:	f100 0514 	add.w	r5, r0, #20
 80a5610:	462b      	mov	r3, r5
 80a5612:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 80a5616:	2200      	movs	r2, #0
 80a5618:	4563      	cmp	r3, ip
 80a561a:	d202      	bcs.n	80a5622 <__multiply+0x4a>
 80a561c:	f843 2b04 	str.w	r2, [r3], #4
 80a5620:	e7fa      	b.n	80a5618 <__multiply+0x40>
 80a5622:	f104 0214 	add.w	r2, r4, #20
 80a5626:	f108 0114 	add.w	r1, r8, #20
 80a562a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80a562e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80a5632:	9300      	str	r3, [sp, #0]
 80a5634:	9b00      	ldr	r3, [sp, #0]
 80a5636:	9201      	str	r2, [sp, #4]
 80a5638:	4293      	cmp	r3, r2
 80a563a:	d957      	bls.n	80a56ec <__multiply+0x114>
 80a563c:	f8b2 b000 	ldrh.w	fp, [r2]
 80a5640:	f1bb 0f00 	cmp.w	fp, #0
 80a5644:	d023      	beq.n	80a568e <__multiply+0xb6>
 80a5646:	4689      	mov	r9, r1
 80a5648:	46ae      	mov	lr, r5
 80a564a:	f04f 0800 	mov.w	r8, #0
 80a564e:	f859 4b04 	ldr.w	r4, [r9], #4
 80a5652:	f8be a000 	ldrh.w	sl, [lr]
 80a5656:	b2a3      	uxth	r3, r4
 80a5658:	fb0b a303 	mla	r3, fp, r3, sl
 80a565c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80a5660:	f8de 4000 	ldr.w	r4, [lr]
 80a5664:	4443      	add	r3, r8
 80a5666:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a566a:	fb0b 840a 	mla	r4, fp, sl, r8
 80a566e:	46f2      	mov	sl, lr
 80a5670:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80a5674:	b29b      	uxth	r3, r3
 80a5676:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80a567a:	454f      	cmp	r7, r9
 80a567c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a5680:	f84a 3b04 	str.w	r3, [sl], #4
 80a5684:	d901      	bls.n	80a568a <__multiply+0xb2>
 80a5686:	46d6      	mov	lr, sl
 80a5688:	e7e1      	b.n	80a564e <__multiply+0x76>
 80a568a:	f8ce 8004 	str.w	r8, [lr, #4]
 80a568e:	9b01      	ldr	r3, [sp, #4]
 80a5690:	3204      	adds	r2, #4
 80a5692:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80a5696:	f1ba 0f00 	cmp.w	sl, #0
 80a569a:	d021      	beq.n	80a56e0 <__multiply+0x108>
 80a569c:	462c      	mov	r4, r5
 80a569e:	4689      	mov	r9, r1
 80a56a0:	682b      	ldr	r3, [r5, #0]
 80a56a2:	f04f 0800 	mov.w	r8, #0
 80a56a6:	f8b9 e000 	ldrh.w	lr, [r9]
 80a56aa:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80a56ae:	b29b      	uxth	r3, r3
 80a56b0:	fb0a be0e 	mla	lr, sl, lr, fp
 80a56b4:	46a3      	mov	fp, r4
 80a56b6:	44f0      	add	r8, lr
 80a56b8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80a56bc:	f84b 3b04 	str.w	r3, [fp], #4
 80a56c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80a56c4:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 80a56c8:	0c1b      	lsrs	r3, r3, #16
 80a56ca:	fb0a e303 	mla	r3, sl, r3, lr
 80a56ce:	454f      	cmp	r7, r9
 80a56d0:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 80a56d4:	ea4f 4813 	mov.w	r8, r3, lsr #16
 80a56d8:	d901      	bls.n	80a56de <__multiply+0x106>
 80a56da:	465c      	mov	r4, fp
 80a56dc:	e7e3      	b.n	80a56a6 <__multiply+0xce>
 80a56de:	6063      	str	r3, [r4, #4]
 80a56e0:	3504      	adds	r5, #4
 80a56e2:	e7a7      	b.n	80a5634 <__multiply+0x5c>
 80a56e4:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 80a56e8:	b913      	cbnz	r3, 80a56f0 <__multiply+0x118>
 80a56ea:	3e01      	subs	r6, #1
 80a56ec:	2e00      	cmp	r6, #0
 80a56ee:	dcf9      	bgt.n	80a56e4 <__multiply+0x10c>
 80a56f0:	6106      	str	r6, [r0, #16]
 80a56f2:	b003      	add	sp, #12
 80a56f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a56f8 <__pow5mult>:
 80a56f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a56fc:	4615      	mov	r5, r2
 80a56fe:	f012 0203 	ands.w	r2, r2, #3
 80a5702:	4606      	mov	r6, r0
 80a5704:	460f      	mov	r7, r1
 80a5706:	d007      	beq.n	80a5718 <__pow5mult+0x20>
 80a5708:	4c21      	ldr	r4, [pc, #132]	; (80a5790 <__pow5mult+0x98>)
 80a570a:	3a01      	subs	r2, #1
 80a570c:	2300      	movs	r3, #0
 80a570e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80a5712:	f7ff fe92 	bl	80a543a <__multadd>
 80a5716:	4607      	mov	r7, r0
 80a5718:	10ad      	asrs	r5, r5, #2
 80a571a:	d036      	beq.n	80a578a <__pow5mult+0x92>
 80a571c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80a571e:	b93c      	cbnz	r4, 80a5730 <__pow5mult+0x38>
 80a5720:	2010      	movs	r0, #16
 80a5722:	f7fb ff83 	bl	80a162c <malloc>
 80a5726:	6270      	str	r0, [r6, #36]	; 0x24
 80a5728:	6044      	str	r4, [r0, #4]
 80a572a:	6084      	str	r4, [r0, #8]
 80a572c:	6004      	str	r4, [r0, #0]
 80a572e:	60c4      	str	r4, [r0, #12]
 80a5730:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80a5734:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80a5738:	b94c      	cbnz	r4, 80a574e <__pow5mult+0x56>
 80a573a:	f240 2171 	movw	r1, #625	; 0x271
 80a573e:	4630      	mov	r0, r6
 80a5740:	f7ff ff41 	bl	80a55c6 <__i2b>
 80a5744:	4604      	mov	r4, r0
 80a5746:	2300      	movs	r3, #0
 80a5748:	f8c8 0008 	str.w	r0, [r8, #8]
 80a574c:	6003      	str	r3, [r0, #0]
 80a574e:	f04f 0800 	mov.w	r8, #0
 80a5752:	07eb      	lsls	r3, r5, #31
 80a5754:	d50a      	bpl.n	80a576c <__pow5mult+0x74>
 80a5756:	4639      	mov	r1, r7
 80a5758:	4622      	mov	r2, r4
 80a575a:	4630      	mov	r0, r6
 80a575c:	f7ff ff3c 	bl	80a55d8 <__multiply>
 80a5760:	4681      	mov	r9, r0
 80a5762:	4639      	mov	r1, r7
 80a5764:	4630      	mov	r0, r6
 80a5766:	f7ff fe51 	bl	80a540c <_Bfree>
 80a576a:	464f      	mov	r7, r9
 80a576c:	106d      	asrs	r5, r5, #1
 80a576e:	d00c      	beq.n	80a578a <__pow5mult+0x92>
 80a5770:	6820      	ldr	r0, [r4, #0]
 80a5772:	b108      	cbz	r0, 80a5778 <__pow5mult+0x80>
 80a5774:	4604      	mov	r4, r0
 80a5776:	e7ec      	b.n	80a5752 <__pow5mult+0x5a>
 80a5778:	4622      	mov	r2, r4
 80a577a:	4621      	mov	r1, r4
 80a577c:	4630      	mov	r0, r6
 80a577e:	f7ff ff2b 	bl	80a55d8 <__multiply>
 80a5782:	6020      	str	r0, [r4, #0]
 80a5784:	f8c0 8000 	str.w	r8, [r0]
 80a5788:	e7f4      	b.n	80a5774 <__pow5mult+0x7c>
 80a578a:	4638      	mov	r0, r7
 80a578c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a5790:	080a6280 	.word	0x080a6280

080a5794 <__lshift>:
 80a5794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a5798:	460c      	mov	r4, r1
 80a579a:	4607      	mov	r7, r0
 80a579c:	4691      	mov	r9, r2
 80a579e:	6926      	ldr	r6, [r4, #16]
 80a57a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80a57a4:	4456      	add	r6, sl
 80a57a6:	6849      	ldr	r1, [r1, #4]
 80a57a8:	68a3      	ldr	r3, [r4, #8]
 80a57aa:	1c75      	adds	r5, r6, #1
 80a57ac:	42ab      	cmp	r3, r5
 80a57ae:	da02      	bge.n	80a57b6 <__lshift+0x22>
 80a57b0:	3101      	adds	r1, #1
 80a57b2:	005b      	lsls	r3, r3, #1
 80a57b4:	e7fa      	b.n	80a57ac <__lshift+0x18>
 80a57b6:	4638      	mov	r0, r7
 80a57b8:	f7ff fdf3 	bl	80a53a2 <_Balloc>
 80a57bc:	2300      	movs	r3, #0
 80a57be:	4680      	mov	r8, r0
 80a57c0:	461a      	mov	r2, r3
 80a57c2:	f100 0114 	add.w	r1, r0, #20
 80a57c6:	4553      	cmp	r3, sl
 80a57c8:	da03      	bge.n	80a57d2 <__lshift+0x3e>
 80a57ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80a57ce:	3301      	adds	r3, #1
 80a57d0:	e7f9      	b.n	80a57c6 <__lshift+0x32>
 80a57d2:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 80a57d6:	6920      	ldr	r0, [r4, #16]
 80a57d8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a57dc:	f019 091f 	ands.w	r9, r9, #31
 80a57e0:	f104 0114 	add.w	r1, r4, #20
 80a57e4:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80a57e8:	d014      	beq.n	80a5814 <__lshift+0x80>
 80a57ea:	f1c9 0c20 	rsb	ip, r9, #32
 80a57ee:	2200      	movs	r2, #0
 80a57f0:	6808      	ldr	r0, [r1, #0]
 80a57f2:	469a      	mov	sl, r3
 80a57f4:	fa00 f009 	lsl.w	r0, r0, r9
 80a57f8:	4302      	orrs	r2, r0
 80a57fa:	f843 2b04 	str.w	r2, [r3], #4
 80a57fe:	f851 2b04 	ldr.w	r2, [r1], #4
 80a5802:	458e      	cmp	lr, r1
 80a5804:	fa22 f20c 	lsr.w	r2, r2, ip
 80a5808:	d8f2      	bhi.n	80a57f0 <__lshift+0x5c>
 80a580a:	f8ca 2004 	str.w	r2, [sl, #4]
 80a580e:	b142      	cbz	r2, 80a5822 <__lshift+0x8e>
 80a5810:	1cb5      	adds	r5, r6, #2
 80a5812:	e006      	b.n	80a5822 <__lshift+0x8e>
 80a5814:	3b04      	subs	r3, #4
 80a5816:	f851 2b04 	ldr.w	r2, [r1], #4
 80a581a:	458e      	cmp	lr, r1
 80a581c:	f843 2f04 	str.w	r2, [r3, #4]!
 80a5820:	d8f9      	bhi.n	80a5816 <__lshift+0x82>
 80a5822:	3d01      	subs	r5, #1
 80a5824:	4638      	mov	r0, r7
 80a5826:	f8c8 5010 	str.w	r5, [r8, #16]
 80a582a:	4621      	mov	r1, r4
 80a582c:	f7ff fdee 	bl	80a540c <_Bfree>
 80a5830:	4640      	mov	r0, r8
 80a5832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a5836 <__mcmp>:
 80a5836:	6903      	ldr	r3, [r0, #16]
 80a5838:	690a      	ldr	r2, [r1, #16]
 80a583a:	b510      	push	{r4, lr}
 80a583c:	1a9b      	subs	r3, r3, r2
 80a583e:	d111      	bne.n	80a5864 <__mcmp+0x2e>
 80a5840:	0092      	lsls	r2, r2, #2
 80a5842:	3014      	adds	r0, #20
 80a5844:	3114      	adds	r1, #20
 80a5846:	1883      	adds	r3, r0, r2
 80a5848:	440a      	add	r2, r1
 80a584a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80a584e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80a5852:	428c      	cmp	r4, r1
 80a5854:	d002      	beq.n	80a585c <__mcmp+0x26>
 80a5856:	d307      	bcc.n	80a5868 <__mcmp+0x32>
 80a5858:	2001      	movs	r0, #1
 80a585a:	bd10      	pop	{r4, pc}
 80a585c:	4298      	cmp	r0, r3
 80a585e:	d3f4      	bcc.n	80a584a <__mcmp+0x14>
 80a5860:	2000      	movs	r0, #0
 80a5862:	bd10      	pop	{r4, pc}
 80a5864:	4618      	mov	r0, r3
 80a5866:	bd10      	pop	{r4, pc}
 80a5868:	f04f 30ff 	mov.w	r0, #4294967295
 80a586c:	bd10      	pop	{r4, pc}

080a586e <__mdiff>:
 80a586e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a5872:	460c      	mov	r4, r1
 80a5874:	4607      	mov	r7, r0
 80a5876:	4611      	mov	r1, r2
 80a5878:	4620      	mov	r0, r4
 80a587a:	4615      	mov	r5, r2
 80a587c:	f7ff ffdb 	bl	80a5836 <__mcmp>
 80a5880:	1e06      	subs	r6, r0, #0
 80a5882:	d108      	bne.n	80a5896 <__mdiff+0x28>
 80a5884:	4631      	mov	r1, r6
 80a5886:	4638      	mov	r0, r7
 80a5888:	f7ff fd8b 	bl	80a53a2 <_Balloc>
 80a588c:	2301      	movs	r3, #1
 80a588e:	6103      	str	r3, [r0, #16]
 80a5890:	6146      	str	r6, [r0, #20]
 80a5892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a5896:	bfbc      	itt	lt
 80a5898:	4623      	movlt	r3, r4
 80a589a:	462c      	movlt	r4, r5
 80a589c:	4638      	mov	r0, r7
 80a589e:	6861      	ldr	r1, [r4, #4]
 80a58a0:	bfba      	itte	lt
 80a58a2:	461d      	movlt	r5, r3
 80a58a4:	2601      	movlt	r6, #1
 80a58a6:	2600      	movge	r6, #0
 80a58a8:	f7ff fd7b 	bl	80a53a2 <_Balloc>
 80a58ac:	692b      	ldr	r3, [r5, #16]
 80a58ae:	60c6      	str	r6, [r0, #12]
 80a58b0:	6926      	ldr	r6, [r4, #16]
 80a58b2:	f105 0914 	add.w	r9, r5, #20
 80a58b6:	f104 0114 	add.w	r1, r4, #20
 80a58ba:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 80a58be:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80a58c2:	f100 0514 	add.w	r5, r0, #20
 80a58c6:	f04f 0c00 	mov.w	ip, #0
 80a58ca:	f851 2b04 	ldr.w	r2, [r1], #4
 80a58ce:	f859 4b04 	ldr.w	r4, [r9], #4
 80a58d2:	b293      	uxth	r3, r2
 80a58d4:	449c      	add	ip, r3
 80a58d6:	b2a3      	uxth	r3, r4
 80a58d8:	0c24      	lsrs	r4, r4, #16
 80a58da:	ebc3 030c 	rsb	r3, r3, ip
 80a58de:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 80a58e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80a58e6:	b29b      	uxth	r3, r3
 80a58e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80a58ec:	45c8      	cmp	r8, r9
 80a58ee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a58f2:	468e      	mov	lr, r1
 80a58f4:	f845 2b04 	str.w	r2, [r5], #4
 80a58f8:	d8e7      	bhi.n	80a58ca <__mdiff+0x5c>
 80a58fa:	45be      	cmp	lr, r7
 80a58fc:	d20e      	bcs.n	80a591c <__mdiff+0xae>
 80a58fe:	f85e 1b04 	ldr.w	r1, [lr], #4
 80a5902:	b28a      	uxth	r2, r1
 80a5904:	4462      	add	r2, ip
 80a5906:	1413      	asrs	r3, r2, #16
 80a5908:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 80a590c:	b292      	uxth	r2, r2
 80a590e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80a5912:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80a5916:	f845 2b04 	str.w	r2, [r5], #4
 80a591a:	e7ee      	b.n	80a58fa <__mdiff+0x8c>
 80a591c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80a5920:	b90b      	cbnz	r3, 80a5926 <__mdiff+0xb8>
 80a5922:	3e01      	subs	r6, #1
 80a5924:	e7fa      	b.n	80a591c <__mdiff+0xae>
 80a5926:	6106      	str	r6, [r0, #16]
 80a5928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a592c <__ulp>:
 80a592c:	4b10      	ldr	r3, [pc, #64]	; (80a5970 <__ulp+0x44>)
 80a592e:	400b      	ands	r3, r1
 80a5930:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80a5934:	2b00      	cmp	r3, #0
 80a5936:	dd02      	ble.n	80a593e <__ulp+0x12>
 80a5938:	2000      	movs	r0, #0
 80a593a:	4619      	mov	r1, r3
 80a593c:	4770      	bx	lr
 80a593e:	425b      	negs	r3, r3
 80a5940:	151b      	asrs	r3, r3, #20
 80a5942:	2b13      	cmp	r3, #19
 80a5944:	f04f 0000 	mov.w	r0, #0
 80a5948:	f04f 0100 	mov.w	r1, #0
 80a594c:	dc04      	bgt.n	80a5958 <__ulp+0x2c>
 80a594e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80a5952:	fa42 f103 	asr.w	r1, r2, r3
 80a5956:	4770      	bx	lr
 80a5958:	3b14      	subs	r3, #20
 80a595a:	2b1e      	cmp	r3, #30
 80a595c:	f04f 0201 	mov.w	r2, #1
 80a5960:	bfce      	itee	gt
 80a5962:	4613      	movgt	r3, r2
 80a5964:	f1c3 031f 	rsble	r3, r3, #31
 80a5968:	fa02 f303 	lslle.w	r3, r2, r3
 80a596c:	4618      	mov	r0, r3
 80a596e:	4770      	bx	lr
 80a5970:	7ff00000 	.word	0x7ff00000

080a5974 <__b2d>:
 80a5974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a5976:	6905      	ldr	r5, [r0, #16]
 80a5978:	f100 0614 	add.w	r6, r0, #20
 80a597c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80a5980:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80a5984:	1f2f      	subs	r7, r5, #4
 80a5986:	4620      	mov	r0, r4
 80a5988:	f7ff fdd0 	bl	80a552c <__hi0bits>
 80a598c:	f1c0 0320 	rsb	r3, r0, #32
 80a5990:	280a      	cmp	r0, #10
 80a5992:	600b      	str	r3, [r1, #0]
 80a5994:	dc14      	bgt.n	80a59c0 <__b2d+0x4c>
 80a5996:	f1c0 0e0b 	rsb	lr, r0, #11
 80a599a:	fa24 f10e 	lsr.w	r1, r4, lr
 80a599e:	42be      	cmp	r6, r7
 80a59a0:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 80a59a4:	bf34      	ite	cc
 80a59a6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80a59aa:	2100      	movcs	r1, #0
 80a59ac:	3015      	adds	r0, #21
 80a59ae:	fa04 f000 	lsl.w	r0, r4, r0
 80a59b2:	fa21 f10e 	lsr.w	r1, r1, lr
 80a59b6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80a59ba:	ea40 0201 	orr.w	r2, r0, r1
 80a59be:	e023      	b.n	80a5a08 <__b2d+0x94>
 80a59c0:	42be      	cmp	r6, r7
 80a59c2:	bf3a      	itte	cc
 80a59c4:	f1a5 0708 	subcc.w	r7, r5, #8
 80a59c8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80a59cc:	2100      	movcs	r1, #0
 80a59ce:	380b      	subs	r0, #11
 80a59d0:	d015      	beq.n	80a59fe <__b2d+0x8a>
 80a59d2:	4084      	lsls	r4, r0
 80a59d4:	f1c0 0520 	rsb	r5, r0, #32
 80a59d8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80a59dc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80a59e0:	42b7      	cmp	r7, r6
 80a59e2:	fa21 fe05 	lsr.w	lr, r1, r5
 80a59e6:	ea44 030e 	orr.w	r3, r4, lr
 80a59ea:	bf8c      	ite	hi
 80a59ec:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 80a59f0:	2400      	movls	r4, #0
 80a59f2:	fa01 f000 	lsl.w	r0, r1, r0
 80a59f6:	40ec      	lsrs	r4, r5
 80a59f8:	ea40 0204 	orr.w	r2, r0, r4
 80a59fc:	e004      	b.n	80a5a08 <__b2d+0x94>
 80a59fe:	460a      	mov	r2, r1
 80a5a00:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80a5a04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80a5a08:	4610      	mov	r0, r2
 80a5a0a:	4619      	mov	r1, r3
 80a5a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a5a0e <__d2b>:
 80a5a0e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a5a12:	461c      	mov	r4, r3
 80a5a14:	2101      	movs	r1, #1
 80a5a16:	4690      	mov	r8, r2
 80a5a18:	9e08      	ldr	r6, [sp, #32]
 80a5a1a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80a5a1c:	f7ff fcc1 	bl	80a53a2 <_Balloc>
 80a5a20:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80a5a24:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80a5a28:	4607      	mov	r7, r0
 80a5a2a:	b10c      	cbz	r4, 80a5a30 <__d2b+0x22>
 80a5a2c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80a5a30:	9201      	str	r2, [sp, #4]
 80a5a32:	f1b8 0f00 	cmp.w	r8, #0
 80a5a36:	d019      	beq.n	80a5a6c <__d2b+0x5e>
 80a5a38:	a802      	add	r0, sp, #8
 80a5a3a:	f840 8d08 	str.w	r8, [r0, #-8]!
 80a5a3e:	f7ff fd95 	bl	80a556c <__lo0bits>
 80a5a42:	9b00      	ldr	r3, [sp, #0]
 80a5a44:	b148      	cbz	r0, 80a5a5a <__d2b+0x4c>
 80a5a46:	9a01      	ldr	r2, [sp, #4]
 80a5a48:	f1c0 0120 	rsb	r1, r0, #32
 80a5a4c:	fa02 f101 	lsl.w	r1, r2, r1
 80a5a50:	430b      	orrs	r3, r1
 80a5a52:	40c2      	lsrs	r2, r0
 80a5a54:	617b      	str	r3, [r7, #20]
 80a5a56:	9201      	str	r2, [sp, #4]
 80a5a58:	e000      	b.n	80a5a5c <__d2b+0x4e>
 80a5a5a:	617b      	str	r3, [r7, #20]
 80a5a5c:	9b01      	ldr	r3, [sp, #4]
 80a5a5e:	2b00      	cmp	r3, #0
 80a5a60:	bf14      	ite	ne
 80a5a62:	2102      	movne	r1, #2
 80a5a64:	2101      	moveq	r1, #1
 80a5a66:	61bb      	str	r3, [r7, #24]
 80a5a68:	6139      	str	r1, [r7, #16]
 80a5a6a:	e007      	b.n	80a5a7c <__d2b+0x6e>
 80a5a6c:	a801      	add	r0, sp, #4
 80a5a6e:	f7ff fd7d 	bl	80a556c <__lo0bits>
 80a5a72:	9b01      	ldr	r3, [sp, #4]
 80a5a74:	2101      	movs	r1, #1
 80a5a76:	617b      	str	r3, [r7, #20]
 80a5a78:	6139      	str	r1, [r7, #16]
 80a5a7a:	3020      	adds	r0, #32
 80a5a7c:	b134      	cbz	r4, 80a5a8c <__d2b+0x7e>
 80a5a7e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80a5a82:	4404      	add	r4, r0
 80a5a84:	6034      	str	r4, [r6, #0]
 80a5a86:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80a5a8a:	e009      	b.n	80a5aa0 <__d2b+0x92>
 80a5a8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80a5a90:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80a5a94:	6030      	str	r0, [r6, #0]
 80a5a96:	6918      	ldr	r0, [r3, #16]
 80a5a98:	f7ff fd48 	bl	80a552c <__hi0bits>
 80a5a9c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80a5aa0:	6028      	str	r0, [r5, #0]
 80a5aa2:	4638      	mov	r0, r7
 80a5aa4:	b002      	add	sp, #8
 80a5aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a5aaa <__ratio>:
 80a5aaa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a5aae:	4688      	mov	r8, r1
 80a5ab0:	4669      	mov	r1, sp
 80a5ab2:	4681      	mov	r9, r0
 80a5ab4:	f7ff ff5e 	bl	80a5974 <__b2d>
 80a5ab8:	460d      	mov	r5, r1
 80a5aba:	4604      	mov	r4, r0
 80a5abc:	a901      	add	r1, sp, #4
 80a5abe:	4640      	mov	r0, r8
 80a5ac0:	f7ff ff58 	bl	80a5974 <__b2d>
 80a5ac4:	460f      	mov	r7, r1
 80a5ac6:	4606      	mov	r6, r0
 80a5ac8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80a5acc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80a5ad0:	4620      	mov	r0, r4
 80a5ad2:	1a9a      	subs	r2, r3, r2
 80a5ad4:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80a5ad8:	1ac9      	subs	r1, r1, r3
 80a5ada:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 80a5ade:	2b00      	cmp	r3, #0
 80a5ae0:	bfcc      	ite	gt
 80a5ae2:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 80a5ae6:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 80a5aea:	4632      	mov	r2, r6
 80a5aec:	463b      	mov	r3, r7
 80a5aee:	4629      	mov	r1, r5
 80a5af0:	f7fd fc74 	bl	80a33dc <__aeabi_ddiv>
 80a5af4:	b003      	add	sp, #12
 80a5af6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a5afa <__copybits>:
 80a5afa:	3901      	subs	r1, #1
 80a5afc:	b510      	push	{r4, lr}
 80a5afe:	1149      	asrs	r1, r1, #5
 80a5b00:	6914      	ldr	r4, [r2, #16]
 80a5b02:	3101      	adds	r1, #1
 80a5b04:	f102 0314 	add.w	r3, r2, #20
 80a5b08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80a5b0c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80a5b10:	42a3      	cmp	r3, r4
 80a5b12:	4602      	mov	r2, r0
 80a5b14:	d204      	bcs.n	80a5b20 <__copybits+0x26>
 80a5b16:	f853 2b04 	ldr.w	r2, [r3], #4
 80a5b1a:	f840 2b04 	str.w	r2, [r0], #4
 80a5b1e:	e7f7      	b.n	80a5b10 <__copybits+0x16>
 80a5b20:	2300      	movs	r3, #0
 80a5b22:	428a      	cmp	r2, r1
 80a5b24:	d202      	bcs.n	80a5b2c <__copybits+0x32>
 80a5b26:	f842 3b04 	str.w	r3, [r2], #4
 80a5b2a:	e7fa      	b.n	80a5b22 <__copybits+0x28>
 80a5b2c:	bd10      	pop	{r4, pc}

080a5b2e <__any_on>:
 80a5b2e:	f100 0214 	add.w	r2, r0, #20
 80a5b32:	6900      	ldr	r0, [r0, #16]
 80a5b34:	114b      	asrs	r3, r1, #5
 80a5b36:	4298      	cmp	r0, r3
 80a5b38:	b510      	push	{r4, lr}
 80a5b3a:	db0c      	blt.n	80a5b56 <__any_on+0x28>
 80a5b3c:	dd0c      	ble.n	80a5b58 <__any_on+0x2a>
 80a5b3e:	f011 011f 	ands.w	r1, r1, #31
 80a5b42:	d009      	beq.n	80a5b58 <__any_on+0x2a>
 80a5b44:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80a5b48:	fa24 f001 	lsr.w	r0, r4, r1
 80a5b4c:	fa00 f101 	lsl.w	r1, r0, r1
 80a5b50:	428c      	cmp	r4, r1
 80a5b52:	d10c      	bne.n	80a5b6e <__any_on+0x40>
 80a5b54:	e000      	b.n	80a5b58 <__any_on+0x2a>
 80a5b56:	4603      	mov	r3, r0
 80a5b58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a5b5c:	4293      	cmp	r3, r2
 80a5b5e:	d904      	bls.n	80a5b6a <__any_on+0x3c>
 80a5b60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80a5b64:	2900      	cmp	r1, #0
 80a5b66:	d0f9      	beq.n	80a5b5c <__any_on+0x2e>
 80a5b68:	e001      	b.n	80a5b6e <__any_on+0x40>
 80a5b6a:	2000      	movs	r0, #0
 80a5b6c:	bd10      	pop	{r4, pc}
 80a5b6e:	2001      	movs	r0, #1
 80a5b70:	bd10      	pop	{r4, pc}

080a5b72 <_calloc_r>:
 80a5b72:	b538      	push	{r3, r4, r5, lr}
 80a5b74:	fb02 f401 	mul.w	r4, r2, r1
 80a5b78:	4621      	mov	r1, r4
 80a5b7a:	f7fb fd7f 	bl	80a167c <_malloc_r>
 80a5b7e:	4605      	mov	r5, r0
 80a5b80:	b118      	cbz	r0, 80a5b8a <_calloc_r+0x18>
 80a5b82:	4622      	mov	r2, r4
 80a5b84:	2100      	movs	r1, #0
 80a5b86:	f7fe f98a 	bl	80a3e9e <memset>
 80a5b8a:	4628      	mov	r0, r5
 80a5b8c:	bd38      	pop	{r3, r4, r5, pc}

080a5b8e <link_code_end>:
	...

080a5b90 <dynalib_user>:
 80a5b90:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a5ba0:	0000 0000 6552 7073 6e6f 6573 6620 6f72     ....Response fro
 80a5bb0:	206d 6f50 7473 0a3a 2020 7325 000a 6f68     m Post:.  %s..ho
 80a5bc0:	6b6f 722d 7365 6f70 736e 2f65 6968 0074     ok-response/hit.
 80a5bd0:	6843 6365 696b 676e 6620 726f 4620 7869     Checking for Fix
 80a5be0:	7b00 2220 6f6c 676e 3a22 2220 6625 2c22     .{ "long": "%f",
 80a5bf0:	2220 616c 2274 203a 2522 2266 202c 4722      "lat": "%f", "G
 80a5c00:	5350 3a22 2220 6625 2c22 2220 7675 3a22     PS": "%f", "uv":
 80a5c10:	2220 6625 2022 007d 4f4e 4620 7869 6f20      "%f" }.NO Fix o
 80a5c20:	2066 6f63 7275 6573 6200 7475 6f74 206e     f course.button 
 80a5c30:	7270 7365 6573 2164 7b00 2220 6f6c 676e     pressed!.{ "long
 80a5c40:	3a22 2220 6625 2c22 2220 616c 2274 203a     ": "%f", "lat": 
 80a5c50:	2522 2266 202c 4722 5350 3a22 2220 6625     "%f", "GPS": "%f
 80a5c60:	2c22 2220 7675 3a22 2220 6625 7d22 2400     ", "uv": "%f"}.$
 80a5c70:	5047 4747 0041 4724 474e 4147 2400 5047     GPGGA.$GNGGA.$GP
 80a5c80:	4d52 0043 4724 524e 434d 2400 4d50 4b54     RMC.$GNRMC.$PMTK
 80a5c90:	3831 2c35 2a30 3232 2400 4d50 4b54 3030     185,0*22.$PMTK00
 80a5ca0:	2c31 3831 2c35 2a33 4333 2400 4d50 4b54     1,185,3*3C.$PMTK
 80a5cb0:	3831 2c35 2a31 3332 2400 4d50 4b54 3831     185,1*23.$PMTK18
 80a5cc0:	2a33 3833 2400 4d50 4b54 4f4c 0047 5024     3*38.$PMTKLOG.$P
 80a5cd0:	544d 314b 3136 302c 322a 0038 5024 544d     MTK161,0*28.$PMT
 80a5ce0:	304b 3031 302c 3230 322a 0044 6625 252c     K010,002*2D.%f,%
 80a5cf0:	0066 5024 544d 334b 3431 302c 312c 302c     f.$PMTK314,0,1,0
 80a5d00:	312c 302c 302c 302c 302c 302c 302c 302c     ,1,0,0,0,0,0,0,0
 80a5d10:	302c 302c 302c 302c 302c 302c 302c 302c     ,0,0,0,0,0,0,0,0
 80a5d20:	322a 0038 5024 544d 324b 3032 312c 3030     *28.$PMTK220,100
 80a5d30:	2a30 4631 2400 4750 4d43 2c44 3333 302c     0*1F.$PGCMD,33,0
 80a5d40:	362a 0044 494c 3353 4844 0000               *6D.LIS3DH..

080a5d4c <_ZTV15Adafruit_LIS3DH>:
	...
 80a5d54:	0bef 080a 0d21 080a 0bed 080a 11d9 080a     ....!...........
 80a5d64:	0d75 080a                                   u...

080a5d68 <_ZTV8SPIClass>:
	...
 80a5d70:	169d 080a 169f 080a                         ........

080a5d78 <_ZL14clock_divisors>:
 80a5d78:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
 80a5d88:	6169 006c 5355 5342 7265 6169 316c 7400     ial.USBSerial1.t
 80a5d98:	7079 0065 6170 6172 006d 6d63 0064 6469     ype.param.cmd.id
 80a5da8:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
 80a5db8:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
 80a5dc8:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
 80a5dd8:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
 80a5de8:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
 80a5df8:	0070 3025 3031 2075 5d00 0020 6425 2c00     p.%010u .] .%d.,
 80a5e08:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
 80a5e18:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
 80a5e28:	0a0d 6c00 006e 6e66 6300 646f 0065 6564     ...ln.fn.code.de
 80a5e38:	6174 6c69 6e00 6e6f 0065 7274 6361 0065     tail.none.trace.
 80a5e48:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
 80a5e58:	6170 696e 0063 6c61 006c 005a 2b25 3330     panic.all.Z.%+03
 80a5e68:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
 80a5e78:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
 80a5e88:	656d 0000                                   me..

080a5e8c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a5e94:	1b85 080a 1b8b 080a 1bcf 080a 1b99 080a     ................
 80a5ea4:	1b87 080a                                   ....

080a5ea8 <_ZTV9IPAddress>:
	...
 80a5eb0:	211d 080a 210d 080a 210f 080a               .!...!...!..

080a5ebc <_ZTV9USBSerial>:
	...
 80a5ec4:	21d9 080a 2229 080a 2237 080a 18d9 080a     .!..)"..7"......
 80a5ed4:	2215 080a 21db 080a 21f1 080a 2223 080a     ."...!...!..#"..
 80a5ee4:	2207 080a 21d5 080a                         ."...!..

080a5eec <_ZTV11USARTSerial>:
	...
 80a5ef4:	2379 080a 23c9 080a 23d7 080a 18d9 080a     y#...#...#......
 80a5f04:	238d 080a 23af 080a 239b 080a 23c3 080a     .#...#...#...#..
 80a5f14:	237b 080a 237f 080a                         {#...#..

080a5f1c <_ZTV7TwoWire>:
	...
 80a5f24:	24b1 080a 24fb 080a 24d3 080a 24b3 080a     .$...$...$...$..
 80a5f34:	24db 080a 24e3 080a 24eb 080a 24f3 080a     .$...$...$...$..

080a5f44 <_ZTVN5spark9WiFiClassE>:
	...
 80a5f4c:	260f 080a 2605 080a 25fb 080a 2579 080a     .&...&...%..y%..
 80a5f5c:	19af 080a 25ef 080a 25e3 080a 25db 080a     .....%...%...%..
 80a5f6c:	25d1 080a 25c7 080a 2583 080a               .%...%...%..

080a5f78 <_ZTVN5spark12NetworkClassE>:
	...
 80a5f80:	262d 080a 2637 080a 2641 080a 264b 080a     -&..7&..A&..K&..
 80a5f90:	2655 080a 2661 080a 266d 080a 2679 080a     U&..a&..m&..y&..
 80a5fa0:	2681 080a 268b 080a 2695 080a 6d66 646f     .&...&...&..fmod
	...

080a5fb8 <Zero>:
	...
 80a5fc4:	0000 8000                                   ....

080a5fc8 <_ctype_>:
 80a5fc8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a5fd8:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a5fe8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a5ff8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a6008:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a6018:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a6028:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a6038:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a6048:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a60cc <__sf_fake_stdin>:
	...

080a60ec <__sf_fake_stdout>:
	...

080a610c <__sf_fake_stderr>:
	...
 80a612c:	4f50 4953 0058 002e                         POSIX...

080a6134 <fpi.5342>:
 80a6134:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 80a6144:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.

080a6154 <fpinan.5378>:
 80a6154:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 80a6164:	0000 0000                                   ....

080a6168 <tinytens>:
 80a6168:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 80a6178:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 80a6188:	6f43 64ac 0628 1168                         Co.d(.h.

080a6190 <__mprec_tens>:
 80a6190:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80a61a0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80a61b0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80a61c0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 80a61d0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80a61e0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 80a61f0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 80a6200:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80a6210:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80a6220:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80a6230:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 80a6240:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 80a6250:	9db4 79d9 7843 44ea                         ...yCx.D

080a6258 <__mprec_bigtens>:
 80a6258:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80a6268:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80a6278:	bf3c 7f73 4fdd 7515                         <.s..O.u

080a6280 <p05.5385>:
 80a6280:	0005 0000 0019 0000 007d 0000               ........}...

080a628c <link_const_variable_data_end>:
 80a628c:	080a0385 	.word	0x080a0385
 80a6290:	080a0b5d 	.word	0x080a0b5d
 80a6294:	080a0be9 	.word	0x080a0be9
 80a6298:	080a0d31 	.word	0x080a0d31
 80a629c:	080a0d6d 	.word	0x080a0d6d
 80a62a0:	080a0d71 	.word	0x080a0d71
 80a62a4:	080a120d 	.word	0x080a120d
 80a62a8:	080a1771 	.word	0x080a1771
 80a62ac:	080a19c9 	.word	0x080a19c9
 80a62b0:	080a19d9 	.word	0x080a19d9
 80a62b4:	080a1a31 	.word	0x080a1a31
 80a62b8:	080a2619 	.word	0x080a2619
 80a62bc:	080a26e5 	.word	0x080a26e5
 80a62c0:	080a27bd 	.word	0x080a27bd
 80a62c4:	080a2801 	.word	0x080a2801
 80a62c8:	080a2885 	.word	0x080a2885
 80a62cc:	080a2909 	.word	0x080a2909
 80a62d0:	080a29cd 	.word	0x080a29cd
 80a62d4:	080a2a91 	.word	0x080a2a91

080a62d8 <link_constructors_end>:
	...
